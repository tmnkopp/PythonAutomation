
D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_00_DBUpdate7.60_Fixes.sql
---- Create date: 01/25/2024
---- Description: miscellaneous fixes for 7.60 and beyond
---- =============================================  

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'BOD2302' and Column_name=N'NMIRemovedAlready')
BEGIN
	ALTER TABLE [BOD2302] Add [NMIRemovedAlready] INT NULL  
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'enableBOD2201' )
BEGIN
	ALTER TABLE [BOD2302] Add [NMIRemovedAlready] INT NULL  
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'enableBOD2201' )
BEGIN
	ALTER TABLE [Component List] ADD enableBOD2201 BIT NULL 
END 








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_00_DBUpdate7.61_Fixes.sql
SET SprocFormValidation='frmVal_2024Q2CIO' -- no need to redo, just use the old one since no changes between Q1 and Q2
WHERE PK_Form='2024-Q2-CIO' 


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_ReportingCycles' AND COLUMN_NAME = 'NeedsTemplateUpload' )
BEGIN
	ALTER TABLE [fsma_ReportingCycles] ADD NeedsTemplateUpload BIT NOT NULL DEFAULT 0;
END 

-- DROP TABLE if exists TemplateFiles
IF NOT EXISTS (SELECT * FROM sysobjects WHERE name = 'TemplateFiles' AND type = 'U')
BEGIN
IF EXISTS(
SELECT name  
FROM sys.objects  
WHERE type = 'UQ' AND OBJECT_NAME(parent_object_id) = N'TemplateFiles')  
BEGIN
-- Delete the unique constraint.  
ALTER TABLE dbo.TemplateFiles   
DROP CONSTRAINT FK_ArtifactType;  
END

--// CSHELP-3931 
update fsma_FormMaster
update fsma_questions
set FK_QuestionType=64 --18
where pk_question=27449

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' and Column_name=N'FK_Component')
BEGIN
	ALTER TABLE [ArtifactsToReportCycles] DROP COLUMN [FK_Component]  
END
 
GO

UPDATE fsma_ReportingCycles SET Period='Q2' WHERE PK_ReportingCycle=151--MFA/Encryption Compliance 2024 Q2
	(4620, @PickListType_PK , N'IaaS, SaaS','IASA',5, GETDATE(), 1),
	(4621, @PickListType_PK , N'PaaS, SaaS','PASA',6, GETDATE(), 1) ,
	(14840, @PickListType_PK , N'IaaS, SaaS, PaaS','IAPASA',6, GETDATE(), 1)
SET IDENTITY_INSERT [dbo].[PickLists] OFF  
GO

ALTER TABLE MFAEncryption 
ALTER COLUMN ReasonNonCompliance NVARCHAR(MAX) 
  
ALTER TABLE MFAEncryption 
ALTER COLUMN CompensatingControlsCurrentlyPlace NVARCHAR(MAX) 
 
SET IDENTITY_INSERT [dbo].[PickLists] OFF  
GO

ALTER TABLE MFAEncryption 
ALTER COLUMN ReasonNonCompliance NVARCHAR(MAX) 
  
ALTER TABLE MFAEncryption 
ALTER COLUMN CompensatingControlsCurrentlyPlace NVARCHAR(MAX) 
 
ALTER TABLE MFAEncryption 
ALTER COLUMN SystemDescription NVARCHAR(MAX) 

ALTER TABLE MFAEncryption 
ALTER COLUMN ReasonNonCompliance NVARCHAR(MAX) 
  
ALTER TABLE MFAEncryption 
ALTER COLUMN CompensatingControlsCurrentlyPlace NVARCHAR(MAX) 
 
ALTER TABLE MFAEncryption 
ALTER COLUMN SystemDescription NVARCHAR(MAX) 

GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_00_DBUpdate7.62_Fixes.sql
END

GO
--CS-10084 
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TemplateFiles' AND COLUMN_NAME = 'UrlScheme' )
BEGIN
	ALTER TABLE [TemplateFiles] ADD UrlScheme NVARCHAR(100) NULL 
END 


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TemplateFiles' AND COLUMN_NAME = 'UrlAuthority' )
BEGIN
	ALTER TABLE [TemplateFiles] ADD UrlScheme NVARCHAR(100) NULL 
END 


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TemplateFiles' AND COLUMN_NAME = 'UrlAuthority' )
BEGIN
	ALTER TABLE [TemplateFiles] ADD UrlAuthority NVARCHAR(1000) NULL 
END 

GO



GO


IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FK_CIO_ATO_UPLOAD'))  
BEGIN 
	ALTER TABLE TIC_CloudServices DROP COLUMN FK_CIO_ATO_UPLOAD;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FK_FEDRAMP_UPLOAD'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FK_FEDRAMP_UPLOAD INT;
BEGIN 
	ALTER TABLE TIC_CloudServices DROP COLUMN FK_CIO_ATO_UPLOAD;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FK_FEDRAMP_UPLOAD'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FK_FEDRAMP_UPLOAD INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='SubAgencyComponent'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD SubAgencyComponent INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FK_FEDRAMP_UPLOAD INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='SubAgencyComponent'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD SubAgencyComponent INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='InitialAuthorizingEntity'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD InitialAuthorizingEntity NVARCHAR(1000);
BEGIN 
	ALTER TABLE TIC_CloudServices ADD SubAgencyComponent INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='InitialAuthorizingEntity'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD InitialAuthorizingEntity NVARCHAR(1000);
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='AuthorizationType'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD AuthorizationType INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD InitialAuthorizingEntity NVARCHAR(1000);
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='AuthorizationType'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD AuthorizationType INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='CloudServiceOffering'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD CloudServiceOffering INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD AuthorizationType INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='CloudServiceOffering'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD CloudServiceOffering INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOIssuanceDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOIssuanceDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD CloudServiceOffering INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOIssuanceDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOIssuanceDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPAuthorizationDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAuthorizationDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOIssuanceDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPAuthorizationDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAuthorizationDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOExpirationDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOExpirationDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAuthorizationDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOExpirationDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOExpirationDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPAnnualAssessmentDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAnnualAssessmentDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOExpirationDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPAnnualAssessmentDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAnnualAssessmentDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPAuth'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAuth INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAnnualAssessmentDate DATETIME;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPAuth'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAuth INT;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPPrepopulateDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPPrepopulateDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPAuth INT;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPPrepopulateDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPPrepopulateDate DATETIME;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='AuditNotes'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD AuditNotes NVARCHAR(1000);
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPPrepopulateDate DATETIME;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='AuditNotes'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD AuditNotes NVARCHAR(1000);
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='PPID'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD PPID NVARCHAR(99);
BEGIN 
	ALTER TABLE TIC_CloudServices ADD AuditNotes NVARCHAR(1000);
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='PPID'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD PPID NVARCHAR(99);
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOExpirationDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOExpirationDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD PPID NVARCHAR(99);
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOExpirationDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOExpirationDate DATETIME;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOIssuanceDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOIssuanceDate DATETIME;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOExpirationDate DATETIME;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOIssuanceDate'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOIssuanceDate DATETIME;
END


IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOIssuanceDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOIssuanceDate DATETIME;
END


IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOIssuanceDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOIssuanceDate_Status INT;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOExpirationDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOExpirationDate_Status INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOIssuanceDate_Status INT;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='ATOExpirationDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOExpirationDate_Status INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOExpirationDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOExpirationDate_Status INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD ATOExpirationDate_Status INT;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOExpirationDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOExpirationDate_Status INT;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOIssuanceDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOIssuanceDate_Status INT;
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOExpirationDate_Status INT;
END 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='FedRAMPATOIssuanceDate_Status'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD FedRAMPATOIssuanceDate_Status INT;
END


GO
 
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] 
END
GO


ALTER TABLE CDM_APIImport_Metrics_84
ALTER COLUMN [Metric_8_4] [FLOAT] NULL
GO

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metric_111To114' AND COLUMN_NAME='DateExported'))  
BEGIN 
ALTER TABLE CDM_APIImport_Metrics_84
ALTER COLUMN [Metric_8_4] [FLOAT] NULL
GO

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metric_111To114' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metric_111To114 ADD DateExported DATETIME NULL;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_115' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_115 ADD DateExported DATETIME  NULL;
BEGIN 
	ALTER TABLE CDM_APIImport_Metric_111To114 ADD DateExported DATETIME NULL;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_115' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_115 ADD DateExported DATETIME  NULL;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_1161To1162' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_1161To1162 ADD DateExported DATETIME  NULL;
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_115 ADD DateExported DATETIME  NULL;
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_1161To1162' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_1161To1162 ADD DateExported DATETIME  NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_124To127_131To133' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_124To127_131To133 ADD DateExported DATETIME  NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_1161To1162' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_1161To1162 ADD DateExported DATETIME  NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_124To127_131To133' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_124To127_131To133 ADD DateExported DATETIME  NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_51To53' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_51To53 ADD DateExported DATETIME NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_124To127_131To133' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_124To127_131To133 ADD DateExported DATETIME  NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_51To53' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_51To53 ADD DateExported DATETIME NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_84' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_84 ADD DateExported DATETIME NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_51To53' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_51To53 ADD DateExported DATETIME NULL;
END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CDM_APIImport_Metrics_84' AND COLUMN_NAME='DateExported'))  
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_84 ADD DateExported DATETIME NULL;
END

GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
BEGIN 
	ALTER TABLE CDM_APIImport_Metrics_84 ADD DateExported DATETIME NULL;
END

GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_1] [FLOAT] NULL
GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_2] [FLOAT] NULL
GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_1] [FLOAT] NULL
GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_2] [FLOAT] NULL
GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_3] [FLOAT] NULL
GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_2] [FLOAT] NULL
GO

ALTER TABLE CDM_APIImport_Metrics_124To127_131To133
ALTER COLUMN [Metric_1_3_3] [FLOAT] NULL
GO



END

GO 

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME='DateUpdated'))  
BEGIN 
	ALTER TABLE TIC_CloudServices ADD DateUpdated DATETIME DEFAULT(GETDATE());
END

GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_0_DBUpdate_7.58_fixes.sql
----SOC / CYBER EO / AAPS / TikTok Submitter
--SELECT * FROM fsma_FormTypes
--WHERE [Type] IN ('AAPS', 'CYBEREO', 'SOC', 'NTTGD')

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'CVEs' and Column_name=N'KnownRansomwareCampaignUse')
BEGIN
	ALTER TABLE CVEs Add KnownRansomwareCampaignUse NVARCHAR(4000) NULL
END

GO

--// CSHELP-3776
set identifier_text='0.1'
,FK_QuestionType=9
where PK_Question=54999

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_Questions' AND COLUMN_NAME = 'AllowNA' )
BEGIN
	ALTER TABLE fsma_Questions ADD AllowNA BIT NULL 
END 


UPDATE cq_Query
SET Query_Description = 'Dashboard - Agency MFA Rest Transit'
	'Agency Lead POCs in that Agency<br />BOD 19-02 Submitter in that Agency<br />BOD 19-02 Data Entry/Validate in that Agency<br />BOD 19-02 Data Call Administrator in that Agency<br />An additional specified admin EmailBOD1802Admin')
END

 
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'CVEs' and Column_name=N'DateArchived')
BEGIN
	ALTER TABLE [CVEs] Add [DateArchived] DATETIME NULL  
END
GO


UPDATE PickLists SET DisplayValue = Replace(cast(DisplayValue as varchar(max)),CHAR(11),' ') WHERE PK_PickListType = 402




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_0_DBUpdate_7.59.sql
/*
DBUPDATE 7.59
*/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'BOD2302' and Column_name=N'FindingStatus')
BEGIN
	ALTER TABLE [BOD2302] Add [FindingStatus] INT NULL  
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'BOD2302' and Column_name=N'NMIRemovedJust')
BEGIN
	ALTER TABLE [BOD2302] Add [NMIRemovedJust] NVARCHAR(4000) NULL  
BEGIN
	ALTER TABLE [BOD2302] Add [FindingStatus] INT NULL  
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'BOD2302' and Column_name=N'NMIRemovedJust')
BEGIN
	ALTER TABLE [BOD2302] Add [NMIRemovedJust] NVARCHAR(4000) NULL  
END
GO

--DECLARE @pktype INT = NULL
--[Description]  
update [Component List]
set SortOrder=100
where Acronym ='MBDA'

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'JSON_Mappers' and Column_name=N'FK_Question')
BEGIN
	ALTER TABLE JSON_Mappers Add FK_Question INT NULL
END
GO
UPDATE JSON_Mappers SET FK_Question = 48001 WHERE IdentifierText = '1' AND [JsonMapperCode] = 127
UPDATE JSON_Mappers SET FK_Question = 48002 WHERE IdentifierText = '2' AND [JsonMapperCode] = 127
UPDATE JSON_Mappers SET FK_Question = 48003 WHERE IdentifierText = '3' AND [JsonMapperCode] = 127




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_1_DBUpdate_7.58_IOSXE.sql
   SELECT MAX(PK_ReportingCycle) FROM fsma_ReportingCycles
   SELECT * FROM wf_Permissions ORDER BY PK_PERMISSIONS DESC 

   UPDATE fsma_ReportingCycles SET IsActive=1, Status='A' WHERE PK_ReportingCycle = 146
*/

ALTER TABLE wf_Access 
ALTER COLUMN Access_Descript NVARCHAR(MAX);

DELETE FROM wf_Permissions
WHERE PK_Permissions = 326





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\_4_DBUpdate_7.58_AAPS2023.sql
END


--// CS-9823
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'RMAIncidents' and Column_name=N'Value_mod')
BEGIN
	ALTER TABLE RMAIncidents Add Value_mod INT NULL  
END








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\02_DB_Update7.54_CIO_Permission_Updates.sql
--CS-9701
DECLARE @ObjectName NVARCHAR(100) = NULL;
SELECT @ObjectName = OBJECT_NAME([default_object_id]) FROM SYS.COLUMNS
WHERE [object_id] = OBJECT_ID('[ArtifactsToReportCycles]') AND [name] = 'IsActiveArtifact';
IF @ObjectName IS NOT NULL
BEGIN
	EXEC('ALTER TABLE [ArtifactsToReportCycles] DROP CONSTRAINT ' + @ObjectName)
END
GO

DELETE FROM ArtifactTypes WHERE PK_ArtifactType IN (78)
IF NOT EXISTS(SELECT * FROM ArtifactTypes WHERE PK_ArtifactType = 78)
	INSERT INTO ArtifactTypes (PK_ArtifactType, ArtifactTypeDescription, [Required], FK_SubmissionPackage, RequiredMIC)
	VALUES(78, 'Agency Template', 1, 1, 0) 
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' and Column_name=N'FK_Component')
BEGIN
	ALTER TABLE [ArtifactsToReportCycles] Add [FK_Component] INT NULL
END

GO
	 
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' and Column_name=N'IsActiveArtifact')
END

GO
	 
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' and Column_name=N'IsActiveArtifact')
BEGIN
	ALTER TABLE [ArtifactsToReportCycles] DROP COLUMN [IsActiveArtifact]  
END

GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\BOD_Processing_Logic.sql


--step -1
;; --USe SQL Management studio to import flat file into SQL to bod_high_in and bod_crit_in

  --step 0 create columns in imported table 
ALTER TABLE Bod1902Hi
ADD  PK_OrgSubmission INT NULL 

ALTER TABLE Bod1902Hi
ADD  FK_PK_Component INT NULL

;; --USe SQL Management studio to import flat file into SQL to bod_high_in and bod_crit_in

  --step 0 create columns in imported table 
ALTER TABLE Bod1902Hi
ADD  PK_OrgSubmission INT NULL 

ALTER TABLE Bod1902Hi
ADD  FK_PK_Component INT NULL

ALTER TABLE Bod1902Hi
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Hi
ADD  PK_OrgSubmission INT NULL 

ALTER TABLE Bod1902Hi
ADD  FK_PK_Component INT NULL

ALTER TABLE Bod1902Hi
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Hi 
ADD Severity INT NULL

ALTER TABLE Bod1902Hi
ADD  FK_PK_Component INT NULL

ALTER TABLE Bod1902Hi
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Hi 
ADD Severity INT NULL


ALTER TABLE Bod1902Crit
ADD  PK_OrgSubmission INT NULL 
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Hi 
ADD Severity INT NULL


ALTER TABLE Bod1902Crit
ADD  PK_OrgSubmission INT NULL 

ALTER TABLE Bod1902Crit
ADD  FK_PK_Component INT NULL

ADD Severity INT NULL


ALTER TABLE Bod1902Crit
ADD  PK_OrgSubmission INT NULL 

ALTER TABLE Bod1902Crit
ADD  FK_PK_Component INT NULL

ALTER TABLE Bod1902Crit
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Crit
ADD  PK_OrgSubmission INT NULL 

ALTER TABLE Bod1902Crit
ADD  FK_PK_Component INT NULL

ALTER TABLE Bod1902Crit
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Crit 
ADD Severity INT NULL
GO
ALTER TABLE Bod1902Crit
ADD  FK_PK_Component INT NULL

ALTER TABLE Bod1902Crit
ADD  PK_Component INT NULL

ALTER TABLE Bod1902Crit 
ADD Severity INT NULL
GO

--step 0 create columns in  BOD table
ALTER TABLE BOD 

ALTER TABLE Bod1902Crit 
ADD Severity INT NULL
GO

--step 0 create columns in  BOD table
ALTER TABLE BOD 
ADD  Detected DATETIME NULL 

ALTER TABLE BOD 
ADD  Reported DATETIME NULL 

GO

--step 0 create columns in  BOD table
ALTER TABLE BOD 
ADD  Detected DATETIME NULL 

ALTER TABLE BOD 
ADD  Reported DATETIME NULL 

ALTER TABLE BOD 
ADD  [owner] NVARCHAR(50) NULL 

ALTER TABLE BOD 
ADD  Detected DATETIME NULL 

ALTER TABLE BOD 
ADD  Reported DATETIME NULL 

ALTER TABLE BOD 
ADD  [owner] NVARCHAR(50) NULL 

ALTER TABLE  BOD
ADD  PK_Component INT NULL 
Go
ALTER TABLE BOD 
ADD  Reported DATETIME NULL 

ALTER TABLE BOD 
ADD  [owner] NVARCHAR(50) NULL 

ALTER TABLE  BOD
ADD  PK_Component INT NULL 
Go







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\CyberScope Master Update-Rev4.sql
	Status nvarchar(50),
	DateUploaded datetime,
	DateModified datetime
)
;

ALTER TABLE RealTimeUploads ADD CONSTRAINT PK_RealTimeUploads 
	PRIMARY KEY CLUSTERED (PK_RealTimeUpload)
;

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_nonFdccCompliance' and Column_name=N'c_PercentScannedA')
	BEGIN
ALTER TABLE RealTimeUploads ADD CONSTRAINT PK_RealTimeUploads 
	PRIMARY KEY CLUSTERED (PK_RealTimeUpload)
;

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_nonFdccCompliance' and Column_name=N'c_PercentScannedA')
	BEGIN
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedA] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedB] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [d_ScanFrequency] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [e_Response] [nvarchar](1) NULL
	END

	PRIMARY KEY CLUSTERED (PK_RealTimeUpload)
;

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_nonFdccCompliance' and Column_name=N'c_PercentScannedA')
	BEGIN
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedA] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedB] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [d_ScanFrequency] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [e_Response] [nvarchar](1) NULL
	END

--Rename emails from referencing OMB to being more specific
;

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_nonFdccCompliance' and Column_name=N'c_PercentScannedA')
	BEGIN
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedA] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedB] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [d_ScanFrequency] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [e_Response] [nvarchar](1) NULL
	END

--Rename emails from referencing OMB to being more specific
UPDATE EMAIL_Master SET EMAIL_DESCRIPTION = 'Approval of Agency FISMA Report Submission' WHERE EMAIL_CODE = 'EM003'

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_nonFdccCompliance' and Column_name=N'c_PercentScannedA')
	BEGIN
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedA] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [c_PercentScannedB] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [d_ScanFrequency] [int] NULL
		ALTER TABLE [fsma_nonFdccCompliance] Add [e_Response] [nvarchar](1) NULL
	END

--Rename emails from referencing OMB to being more specific
UPDATE EMAIL_Master SET EMAIL_DESCRIPTION = 'Approval of Agency FISMA Report Submission' WHERE EMAIL_CODE = 'EM003'
UPDATE EMAIL_Master SET EMAIL_DESCRIPTION = 'Rejection of Agency FISMA Report Submission' WHERE EMAIL_CODE = 'EM004'




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.42.sql
/*------------------------------------------------------------------------------
create a loop to add RC, orgsub and contact slots for each EINSTEIN bureau that requires it
------------------------------------------------------------------------------*/
-- create the EINSTEIN flag
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'Component List' AND Column_Name = 'enableEINSTEIN')
BEGIN
	ALTER TABLE [Component List]
	ADD enableEINSTEIN INT NULL
END

GO

--)
--ORDER BY FK_Component


IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_Contacts' and COLUMN_NAME='PK_OrgSubmission')
BEGIN
	ALTER TABLE fsma_Contacts DROP COLUMN PK_OrgSubmission
END
GO







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.43_IG.sql
,56--rma
)

-- grouping Datacall for AccessCode
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_DataCall' and COLUMN_NAME='FK_PK_DataCall')
BEGIN
	ALTER TABLE fsma_DataCall
	ADD FK_PK_DataCall INT
END
GO

UPDATE fsma_DataCall
SET FK_PK_DataCall=0
WHERE PK_DataCall in (0,5, 9, 11, 13, 18)


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Access' and COLUMN_NAME='FK_PK_DataCall')
BEGIN
	ALTER TABLE wf_Access
	ADD FK_PK_DataCall INT
END
GO
--agency user
UPDATE wf_Access SET FK_PK_DataCall=0 WHERE PK_Access in(7,22) OR FK_Access_Parent=7 --CIO, RMA, SCOC, CyberEO, AAPS
GO


--CS-8338
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='cq_PersonalQuery' and COLUMN_NAME='GroupName')
BEGIN
	ALTER TABLE cq_PersonalQuery ADD GroupName NVARCHAR(400) NULL
END
GO
-- CS-8922
UPDATE fsma_Questions SET  QuestionText='To what extent does the organization maintain a comprehensive and accurate inventory of its information systems (including cloud systems, public facing websites, and third-party systems), and system interconnections? (NIST SP 800-53, Rev. 5: CA-3 and PM-5; NIST Cybersecurity Framework (CSF): ID.AM-1 � 4; FY 2022 CIO FISMA Metrics: 1.1-1.1.5, 1.3; OMB A-130, NIST SP 800-37, Rev. 2: Task P-18; NIST 800-207, Section 7.3; EO 14028, Section 3; OMB M-22-05; OMB M-22-09, Federal Zero Trust Strategy, Section B and D (5); CISA Cybersecurity & Incident Response Playbooks)' WHERE PK_Question=28010-- 1
UPDATE fsma_Questions SET  QuestionText='To what extent does the organization use standard data elements/taxonomy to develop and maintain an up-to-date inventory of hardware assets (including GFE and Bring Your Own Device (BYOD) mobile devices) connected to the organization�s network with the detailed information necessary for tracking and reporting ? (NIST SP 800-53, Rev. 5: CA-7 and CM-8; NIST SP 800-137; NIST IR 8011; NIST 800-207, 7.3.2; Federal Enterprise Architecture (FEA) Framework, v2; FY 2022 CIO FISMA Metrics: 1.2-1.2.3; CSF: ID.AM-1, ID.AM-5; NIST SP 800-37, Rev. 2: Task P-10 and P-16; NIST 800-207, Section 7.3; EO 14028, Section 3; OMB M-22-05; OMB M-22-09, Federal Zero Trust Strategy, Section B; CISA Cybersecurity & Incident Response Playbooks; CIS Top 18 Security Controls v.8: Control 1)' WHERE PK_Question=28011 --2
set WarningQuestion=0
where PK_Question=28145

--//
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_Questions' AND Column_Name = 'MetricType')
BEGIN
	ALTER TABLE [fsma_Questions]
	ADD MetricType VARCHAR(30) NULL
END

go





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.44.sql
set WarningQuestion=0
where PK_Question=28145

--//
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_Questions' AND Column_Name = 'MetricType')
BEGIN
	ALTER TABLE [fsma_Questions]
	ADD MetricType VARCHAR(30) NULL
END

go
update q
ParmValue8 = NULL
WHERE ParmName = 'orgsubmission'
 
--CS-8338
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='cq_Query' and COLUMN_NAME='ShortName')
BEGIN
	ALTER TABLE cq_Query ADD ShortName NVARCHAR(31) NULL
END

GO

UPDATE cq_Query
	--ORDER BY FK_QuestionGroup
)


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='CVEUnremediated' and COLUMN_NAME='SubmissionCount')
BEGIN
	ALTER TABLE CVEUnremediated ADD SubmissionCount INT NULL
END
GO 


UPDATE fsma_QuestionDependencies




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.46.sql



 ---- **** 7.46 general script ****-----
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'BOD' AND Column_Name = 'KEV')
BEGIN
	ALTER TABLE [BOD]
	ADD KEV NVARCHAR(10) NULL
END

DELETE FROM fsma_QuestionDependencies WHERE FK_Question=28503 
INSERT INTO fsma_QuestionDependencies
(28720,  28723, '4529')  -- 14.2.1, 14.2



IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DeaccessioningJustification')
BEGIN
	ALTER TABLE fsma_HVAs ADD DeaccessioningJustification INT NULL -- PICKLIST HVADEJUST
END
--Breakout Jutications for Checkboxes
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustDecommNonOperational')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustDecommNonOperational BIT NULL
BEGIN
	ALTER TABLE fsma_HVAs ADD DeaccessioningJustification INT NULL -- PICKLIST HVADEJUST
END
--Breakout Jutications for Checkboxes
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustDecommNonOperational')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustDecommNonOperational BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustNonMissCrit')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustNonMissCrit BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustDecommNonOperational')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustDecommNonOperational BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustNonMissCrit')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustNonMissCrit BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustNoInfoVal')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustNoInfoVal BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustNonMissCrit')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustNonMissCrit BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustNoInfoVal')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustNoInfoVal BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustMergedWithSys')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustMergedWithSys BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustNoInfoVal')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustNoInfoVal BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustMergedWithSys')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustMergedWithSys BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustDecommNonOperational')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustDecommNonOperational BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'JustMergedWithSys')
BEGIN
	ALTER TABLE fsma_HVAs ADD JustMergedWithSys BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustDecommNonOperational')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustDecommNonOperational BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustNonMissCrit')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustNonMissCrit BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustDecommNonOperational')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustDecommNonOperational BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustNonMissCrit')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustNonMissCrit BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustNoInfoVal')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustNoInfoVal BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustNonMissCrit')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustNonMissCrit BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustNoInfoVal')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustNoInfoVal BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustMergedWithSys')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustMergedWithSys BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustNoInfoVal')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustNoInfoVal BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'JustMergedWithSys')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustMergedWithSys BIT NULL
END
-- 1
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DateOfDecomm')
BEGIN
	ALTER TABLE fsma_HVAs ADD DateOfDecomm DATETIME NULL
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD JustMergedWithSys BIT NULL
END
-- 1
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DateOfDecomm')
BEGIN
	ALTER TABLE fsma_HVAs ADD DateOfDecomm DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DecommNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD DecommNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DateOfDecomm')
BEGIN
	ALTER TABLE fsma_HVAs ADD DateOfDecomm DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DecommNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD DecommNotes NVARCHAR(4000) NULL
END
-- 2
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritJust')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritJust INT NULL
BEGIN
	ALTER TABLE fsma_HVAs ADD DecommNotes NVARCHAR(4000) NULL
END
-- 2
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritJust')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritJust INT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoPMEForMEF')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoPMEForMEF BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritJust')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritJust INT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoPMEForMEF')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoPMEForMEF BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritOther')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritOther BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoPMEForMEF')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoPMEForMEF BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritOther')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritOther BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritOther')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritOther BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NonMissCritNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritNotes NVARCHAR(4000) NULL
END
-- 3
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'SensitiveDataTypeTrans')
BEGIN
	ALTER TABLE fsma_HVAs ADD SensitiveDataTypeTrans BIT NULL
BEGIN
	ALTER TABLE fsma_HVAs ADD NonMissCritNotes NVARCHAR(4000) NULL
END
-- 3
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'SensitiveDataTypeTrans')
BEGIN
	ALTER TABLE fsma_HVAs ADD SensitiveDataTypeTrans BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DataSensitive')
BEGIN
	ALTER TABLE fsma_HVAs ADD DataSensitive BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'SensitiveDataTypeTrans')
BEGIN
	ALTER TABLE fsma_HVAs ADD SensitiveDataTypeTrans BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DataSensitive')
BEGIN
	ALTER TABLE fsma_HVAs ADD DataSensitive BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoInfoValOther')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoInfoValOther BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DataSensitive')
BEGIN
	ALTER TABLE fsma_HVAs ADD DataSensitive BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoInfoValOther')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoInfoValOther BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoInfoValNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoInfoValNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoInfoValOther')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoInfoValOther BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'NoInfoValNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoInfoValNotes NVARCHAR(4000) NULL
END

--4
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'IsMergedSysHVA')
BEGIN
	ALTER TABLE fsma_HVAs ADD NoInfoValNotes NVARCHAR(4000) NULL
END

--4
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'IsMergedSysHVA')
BEGIN
	ALTER TABLE fsma_HVAs ADD IsMergedSysHVA BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'MergedSysName')
BEGIN
	ALTER TABLE fsma_HVAs ADD MergedSysName NVARCHAR(255) NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'IsMergedSysHVA')
BEGIN
	ALTER TABLE fsma_HVAs ADD IsMergedSysHVA BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'MergedSysName')
BEGIN
	ALTER TABLE fsma_HVAs ADD MergedSysName NVARCHAR(255) NULL
END 
-- Decomm Notes
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AdditionalDecommInfo')
BEGIN
	ALTER TABLE fsma_HVAs ADD AdditionalDecommInfo NVARCHAR(4000) NULL
BEGIN
	ALTER TABLE fsma_HVAs ADD MergedSysName NVARCHAR(255) NULL
END 
-- Decomm Notes
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AdditionalDecommInfo')
BEGIN
	ALTER TABLE fsma_HVAs ADD AdditionalDecommInfo NVARCHAR(4000) NULL
END 

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DeaccessioningJustification')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DeaccessioningJustification INT NULL -- PICKLIST HVADEJUST
BEGIN
	ALTER TABLE fsma_HVAs ADD AdditionalDecommInfo NVARCHAR(4000) NULL
END 

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DeaccessioningJustification')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DeaccessioningJustification INT NULL -- PICKLIST HVADEJUST
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateOfDecomm')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DateOfDecomm DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DeaccessioningJustification')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DeaccessioningJustification INT NULL -- PICKLIST HVADEJUST
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateOfDecomm')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DateOfDecomm DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DecommNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DecommNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateOfDecomm')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DateOfDecomm DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DecommNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DecommNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritJust')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritJust INT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DecommNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DecommNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritJust')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritJust INT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoPMEForMEF')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoPMEForMEF BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritJust')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritJust INT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoPMEForMEF')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoPMEForMEF BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritOther')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritOther BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoPMEForMEF')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoPMEForMEF BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritOther')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritOther BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritOther')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritOther BIT NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'SensitiveDataTypeTrans')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD SensitiveDataTypeTrans BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NonMissCritNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NonMissCritNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'SensitiveDataTypeTrans')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD SensitiveDataTypeTrans BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DataSensitive')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DataSensitive BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'SensitiveDataTypeTrans')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD SensitiveDataTypeTrans BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DataSensitive')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DataSensitive BIT NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoInfoValOther')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoInfoValOther BIT NULL
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD DataSensitive BIT NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoInfoValOther')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoInfoValOther BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoInfoValNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoInfoValNotes NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoInfoValOther')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoInfoValOther BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'NoInfoValNotes')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoInfoValNotes NVARCHAR(4000) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'IsMergedSysHVA')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD IsMergedSysHVA BIT NULL
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD NoInfoValNotes NVARCHAR(4000) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'IsMergedSysHVA')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD IsMergedSysHVA BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'MergedSysName')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD MergedSysName NVARCHAR(255) NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'IsMergedSysHVA')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD IsMergedSysHVA BIT NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'MergedSysName')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD MergedSysName NVARCHAR(255) NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'AdditionalDecommInfo')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD AdditionalDecommInfo NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'MergedSysName')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD MergedSysName NVARCHAR(255) NULL
END 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'AdditionalDecommInfo')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT ADD AdditionalDecommInfo NVARCHAR(4000) NULL
END

GO

EXEC CreateRequiredAgencyContacts




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.47.sql
ORDER BY SortOrder
IF NOT EXISTS (SELECT 1
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = 'Component List'
        AND COLUMN_NAME = 'TrustFederatedLogin')
BEGIN
    ALTER TABLE [Component List] ADD TrustFederatedLogin BIT NULL 
END
GO


--// CS-9164




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.48.sql


 /* 7.48 DB UPDATE */

 IF NOT EXISTS (SELECT * FROM syscolumns WHERE id = OBJECT_ID('fsma_Contacts') AND name = 'DateAdded')  
BEGIN
	ALTER TABLE [fsma_Contacts]
	ADD [DateAdded] DATETIME NULL
END
GO


INSERT INTO fsma_QuestionDependencies (FK_Question, FK_Question_Master, Question_Master_CodeValue_ToMakeRequired) VALUES (28512,  28511, '4550'); --  SELECT * From vwPickLists WHERE PK_PickListType=363 
INSERT INTO fsma_QuestionDependencies (FK_Question, FK_Question_Master, Question_Master_CodeValue_ToMakeRequired) VALUES (28512,  28511, '4551');
/* END */

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_ContactTitles' AND Column_Name = 'BODGeneral')
BEGIN
	ALTER TABLE fsma_ContactTitles
	DROP COLUMN BODGeneral 
END

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_ContactTitles' AND Column_Name = 'isBODGeneral')
BEGIN
	ALTER TABLE fsma_ContactTitles
	DROP COLUMN BODGeneral 
END

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_ContactTitles' AND Column_Name = 'isBODGeneral')
BEGIN
	ALTER TABLE fsma_ContactTitles
	DROP COLUMN isBODGeneral 
END

/*------------------------------------------------------------------------------
add columns to cq_ParmsMaster so that we can programmatically associate saved parameter values to a property

/*------------------------------------------------------------------------------
add columns to cq_ParmsMaster so that we can programmatically associate saved parameter values to a property
------------------------------------------------------------------------------*/
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_ContactTitles' AND Column_Name = 'isBODGeneral')
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isBODGeneral NVARCHAR(250) NULL
END

GO

UPDATE fsma_ContactTitles
SET [Required]=1
WHERE PK_ContactTitles	=14

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'Component List' AND Column_Name = 'enableZeroTouch')
BEGIN
	ALTER TABLE [Component List]
	ADD enableZeroTouch INT NULL
END
GO

-- subquestions for 1.1 HVA
		WHERE PK_Form = '2021-A-EINSTEIN'
	)
)

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DateDeactivated')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD DateDeactivated DATETIME NULL
END
GO
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateDeactivated')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD DateDeactivated DATETIME NULL
END
GO
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateDeactivated')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
	ADD DateDeactivated DATETIME NULL
END
GO
--  SELECT TOP 2 * FROM vwPickLists ORDER BY PK_PickList DESC
DECLARE @PickListType_PK INT = 386 
	where Access_Code in (select Access_Code from wf_Access
	where FK_Access_Parent=24) 


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'CDMCountSubmitted')
BEGIN
	ALTER TABLE CVEUnremediated
	ADD CDMCountSubmitted INT NULL
END
 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'CDMDateSubmitted')
BEGIN
	ALTER TABLE CVEUnremediated
	ADD CDMCountSubmitted INT NULL
END
 
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'CDMDateSubmitted')
BEGIN
	ALTER TABLE CVEUnremediated
	ADD CDMDateSubmitted DATETIME NULL
END 
GO

--  SELECT TOP 2 * FROM vwPickLists ORDER BY PK_PickList DESC




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate 7.49.sql
	) AL ON AL.PK_OrgSubmission=CVEUN.PK_OrgSubmission
	WHERE CVEUn.DateModified IS NULL
END
GO
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'DateCreated')
BEGIN
	ALTER TABLE CVEUnremediated
	ADD DateCreated DATETIME NULL DEFAULT(GETDATE())
END
GO
IF EXISTS(SELECT * FROM CVEUnremediated WHERE DateCreated IS NULL)
BEGIN
WHERE PK_Question=29513

--//

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_QuestionTypes' AND Column_Name = 'ValidationTxt')
BEGIN
	ALTER TABLE fsma_QuestionTypes
	ADD ValidationTxt NVARCHAR(500) NULL
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.35.1.sql




IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'Component List' AND Column_Name = 'enableSW')
BEGIN
	ALTER TABLE [Component List]
	ADD enableSW INT NULL
END

GO


GO

--CS-8338
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='ArtifactsToReportCycles' and COLUMN_NAME='IsActiveArtifactType')
BEGIN
	ALTER TABLE ArtifactsToReportCycles ADD IsActiveArtifactType BIT DEFAULT 0
END
GO
 
 UPDATE [Component List]
 SET enableSW = enableBOD

-------------
--CS-8337

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_DataCall' and COLUMN_NAME='PermissionCode_Submit')
BEGIN
	ALTER TABLE fsma_DataCall DROP COLUMN PermissionCode_Submit
END
GO
----------------  BEGIN 1802 Remediation Plan Schema Updater (moved to '7.36') ------------------------------
 





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.35_CYBEREO_2021.sql




IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='Artifacts' and COLUMN_NAME='IsCurrent')
BEGIN
	ALTER TABLE Artifacts ADD IsCurrent BIT DEFAULT 0
END
GO

UPDATE Artifacts SET IsCurrent = 0 WHERE IsCurrent IS NULL
GO
UPDATE Artifacts SET IsCurrent = 0 WHERE IsCurrent IS NULL
GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='Artifacts' and COLUMN_NAME='CyberEOGroup')
BEGIN
	ALTER TABLE Artifacts ADD CyberEOGroup INT NULL
END
GO


DECLARE @PK_DataCall INT = 18




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.36.sql


EXEC cq_DeleteQueryAndClearRefs 'cq_Investments'
 
IF (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME = 'AssmtFinding' AND TABLE_NAME='fsma_POAMS') = 'int'
BEGIN
	ALTER TABLE fsma_POAMS
	ALTER COLUMN AssmtFinding NVARCHAR(4000);
	PRINT('ALTER COLUMN')
	UPDATE REM 
	SET REM.AssmtFinding=CONVERT(NVARCHAR(4000),PL.DisplayValue)
	FROM fsma_POAMS REM




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.37.sql
	
END   

--delete existing column in a table 
IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_CriticalPlans' and COLUMN_NAME='DateFirstDetected')
BEGIN
	ALTER TABLE BODOpen_CriticalPlans 
	DROP COLUMN DateFirstDetected  
END
GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DateFirstDetected')
	DROP COLUMN DateFirstDetected  
END
GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DateFirstDetected')
BEGIN
	ALTER TABLE BODOpen_HighPlans 
	DROP COLUMN DateFirstDetected  
END
GO

--add a column in the same table
END
GO

--add a column in the same table
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_CriticalPlans' and COLUMN_NAME='DaysSinceFirstDetected')
BEGIN
ALTER TABLE BODOpen_CriticalPlans
ADD DaysSinceFirstDetected FLOAT;
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DaysSinceFirstDetected')
ADD DaysSinceFirstDetected FLOAT;
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DaysSinceFirstDetected')
BEGIN
ALTER TABLE BODOpen_HighPlans
ADD  DaysSinceFirstDetected FLOAT;
END
GO


GO


--delete existing column in a table 
IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_CriticalPlans' and COLUMN_NAME='DateOpened')
BEGIN
	ALTER TABLE BODOpen_CriticalPlans 
	DROP COLUMN DateOpened  
END
GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DateOpened')
	DROP COLUMN DateOpened  
END
GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DateOpened')
BEGIN
	ALTER TABLE BODOpen_HighPlans 
	DROP COLUMN DateOpened  
END
GO

--add a column in the same table
END
GO

--add a column in the same table
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_CriticalPlans' and COLUMN_NAME='DateDetected')
BEGIN
ALTER TABLE BODOpen_CriticalPlans
ADD DateDetected DATETIME;
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DateDetected')
ADD DateDetected DATETIME;
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BODOpen_HighPlans' and COLUMN_NAME='DateDetected')
BEGIN
ALTER TABLE BODOpen_HighPlans
ADD DateDetected DATETIME;
END
GO

--- CSHELP-2989
    UPDATE fsma_Questions SET identifier_text = '8' WHERE PK_Question = 20960


	--delete existing column in a table 
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='EMAIL_MASTER' and COLUMN_NAME='RecipientDescription')
BEGIN
	ALTER TABLE EMAIL_MASTER 
	ADD RecipientDescription NVARCHAR(MAX) 
END
GO

ALTER TABLE EMAIL_MASTER
BEGIN
	ALTER TABLE EMAIL_MASTER 
	ADD RecipientDescription NVARCHAR(MAX) 
END
GO

ALTER TABLE EMAIL_MASTER
ALTER COLUMN [TRIGGERED_BY] NVARCHAR(50) NULL
GO

--[BOD 18-02 HVA] New HVA Created
--[BOD 18-02 HVA] Upcoming Reporting Requirement




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.38.sql

/*-------------------------------------------------------------------------------------------------
CS-8495 EINSTEIN Site Configuration Questionnaire: Update Agency Contacts page
-------------------------------------------------------------------------------------------------*/
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_ContactTitles' AND COLUMN_NAME = 'sortpos' )
	BEGIN
		ALTER TABLE fsma_ContactTitles ADD sortpos INT NULL; 
	END
GO

UPDATE fsma_ContactTitles
SET sortpos = 1, [Required] = 1
 

GO	 
/* MAP ASSESSMENT TO AGENCY */ 
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_Assessments' AND COLUMN_NAME = 'PK_Component' )
BEGIN
	ALTER TABLE fsma_Assessments ADD PK_Component INT NULL; 
END 
GO
/* PREPOP ASSMT Agency (PK_Component)      */ 
UPDATE ASSMT SET PK_Component=HVA.PK_Component_Agency
FROM fsma_Assessments ASSMT INNER JOIN fsma_HVAs HVA ON ASSMT.FK_PK_HVA=HVA.PK_HVA
SET IDENTITY_INSERT [dbo].[JSON_Mappers] OFF
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_Query' AND COLUMN_NAME = 'IsJSONOutput')
BEGIN
  ALTER TABLE cq_Query
    ADD IsJSONOutput BIT NULL
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.38_AAPS2021.sql
----******** END: Annual Agency Performance Summary 2021 **** 

---//set values to 0 if no data**

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='RMAIncidents' and COLUMN_NAME='PK_Incidents_Vector')
BEGIN
	ALTER TABLE RMAIncidents
	ADD PK_Incidents_Vector INT;
END
GO

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Incidents_Vector'))  




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.39.sql
IF EXISTS (SELECT * FROM sysobjects WHERE name = 'ReopenBOD22-01Submission' AND type = 'P')
    DROP PROCEDURE [ReopenBOD22-01Submission]

--delete existing column in a table 
IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='CVEUnremediated' and COLUMN_NAME='VulnerabilityName')
BEGIN
	ALTER TABLE CVEUnremediated 
	DROP COLUMN VulnerabilityName
END
GO

-- added for BOD 2201 KEV, but can/will be used for every cycle

-- added for BOD 2201 KEV, but can/will be used for every cycle
-- meant to be sql run after you submit.  
-- in this case, it's to create a new orgsub when a form is 'reopened'
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_FormMaster' and name = 'SprocFormSubmit')
BEGIN
	ALTER TABLE [dbo].[fsma_FormMaster]
	ADD    [SprocFormSubmit] [nvarchar](50) NULL
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DBUpdate_7.40.sql



--add a column to store a deadline for each poam. will be updated each month according to certain conditions
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='CurrentDeadlineDate')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD CurrentDeadlineDate DATETIME
END
GO

-- default date will be feb 2022 deadline
where PK_Question=27081


--//CS-8672
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_GTT' AND COLUMN_NAME = 'UserId' )
	BEGIN
		ALTER TABLE fsma_GTT ADD UserId INT NULL; 
	END
GO 
--//CS-8186

DELETE fsma_Questions

EXEC cq_DeleteQueryAndClearRefs 'cq_TICCloudServices'

--CS-8702 poam level flag to see if it has an exception for deadline date (exception from Scheduled closed date) 
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_POAMS' AND COLUMN_NAME = 'DeadlineDateException' )
	BEGIN
		ALTER TABLE fsma_POAMS ADD DeadlineDateException INT DEFAULT 0 ; 
	END
GO


--CS-8677
GO


--CS-8677
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormTypes' AND COLUMN_NAME = 'ReopenButtonText' )
	BEGIN
		ALTER TABLE fsma_FormTypes ADD ReopenButtonText VARCHAR(255) NULL; 
	END
GO

IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormTypes' AND COLUMN_NAME = 'SubmitButtonText' )
	BEGIN
		ALTER TABLE fsma_FormTypes ADD ReopenButtonText VARCHAR(255) NULL; 
	END
GO

IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormTypes' AND COLUMN_NAME = 'SubmitButtonText' )
	BEGIN
		ALTER TABLE fsma_FormTypes ADD SubmitButtonText VARCHAR(255) NULL; 
	END
GO 

IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormTypes' AND COLUMN_NAME = 'MissingPermissionTooltip' )
	BEGIN
		ALTER TABLE fsma_FormTypes ADD SubmitButtonText VARCHAR(255) NULL; 
	END
GO 

IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormTypes' AND COLUMN_NAME = 'MissingPermissionTooltip' )
	BEGIN
		ALTER TABLE fsma_FormTypes ADD MissingPermissionTooltip VARCHAR(500) NULL; 
	END
GO 

UPDATE fsma_FormTypes SET ReopenButtonText = 'Reopen Submission' WHERE PK_FormType IN (18,21)
UPDATE fsma_FormTypes SET ReopenButtonText = 'Reopen Remediation Plan' WHERE PK_FormType IN (12,16)
GO


/* Add Interval */ 
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_ReportingCycles' AND COLUMN_NAME = 'IntervalDate' )
BEGIN
	ALTER TABLE fsma_ReportingCycles ADD IntervalDate DATE NULL; 
END 


IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Email_OptOut_Agency'))  
BEGIN 

GO

--//CS-8707
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_POAMS' AND COLUMN_NAME = 'UserId' )
	BEGIN
		ALTER TABLE fsma_POAMS ADD UserId INT NULL; 
	END
GO 

--Bod1802HVAArtifactUpload	(BOD 18-02 Remediation Plan) New Artifact Uploaded
UPDATE EMAIL_MASTER
'Bod2201KEVOverdueTwoDays', 
'Bod2201KEVDueToday')

 
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CVEUnremediated' AND COLUMN_NAME = 'CveCountJustification' )
	BEGIN
		ALTER TABLE CVEUnremediated ADD CveCountJustification NVARCHAR(4000) NULL; 
	END
GO  
 
DELETE q FROM fsma_Questions q WHERE PK_Question IN (27453) AND ExternalLinkType='2201CDMIMP'
SET IDENTITY_INSERT [dbo].[fsma_Questions] ON  




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update2.3_2011Q3.sql


--dashlet tables and architecture

/****** Object:  ForeignKey [FK_dsh_Catalog_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] DROP CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] DROP CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
/****** Object:  Table [dbo].[dsh_Catalog_DisplayTypes]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
/****** Object:  Table [dbo].[dsh_Catalog_DisplayTypes]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_DisplayTypes]
GO
/****** Object:  Table [dbo].[dsh_Catalog_SubjectMatters]    Script Date: 02/16/2011 14:29:58 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_DisplayTypes]
GO
/****** Object:  Table [dbo].[dsh_Catalog_SubjectMatters]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_SubjectMatters]
GO
/****** Object:  Table [dbo].[dsh_DashletLayout_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_SubjectMatters]
GO
/****** Object:  Table [dbo].[dsh_DashletLayout_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]') AND type in (N'U'))
GO
/****** Object:  Table [dbo].[dsh_DashletLayout_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayout_Dashlets]
GO
/****** Object:  Table [dbo].[dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayout_Dashlets]
GO
/****** Object:  Table [dbo].[dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_sort_order]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_sort_order]
END
/****** Object:  Table [dbo].[dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_sort_order]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_sort_order]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_FK_DashletLayoutType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_FK_DashletLayoutType]
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_sort_order]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_FK_DashletLayoutType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_FK_DashletLayoutType]
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayouts]
GO
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayouts]
GO
/****** Object:  Table [dbo].[dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] DROP CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog]
GO
/****** Object:  Table [dbo].[dsh_Dashlets]    Script Date: 02/16/2011 14:29:59 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog]
GO
/****** Object:  Table [dbo].[dsh_Dashlets]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_keys]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_keys]
END
/****** Object:  Table [dbo].[dsh_Dashlets]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_keys]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_keys]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_values]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_values]
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_keys]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_values]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_values]
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Dashlets]
GO
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Dashlets]
GO
/****** Object:  Table [dbo].[dsh_Dashlet_Perms]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Dashlet_Perms]
GO
/****** Object:  Table [dbo].[dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] CHECK CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] CHECK CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] CHECK CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] CHECK CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] CHECK CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] CHECK CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] CHECK CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts] FOREIGN KEY([FK_DashletLayout])
REFERENCES [dbo].[dsh_DashletLayouts] ([PK_DashletLayout])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] CHECK CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts] FOREIGN KEY([FK_DashletLayout])
REFERENCES [dbo].[dsh_DashletLayouts] ([PK_DashletLayout])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts] FOREIGN KEY([FK_DashletLayout])
REFERENCES [dbo].[dsh_DashletLayouts] ([PK_DashletLayout])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets] FOREIGN KEY([FK_Dashlet])
REFERENCES [dbo].[dsh_Dashlets] ([PK_Dashlet])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets] FOREIGN KEY([FK_Dashlet])
REFERENCES [dbo].[dsh_Dashlets] ([PK_Dashlet])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets] FOREIGN KEY([FK_Dashlet])
REFERENCES [dbo].[dsh_Dashlets] ([PK_Dashlet])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages] FOREIGN KEY([FK_DashletPage])
REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages] FOREIGN KEY([FK_DashletPage])
REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages] FOREIGN KEY([FK_DashletPage])
REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] CHECK CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] CHECK CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] CHECK CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO

DECLARE @PermPK AS INT
DECLARE @PK AS INT





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.19_CIOQ120.sql

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='CompareMetrics'
  AND COLUMN_NAME='ThresholdHigh'
  )
BEGIN
	ALTER TABLE CompareMetrics
	ADD ThresholdHigh VARCHAR(50)
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='CompareMetrics'
  AND COLUMN_NAME='Comments'
  )
BEGIN
	ALTER TABLE CompareMetrics
	ADD [Comments] VARCHAR(500)
END
GO
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='CompareMetrics'
GO
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='CompareMetrics'
  AND COLUMN_NAME='MscValue'
  )
BEGIN
	ALTER TABLE CompareMetrics
	ADD MscValue VARCHAR(50)
END
GO

GO
GO

GO

IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('fsma_FormTypes') AND name = 'PermissionCode_Submit')  
BEGIN
	ALTER TABLE fsma_FormTypes
	ADD PermissionCode_Submit NVARCHAR(50) NULL 
END
GO

UPDATE fsma_FormTypes SET PermissionCode_Submit = 'TICPOAMSUBMIT' WHERE PK_FormType = 5




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.22_CIOQ220.sql
GO
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='CompareMetrics'
  AND COLUMN_NAME='TypeValue'
  )
BEGIN
	ALTER TABLE CompareMetrics
	ADD TypeValue VARCHAR(20)
END

GO

 ,(1467, 22, N'CIO2NULL' , N'90' ,'80', '100','PCT',NULL, N'GTE','100.0*[5.1]/[1.1.5]',NULL)
 ,(1468, 22, N'CIO2NULL' , N'90' ,'80', '100','PCT',NULL, N'GTE','100.0*[5.1.1]/[5.1]',NULL)


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_Activities' and COLUMN_NAME='Comments')
BEGIN
	ALTER TABLE fsma_Activities
	ADD Comments NVARCHAR(4000) NULL
END
GO

EXEC CreateExternalDataSlots '2020-Q2-CIO'




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.24_CIOQ320.sql




IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='BOD' and COLUMN_NAME='DateArchived')
BEGIN
	ALTER TABLE BOD
	ADD DateArchived Datetime NULL
END
GO


-- CS-7379 clean up any old CIO data.  I'm getting the list of unused orgsubs from fsma_SCM, a CIO related table
-------------------------------------------------------------------------------*/

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='BOD' AND COLUMN_NAME='UserId'
  )
BEGIN
	ALTER TABLE BOD
	ADD UserId INT DEFAULT NULL
END
--//
IF NOT EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[fsma_AnswersBACKUP0520]'))
BEGIN
DELETE FROM AuditLog
WHERE Change_Date < '2017-01-01 00:00:00.000'


IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='fsma_Milestones' AND COLUMN_NAME='Comments')
BEGIN
	ALTER TABLE fsma_Milestones ADD [Comments] NVARCHAR(4000)
END 



EXEC cq_DeleteQueryAndClearRefs 'cq_UsersAndRoles'




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.26_BOD1802_A_2020_2.sql

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='AgencyRank'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD AgencyRank INT
END
GO



IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='Tier'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD Tier INT
END
GO

IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='IsArchived'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD IsArchived BIT DEFAULT(0)
END
GO

IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='DateArchived'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD DateArchived DATETIME
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='LastAssessedRVA'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD LastAssessedRVA DATETIME
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='LastAssessedSAR'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD LastAssessedSAR DATETIME	
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_HVAs'
  AND COLUMN_NAME='UserID'
  )
BEGIN
	ALTER TABLE fsma_HVAs
	ADD UserID INT	
END
GO

---*** Activity Status ***--




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.26_CIO_Q4_2020_1.sql

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_Contacts'
  AND COLUMN_NAME='DateVerified'
  )
BEGIN
	ALTER TABLE fsma_Contacts
	ADD DateVerified DATETIME NULL
END
GO



IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_Contacts'
  AND COLUMN_NAME='PK_CSAMusers_VerifiedBy'
  )
BEGIN
	ALTER TABLE fsma_Contacts
	ADD [PK_CSAMusers_VerifiedBy] INT NULL
END
GO



 IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isCIO'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isCIO BIT NULL
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isSOC'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isSOC BIT NULL
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isBOD1902'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isBOD1902 BIT NULL
END
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isBOD1802HVA'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isBOD1802HVA BIT NULL
END
GO

 IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]

 IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isSAOP'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isSAOP BIT NULL
END
GO

UPDATE fsma_ContactTitles




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.29_CIO_Q1_2021.sql

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isBOD1802POAM'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isBOD1802POAM BIT NULL
END
GO

-- should be the same for both, for now




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.30_EINSTEIN.sql





--//CS-7832
ALTER TABLE dbo.RMAGovtWide
ALTER COLUMN GovernmentWide NVARCHAR(20) NULL

ALTER TABLE dbo.RMAGovtWide
ALTER COLUMN GovernmentWide NVARCHAR(20) NULL
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='RMAGovtWide' and COLUMN_NAME='Result')


--//CS-7832
ALTER TABLE dbo.RMAGovtWide
ALTER COLUMN GovernmentWide NVARCHAR(20) NULL

ALTER TABLE dbo.RMAGovtWide
ALTER COLUMN GovernmentWide NVARCHAR(20) NULL
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='RMAGovtWide' and COLUMN_NAME='Result')
BEGIN
	ALTER TABLE RMAGovtWide
	ADD Result VARCHAR(20)
ALTER COLUMN GovernmentWide NVARCHAR(20) NULL

ALTER TABLE dbo.RMAGovtWide
ALTER COLUMN GovernmentWide NVARCHAR(20) NULL
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='RMAGovtWide' and COLUMN_NAME='Result')
BEGIN
	ALTER TABLE RMAGovtWide
	ADD Result VARCHAR(20)
END
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='RMAGovtWide' and COLUMN_NAME='Rating')
BEGIN
	ALTER TABLE RMAGovtWide
BEGIN
	ALTER TABLE RMAGovtWide
	ADD Result VARCHAR(20)
END
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='RMAGovtWide' and COLUMN_NAME='Rating')
BEGIN
	ALTER TABLE RMAGovtWide
	ADD Rating INT
END
GO
UPDATE fsma_Questions SET FK_QuestionType = 2
WHERE PK_Question = 21523 AND identifier_text = '2.5.5'




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.30_POAM.sql
GO

-- FOREGIN KEY FK_PK_Assessment 
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_NAME='fsma_POAMS' AND COLUMN_NAME='FK_PK_Assessment')
BEGIN
	ALTER TABLE fsma_POAMS ADD FK_PK_Assessment INT-- Assessment -> POAMs   
END 
IF (SELECT MAX(PK_PickListType) FROM PickListTypes WHERE UsageField = 'ASSMTSTAT') IS NULL
BEGIN 
	INSERT INTO PickListTypes(PK_PickListType, Description, UsageTable, UsageField)
	SELECT 184, 'ASSMTSTAT', NULL, 'ASSMTSTAT' 
GO


-- create new column to store Assessment to Artifact relationship
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' AND column_name=N'PK_Assessment')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	ADD PK_Assessment INT NULL 
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.34_BOD_2021.sql
	INSERT INTO ArtifactTypes (PK_ArtifactType, ArtifactTypeDescription, [Required], FK_SubmissionPackage, RequiredMIC)
	VALUES(39, 'ICS Network Architecture', 0, 1, 0) -- 14 ICS Network Architecture
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_HVAs' and COLUMN_NAME='DeactivateNotes')
BEGIN
	ALTER TABLE fsma_HVAs ADD DeactivateNotes NVARCHAR(4000) NULL
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='HVAIn' and COLUMN_NAME='TransRec')
BEGIN
	ALTER TABLE HVAIn ADD TransRec NVARCHAR(25) NULL
BEGIN
	ALTER TABLE fsma_HVAs ADD DeactivateNotes NVARCHAR(4000) NULL
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='HVAIn' and COLUMN_NAME='TransRec')
BEGIN
	ALTER TABLE HVAIn ADD TransRec NVARCHAR(25) NULL
END
GO 
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='HVAOut' and COLUMN_NAME='TransRec')
BEGIN
	ALTER TABLE HVAOut ADD TransRec NVARCHAR(25) NULL
BEGIN
	ALTER TABLE HVAIn ADD TransRec NVARCHAR(25) NULL
END
GO 
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='HVAOut' and COLUMN_NAME='TransRec')
BEGIN
	ALTER TABLE HVAOut ADD TransRec NVARCHAR(25) NULL
END
GO 







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.35_CIO_Q3_2021.sql

	GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='AdminResolved')
BEGIN
	ALTER TABLE fsma_POAMS ADD AdminResolved BIT DEFAULT 0
END
GO



GO



IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='ResolvedAdminID')
BEGIN
	ALTER TABLE fsma_POAMS ADD ResolvedAdminID INT NULL
END
GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='AdminResolvedDate')
END
GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='AdminResolvedDate')
BEGIN
	ALTER TABLE fsma_POAMS ADD AdminResolvedDate Datetime NULL
END
GO

UPDATE fsma_POAMS SET AdminResolved = 0 WHERE AdminResolved IS NULL AND AdminResolved <> 1
GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.36_CIO_Q4_2021.sql

	EXEC cq_DeleteQueryAndClearRefs 'cq_AppendixD'
	GO
	
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='df_CPE_GroupValues' and COLUMN_NAME='IsAuditPercentActive')
BEGIN
	ALTER TABLE df_CPE_GroupValues ADD IsAuditPercentActive INT NULL
END
GO







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.39_CIO_Q1_2022.sql
END

GO

IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_CloudServices' AND COLUMN_NAME = 'ATOOnFile' )
	BEGIN
		ALTER TABLE TIC_CloudServices ADD ATOOnFile VARCHAR(10) NULL; 
	END
GO

IF (NOT EXISTS (SELECT * FROM fsma_QuestionTypes WHERE PK_QuestionTypeId in (84)))
BEGIN  
	(27435, 27432, 'Y')--10.6.3, 10.6

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_Questions' AND COLUMN_NAME = 'IsEOMetric' )
BEGIN
	ALTER TABLE fsma_Questions ADD IsEOMetric BIT NULL; 
END 

GO 
 
UPDATE Q  SET IsEOMetric=NULL FROM fsma_Questions Q 




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.43_BOD_2022.sql
SET IDENTITY_INSERT [dbo].[fsma_Questions] OFF 
GO
 
--HVAIn2
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAIn' AND COLUMN_NAME = 'DACompName' )
	BEGIN
		ALTER TABLE HVAIn ADD DACompName NVARCHAR(255) NULL; 
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAIn' AND COLUMN_NAME = 'HasISAMOU' )
	BEGIN
		ALTER TABLE HVAIn ADD HasISAMOU NVARCHAR(5) NULL; 
	BEGIN
		ALTER TABLE HVAIn ADD DACompName NVARCHAR(255) NULL; 
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAIn' AND COLUMN_NAME = 'HasISAMOU' )
	BEGIN
		ALTER TABLE HVAIn ADD HasISAMOU NVARCHAR(5) NULL; 
	END
GO
--HVAOut
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAOut' AND COLUMN_NAME = 'OwnerOrg' )
	BEGIN
		ALTER TABLE HVAIn ADD HasISAMOU NVARCHAR(5) NULL; 
	END
GO
--HVAOut
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAOut' AND COLUMN_NAME = 'OwnerOrg' )
	BEGIN
		ALTER TABLE HVAOut ADD OwnerOrg NVARCHAR(1255) NULL; 
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAOut' AND COLUMN_NAME = 'OrgType' )
	BEGIN
		ALTER TABLE HVAOut ADD OrgType NVARCHAR(255) NULL; 
	BEGIN
		ALTER TABLE HVAOut ADD OwnerOrg NVARCHAR(1255) NULL; 
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAOut' AND COLUMN_NAME = 'OrgType' )
	BEGIN
		ALTER TABLE HVAOut ADD OrgType NVARCHAR(255) NULL; 
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAOut' AND COLUMN_NAME = 'HasISAMOU' )
	BEGIN
		ALTER TABLE HVAOut ADD HasISAMOU NVARCHAR(5) NULL; 
	BEGIN
		ALTER TABLE HVAOut ADD OrgType NVARCHAR(255) NULL; 
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HVAOut' AND COLUMN_NAME = 'HasISAMOU' )
	BEGIN
		ALTER TABLE HVAOut ADD HasISAMOU NVARCHAR(5) NULL; 
	END
GO
 
DECLARE @PKT INT 
SET @PKT=354

/*------------------------------------------------------------------------------
add columns to cq_ParmsMaster so that we can programmatically associate saved parameter values to a property
------------------------------------------------------------------------------*/
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue1')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue1 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue2')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue1 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue2')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue2 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue3')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue2 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue3')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue3 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue4')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue3 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue4')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue4 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue5')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue4 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue5')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue5 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue6')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue5 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue6')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue6 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue7')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue6 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue7')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue7 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue8')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue7 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_ParmsMaster' AND Column_Name = 'ParmValue8')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue8 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND Column_Name = 'ParmValue7')
BEGIN
	ALTER TABLE cq_ParmsMaster
	ADD ParmValue8 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND Column_Name = 'ParmValue7')
BEGIN
	ALTER TABLE cq_PersonalQueryParms
	ADD ParmValue7 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND Column_Name = 'ParmValue8')
BEGIN
	ALTER TABLE cq_PersonalQueryParms
	ADD ParmValue7 NVARCHAR(250) NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND Column_Name = 'ParmValue8')
BEGIN
	ALTER TABLE cq_PersonalQueryParms
	ADD ParmValue8 NVARCHAR(250) NULL
END


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND Column_Name = 'ParameterSavedDate')
	ADD ParmValue8 NVARCHAR(250) NULL
END


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND Column_Name = 'ParameterSavedDate')
BEGIN
	ALTER TABLE cq_PersonalQueryParms
    ADD ParameterSavedDate DATE NOT NULL DEFAULT (GETDATE());
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.50_CIO_Q1_2023 UTF NEW.sql

 ---- **** ENDS 2023-Q1-CIO ****-----


IF NOT Exists(select * from sys.columns where Name = N'FedRAMPPackageID' and Object_ID = Object_ID(N'TIC_CloudServices'))  
BEGIN
    ALTER TABLE TIC_CloudServices
    ADD FedRAMPPackageID VARCHAR(1200) NULL
END




/*--------------------------------
add answer3 column to fsma_Answers
--------------------------------*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Answers' and Column_name=N'Answer3')
BEGIN
	ALTER TABLE [fsma_Answers] ADD [Answer3] NVARCHAR(MAX) NULL
END








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update7.50_CIO_Q1_2023.sql

 ---- **** ENDS 2023-Q1-CIO ****-----


IF NOT Exists(select * from sys.columns where Name = N'FedRAMPPackageID' and Object_ID = Object_ID(N'TIC_CloudServices'))  
BEGIN
    ALTER TABLE TIC_CloudServices
    ADD FedRAMPPackageID VARCHAR(1200) NULL
END

SELECT TOP 1 * FROM fsma_Answers 





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.0.4.sql


/*----------------------------------------------------*/
/*	Modify other questions/headers					 */
/*----------------------------------------------------*/

ALTER TABLE fsma_Questions
ALTER COLUMN identifier_text nvarchar(10)

UPDATE fsma_Questions 
SET QuestionText = 'DELETED QUESTION'
WHERE FK_QuestionGroup IN (71,72)

update fsma_formpages set ASPX='FismaForms/SAOP_Q3_1.aspx' where FK_Form = '2010-Q3-SAOP'
update fsma_formmaster SET InternalForm='FismaForms/SAOP_Q3_1.aspx', Form_Description='2010 SAOP Q3 Quarterly' where PK_Form = '2010-Q3-SAOP'

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_Questions' AND Column_Name = 'FK_QuestionTypeMaster')
BEGIN
	ALTER TABLE fsma_Questions
	ADD FK_QuestionTypeMaster INT NULL
END


/*-------------------------------------------------*/

/*-------------------------------------------------*/
/*	Add a new column for new Q3 Inventory question  */
/*-------------------------------------------------*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCATotals' and Column_name=N'Q3_AutomaticMonitoring')
	BEGIN
		ALTER TABLE [fsma_InventoryCATotals] Add [Q3_AutomaticMonitoring] [int] NULL
	END
GO

/*-------------------------------------------------*/
/*	Micro form not updated quarterly   */




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.0.5.sql

/*-------------------------------------------------*/
/*	add help_text column to fsma_Questions  */
/*-------------------------------------------------*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Questions' and Column_name=N'help_text')
	BEGIN
		ALTER TABLE [fsma_Questions] ADD help_text nvarchar(MAX) NULL
	END
 
-- clear out stub records for inactive bureaus
DECLARE @PK_OrgSubmission INT
DECLARE  @PK_Component_Bureau INT




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.0.7.sql

/*-------------------------------------------------*/
/*	add CrystalReportForm column to fsma_FormMaster */
/*-------------------------------------------------*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_FormMaster' and Column_name=N'CrystalReportForm')
	BEGIN
		ALTER TABLE [fsma_FormMaster] ADD CrystalReportForm NVARCHAR(100) NULL
	END

UPDATE f1
SET f1.[Description] = '1. ' + RTRIM(LTRIM(RIGHT(f1.Description, LEN(f1.Description) - 11)))
FROM [frmVal_Errors] f1




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.1.2.sql
	/* sortpos - int */ 19,
	/* reportable - bit */ 0,
	'',
	/* FK_InputType - int */ 0)		
	
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'fsma_QuestionTypes' AND column_name='FK_QuestionEntryType')
ALTER TABLE dbo.fsma_QuestionTypes ADD
	FK_QuestionEntryType int NOT NULL CONSTRAINT DF_fsma_QuestionTypes_FK_QuestionEntryType DEFAULT 1
GO
-- dual entry answers
UPDATE fsma_QuestionTypes SET FK_QuestionEntryType = 2
WHERE PK_QuestionTypeId IN (3,23,24)




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.1.3.sql
UPDATE fsma_Questions SET identifier_text='9a(1)' WHERE PK_Question = 698

IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('ArtifactTypes') AND name = 'FK_SubmissionPackage' )  
BEGIN
	/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

	ALTER TABLE dbo.ArtifactTypes
		DROP CONSTRAINT DF_ArtifactTypes_Required
	
	ALTER TABLE dbo.ArtifactTypes
		DROP CONSTRAINT DF_ArtifactTypes_SubmissionPackage
	
BEGIN
	/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/

	ALTER TABLE dbo.ArtifactTypes
		DROP CONSTRAINT DF_ArtifactTypes_Required
	
	ALTER TABLE dbo.ArtifactTypes
		DROP CONSTRAINT DF_ArtifactTypes_SubmissionPackage
	
	CREATE TABLE dbo.Tmp_ArtifactTypes
		(
		PK_ArtifactType int NOT NULL,
		Required bit NOT NULL,
		FK_SubmissionPackage int NOT NULL,
		RequiredMIC bit NULL
		)  ON [PRIMARY]
		 TEXTIMAGE_ON [PRIMARY]

	ALTER TABLE dbo.Tmp_ArtifactTypes ADD CONSTRAINT
		DF_ArtifactTypes_Required DEFAULT ((0)) FOR Required
	
	ALTER TABLE dbo.Tmp_ArtifactTypes ADD CONSTRAINT
		DF_ArtifactTypes_SubmissionPackage DEFAULT ((0)) FOR FK_SubmissionPackage
	
		)  ON [PRIMARY]
		 TEXTIMAGE_ON [PRIMARY]

	ALTER TABLE dbo.Tmp_ArtifactTypes ADD CONSTRAINT
		DF_ArtifactTypes_Required DEFAULT ((0)) FOR Required
	
	ALTER TABLE dbo.Tmp_ArtifactTypes ADD CONSTRAINT
		DF_ArtifactTypes_SubmissionPackage DEFAULT ((0)) FOR FK_SubmissionPackage
	
	IF EXISTS(SELECT * FROM dbo.ArtifactTypes)
		 EXEC('INSERT INTO dbo.Tmp_ArtifactTypes (PK_ArtifactType, ArtifactTypeDescription, Required, RequiredMIC, FK_SubmissionPackage)
			SELECT PK_ArtifactType, CONVERT(nvarchar(MAX), ArtifactTypeDescription), Required, RequiredMIC, 1 FROM dbo.ArtifactTypes WITH (HOLDLOCK TABLOCKX)')
			SELECT PK_ArtifactType, CONVERT(nvarchar(MAX), ArtifactTypeDescription), Required, RequiredMIC, 1 FROM dbo.ArtifactTypes WITH (HOLDLOCK TABLOCKX)')
	
	DROP TABLE dbo.ArtifactTypes
	
	EXECUTE sp_rename N'dbo.Tmp_ArtifactTypes', N'ArtifactTypes', 'OBJECT' 
	
	ALTER TABLE dbo.ArtifactTypes ADD CONSTRAINT
		PK_ArtifactTypes PRIMARY KEY CLUSTERED 
		(
		PK_ArtifactType
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.1.4.sql
	SET IDENTITY_INSERT dbo.Tmp_fsma_NarrAnswers OFF
	
	DROP TABLE dbo.fsma_NarrAnswers
	
	EXECUTE sp_rename N'dbo.Tmp_fsma_NarrAnswers', N'fsma_NarrAnswers', 'OBJECT' 
	
	ALTER TABLE dbo.fsma_NarrAnswers ADD CONSTRAINT
		PK_fsma_NarrAnswers PRIMARY KEY CLUSTERED 
		(
		PK_NarrAnswers
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.2.sql
	SET IDENTITY_INSERT dbo.Tmp_fsma_NarrAnswers OFF
	
	DROP TABLE dbo.fsma_NarrAnswers
	
	EXECUTE sp_rename N'dbo.Tmp_fsma_NarrAnswers', N'fsma_NarrAnswers', 'OBJECT' 
	
	ALTER TABLE dbo.fsma_NarrAnswers ADD CONSTRAINT
		PK_fsma_NarrAnswers PRIMARY KEY CLUSTERED 
		(
		PK_NarrAnswers
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.3.sql


--dashlet tables and architecture

/****** Object:  ForeignKey [FK_dsh_Catalog_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] DROP CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] DROP CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
/****** Object:  Table [dbo].[dsh_Catalog_DisplayTypes]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
/****** Object:  Table [dbo].[dsh_Catalog_DisplayTypes]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] DROP CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_DisplayTypes]
GO
/****** Object:  Table [dbo].[dsh_Catalog_SubjectMatters]    Script Date: 02/16/2011 14:29:58 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_DisplayTypes]
GO
/****** Object:  Table [dbo].[dsh_Catalog_SubjectMatters]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] DROP CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_SubjectMatters]
GO
/****** Object:  Table [dbo].[dsh_DashletLayout_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog_SubjectMatters]
GO
/****** Object:  Table [dbo].[dsh_DashletLayout_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]') AND type in (N'U'))
GO
/****** Object:  Table [dbo].[dsh_DashletLayout_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] DROP CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayout_Dashlets]
GO
/****** Object:  Table [dbo].[dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayout_Dashlets]
GO
/****** Object:  Table [dbo].[dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_sort_order]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_sort_order]
END
/****** Object:  Table [dbo].[dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_sort_order]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_sort_order]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_FK_DashletLayoutType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_FK_DashletLayoutType]
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_sort_order]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_DashletLayouts_FK_DashletLayoutType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_DashletLayouts] DROP CONSTRAINT [DF_dsh_DashletLayouts_FK_DashletLayoutType]
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayouts]
GO
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_DashletLayouts]
GO
/****** Object:  Table [dbo].[dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] DROP CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog]
GO
/****** Object:  Table [dbo].[dsh_Dashlets]    Script Date: 02/16/2011 14:29:59 ******/
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Catalog]
GO
/****** Object:  Table [dbo].[dsh_Dashlets]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_keys]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_keys]
END
/****** Object:  Table [dbo].[dsh_Dashlets]    Script Date: 02/16/2011 14:29:59 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_keys]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_keys]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_values]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_values]
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_keys]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_dsh_Dashlets_state_values]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[dsh_Dashlets] DROP CONSTRAINT [DF_dsh_Dashlets_state_values]
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Dashlets]
GO
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Dashlets]
GO
/****** Object:  Table [dbo].[dsh_Dashlet_Perms]    Script Date: 02/16/2011 14:29:58 ******/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] DROP CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]') AND type in (N'U'))
DROP TABLE [dbo].[dsh_Dashlet_Perms]
GO
/****** Object:  Table [dbo].[dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] CHECK CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog]'))
ALTER TABLE [dbo].[dsh_Catalog] CHECK CONSTRAINT [FK_dsh_Catalog_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] CHECK CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_DisplayTypes_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_DisplayTypes]'))
ALTER TABLE [dbo].[dsh_Catalog_DisplayTypes] CHECK CONSTRAINT [FK_dsh_Catalog_DisplayTypes_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog] FOREIGN KEY([FK_DashletCatalog])
REFERENCES [dbo].[dsh_Catalog] ([PK_DashletCatalog])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] CHECK CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Catalog_SubjectMatters_dsh_Catalog]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Catalog_SubjectMatters]'))
ALTER TABLE [dbo].[dsh_Catalog_SubjectMatters] CHECK CONSTRAINT [FK_dsh_Catalog_SubjectMatters_dsh_Catalog]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] CHECK CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts] FOREIGN KEY([FK_DashletLayout])
REFERENCES [dbo].[dsh_DashletLayouts] ([PK_DashletLayout])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlet_Perms]'))
ALTER TABLE [dbo].[dsh_Dashlet_Perms] CHECK CONSTRAINT [FK_dsh_Dashlet_Perms_dsh_Dashlet_ASCXs]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts] FOREIGN KEY([FK_DashletLayout])
REFERENCES [dbo].[dsh_DashletLayouts] ([PK_DashletLayout])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts] FOREIGN KEY([FK_DashletLayout])
REFERENCES [dbo].[dsh_DashletLayouts] ([PK_DashletLayout])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets] FOREIGN KEY([FK_Dashlet])
REFERENCES [dbo].[dsh_Dashlets] ([PK_Dashlet])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_DashletLayouts]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets] FOREIGN KEY([FK_Dashlet])
REFERENCES [dbo].[dsh_Dashlets] ([PK_Dashlet])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets] FOREIGN KEY([FK_Dashlet])
REFERENCES [dbo].[dsh_Dashlets] ([PK_Dashlet])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages] FOREIGN KEY([FK_DashletPage])
REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayout_Dashlets]'))
ALTER TABLE [dbo].[dsh_DashletLayout_Dashlets] CHECK CONSTRAINT [FK_dsh_DashletLayout_Dashlets_dsh_Dashlets]
GO
/****** Object:  ForeignKey [FK_dsh_DashletLayouts_dsh_DashletPages]    Script Date: 02/16/2011 14:29:58 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages] FOREIGN KEY([FK_DashletPage])
REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts]  WITH CHECK ADD  CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages] FOREIGN KEY([FK_DashletPage])
REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] CHECK CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_DashletLayouts_dsh_DashletPages]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_DashletLayouts]'))
ALTER TABLE [dbo].[dsh_DashletLayouts] CHECK CONSTRAINT [FK_dsh_DashletLayouts_dsh_DashletPages]
GO
/****** Object:  ForeignKey [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]    Script Date: 02/16/2011 14:29:59 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets]  WITH CHECK ADD  CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs] FOREIGN KEY([FK_Dashlet_ASCX])
REFERENCES [dbo].[dsh_Dashlet_ASCXs] ([PK_Dashlet_ASCX])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_dsh_Dashlets_dsh_Dashlet_ASCXs]') AND parent_object_id = OBJECT_ID(N'[dbo].[dsh_Dashlets]'))
ALTER TABLE [dbo].[dsh_Dashlets] CHECK CONSTRAINT [FK_dsh_Dashlets_dsh_Dashlet_ASCXs]
GO

DECLARE @PermPK AS INT
DECLARE @PK AS INT





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.4.1.sql
    INNER JOIN fsma_QuestionGroups QG ON Q.FK_QuestionGroup = QG.PK_QuestionGroup
    INNER JOIN fsma_FormPages P ON QG.FK_FormPage = P.PK_FormPage
    WHERE (FK_Form = '2011-A-SAOP' OR FK_Form = '2011-A-IG' OR FK_Form = '2011-A-CIO' OR FK_Form = '2011-A-MICRO') AND FK_QuestionType = 3) subToChange
ON Q.PK_Question = subToChange.PK_Question    


ALTER TABLE AuditLog ALTER COLUMN FieldName NVARCHAR(MAX)

ALTER TABLE AuditLog ALTER COLUMN [Change_Date] DATETIME


---Insert New Question Type for the Q3 Reporting CIO Cycle
    WHERE (FK_Form = '2011-A-SAOP' OR FK_Form = '2011-A-IG' OR FK_Form = '2011-A-CIO' OR FK_Form = '2011-A-MICRO') AND FK_QuestionType = 3) subToChange
ON Q.PK_Question = subToChange.PK_Question    


ALTER TABLE AuditLog ALTER COLUMN FieldName NVARCHAR(MAX)

ALTER TABLE AuditLog ALTER COLUMN [Change_Date] DATETIME


---Insert New Question Type for the Q3 Reporting CIO Cycle
---Insert new question type for the investment grid 
IF NOT EXISTS(SELECT * FROM fsma_QuestionTypes WHERE description='Cybersecurity training by bureau grid')
END


if NOT Exists(select * from sys.columns where Name = N'SprocValidation' and Object_ID = Object_ID(N'fsma_QuestionTypes')) 
BEGIN

	ALTER TABLE fsma_QuestionTypes
	ADD SprocValidation NVARCHAR(MAX)

END






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.4.2.sql
SET FK_FormType = 1, AnswerTable = 'fsma_Investments', PK_Org_Column = 'PK_OrgSubmission', PK_Comp_Column = 'Bureau'
WHERE fsma_QuestionTypes.AnswerTable = 'fsma_Investments'	

--Add two new fields to Dashlet Catalog
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dsh_Catalog' AND COLUMN_NAME = 'Version')
BEGIN
	ALTER TABLE dbo.dsh_Catalog ADD
		Version nvarchar(20),
		LastUpdate smalldatetime
END
GO

END
GO

--Add two new params field to the personal query for many params like dashlet params cq
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_PersonalQueryParms' AND COLUMN_NAME = 'ParmValue3')
BEGIN
	ALTER TABLE dbo.cq_PersonalQueryParms ADD
		ParmValue3 NVARCHAR(50) NULL,
		ParmValue4 NVARCHAR(50) NULL
END
GO

END
GO

--Add two new params field to the personal query for many params like dashlet params cq
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dsh_Dashlets' AND COLUMN_NAME = 'PK_cq_PersonalQuery')
BEGIN
	ALTER TABLE dbo.dsh_Dashlets ADD
		PK_cq_PersonalQuery INT NULL
END
GO





--Add two new fields to Dashlet Catalog
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dsh_Catalog' AND COLUMN_NAME = 'Version')
BEGIN
	ALTER TABLE dbo.dsh_Catalog ADD
		Version nvarchar(20),
		LastUpdate smalldatetime
END
GO

END
GO

-- Add Active column to dsh_Catalog
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dsh_Catalog' AND COLUMN_NAME = 'Active')
BEGIN
	ALTER TABLE dbo.dsh_Catalog ADD
		Active BIT NULL
END
GO

-- Add Active column to dsh_Catalog
END
GO

-- Add Active column to dsh_Catalog
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dsh_Catalog' AND COLUMN_NAME = 'HTMLadditionalContent')
BEGIN
	ALTER TABLE dbo.dsh_Catalog ADD
		HTMLadditionalContent nvarchar(MAX) NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' )
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


ALTER TABLE df_NIST_CVE_Software 
ALTER COLUMN [Software_CPE] nvarchar(255)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_name nvarchar(MAX)


ALTER TABLE df_NIST_CVE_Software 
ALTER COLUMN [Software_CPE] nvarchar(255)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_name nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_version nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_name nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_version nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_profile nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_version nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_profile nvarchar(MAX)
GO

ALTER TABLE df_DataFeedUpload 
ALTER COLUMN ScanTool_CPE nvarchar(MAX)
GO

ALTER TABLE df_ScanTypeDetail 
ALTER COLUMN checklist_profile nvarchar(MAX)
GO

ALTER TABLE df_DataFeedUpload 
ALTER COLUMN ScanTool_CPE nvarchar(MAX)
GO

ALTER TABLE df_CCEscanResults
ALTER COLUMN PK_SCAP_CCE nvarchar(100)
GO

ALTER TABLE df_DataFeedUpload 
ALTER COLUMN ScanTool_CPE nvarchar(MAX)
GO

ALTER TABLE df_CCEscanResults
ALTER COLUMN PK_SCAP_CCE nvarchar(100)
GO







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.4.sql




IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_fsma_Questions_PK_QuestionTypeId]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[fsma_Questions] DROP CONSTRAINT [DF_fsma_Questions_PK_QuestionTypeId]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[FK_fsma_Questions_fsma_QuestionTypes_PickListTypes]') AND type = 'F')
BEGIN
ALTER TABLE [dbo].[fsma_Questions] DROP CONSTRAINT [DF_fsma_Questions_PK_QuestionTypeId]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[FK_fsma_Questions_fsma_QuestionTypes_PickListTypes]') AND type = 'F')
BEGIN
ALTER TABLE dbo.fsma_Questions
	DROP CONSTRAINT FK_fsma_Questions_fsma_QuestionTypes_PickListTypes
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'FK_fsma_QuestionTypes_PickListTypes_PickListTypes') AND type = 'F')
	DROP CONSTRAINT FK_fsma_Questions_fsma_QuestionTypes_PickListTypes
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'FK_fsma_QuestionTypes_PickListTypes_PickListTypes') AND type = 'F')
BEGIN
ALTER TABLE dbo.fsma_QuestionTypes_PickListTypes
	DROP CONSTRAINT FK_fsma_QuestionTypes_PickListTypes_PickListTypes
END
GO

IF NOT EXISTS(SELECT * FROM fsma_QuestionGroups qg WHERE qg.PK_Form = '2011-A-IG')
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (35, N'Technology', NULL, N'INTERVALS', NULL)
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (36, N'Time Invervals', NULL, N'INTERVALS', NULL)
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (37, N'Time Intervals wQ', NULL, N'INTERVALS1', NULL)
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (38, N'IT Security', NULL, N'ITSEC', NULL)
END

ALTER TABLE fsma_Questions ALTER COLUMN identifier_text NVARCHAR(50) NULL

IF NOT Exists(select * from sys.columns where Name = N'SystemsSSAU' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsSSAU  INT NULL
END

ALTER TABLE fsma_Questions ALTER COLUMN identifier_text NVARCHAR(50) NULL

IF NOT Exists(select * from sys.columns where Name = N'SystemsSSAU' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsSSAU  INT NULL
END

IF NOT Exists(select * from sys.columns where Name = N'SystemsCloudPub' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsSSAU  INT NULL
END

IF NOT Exists(select * from sys.columns where Name = N'SystemsCloudPub' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsCloudPub  INT NULL
END

IF NOT Exists(select * from sys.columns where Name = N'FK_PickListType' and Object_ID = Object_ID(N'fsma_Questions'))  
BEGIN
    @newname = 'FK_PickListType',
    @objtype = 'COLUMN' 
    
END
GO

ALTER TABLE PickLists ALTER COLUMN DisplayValue NVARCHAR(MAX)

IF NOT Exists(select * from sys.columns where Name = N'FK_PickList' and Object_ID = Object_ID(N'fsma_Questions'))  
BEGIN
    ALTER TABLE fsma_Questions
    ADD FK_PickList  INT NULL
GO

ALTER TABLE PickLists ALTER COLUMN DisplayValue NVARCHAR(MAX)

IF NOT Exists(select * from sys.columns where Name = N'FK_PickList' and Object_ID = Object_ID(N'fsma_Questions'))  
BEGIN
    ALTER TABLE fsma_Questions
    ADD FK_PickList  INT NULL
  
END
GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.5.sql



--Add column to specify number of days before 
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'df_DeleteLimit')
BEGIN
	ALTER TABLE [Component List]
	ADD df_DeleteLimit INT NULL DEFAULT -1
END
GO

IF NOT EXISTS(SELECT * FROM fsma_ReportingCycles WHERE Description='FISMA Quarterly 2012 Q2')




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.1.sql




IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_SPtoParms' AND COLUMN_NAME = 'AllOption')
BEGIN
	ALTER TABLE cq_SPtoParms
	ADD AllOption bit DEFAULT(1)
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_SPtoParms' AND COLUMN_NAME = 'RequiredAnswer')
BEGIN
	ALTER TABLE cq_SPtoParms
	ADD AllOption bit DEFAULT(1)
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_SPtoParms' AND COLUMN_NAME = 'RequiredAnswer')
BEGIN
	ALTER TABLE cq_SPtoParms
	ADD RequiredAnswer bit DEFAULT(1)
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.2.sql




IF col_length('AuditLog-UserAccounts','IsOmb') IS NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] ADD IsOmb BIT
END 

IF col_length('AuditLog-UserAccounts','PortalAuthPK') IS NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] ADD PortalAuthPK NVARCHAR(100)
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] ADD IsOmb BIT
END 

IF col_length('AuditLog-UserAccounts','PortalAuthPK') IS NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] ADD PortalAuthPK NVARCHAR(100)
END 

IF col_length('AuditLog-UserAccounts','UserID1') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN UserID1
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] ADD PortalAuthPK NVARCHAR(100)
END 

IF col_length('AuditLog-UserAccounts','UserID1') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN UserID1
END 

IF col_length('AuditLog-UserAccounts','FirstName') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN FirstName
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN UserID1
END 

IF col_length('AuditLog-UserAccounts','FirstName') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN FirstName
END

IF col_length('AuditLog-UserAccounts','LastName') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN LastName
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN FirstName
END

IF col_length('AuditLog-UserAccounts','LastName') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN LastName
END

IF col_length('AuditLog-UserAccounts','Expr5') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN Expr5
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN LastName
END

IF col_length('AuditLog-UserAccounts','Expr5') IS NOT NULL
BEGIN
	ALTER TABLE [AuditLog-UserAccounts] DROP COLUMN Expr5
END








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.3.1.3.sql

if not exists (select column_name from INFORMATION_SCHEMA.columns where table_name = 'cq_PersonalQueryParms' and column_name = 'ParmValue6') 
  alter table cq_PersonalQueryParms add ParmValue6  [nvarchar](50) NULL 

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_SPtoParms' AND COLUMN_NAME = 'PK_PickListType')
BEGIN
	ALTER TABLE cq_SPtoParms ADD PK_PickListType INT
END








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.3.sql
	SELECT 'DEC', 'decimal', 1, 2, NULL, NULL, NULL
END


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_InventoryCAtotals' AND Column_Name = 'SystemsCSP')
BEGIN
	ALTER TABLE fsma_InventoryCAtotals
	ADD SystemsCSP INT NULL
END

DELETE FROM fsma_OrgSubmissions where PK_Form LIKE '2012-A-%'
DELETE FROM fsma_ReportingCycle_Components  WHERE FK_ReportingCycle = 9




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.4.sql




IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_SPtoParms' AND COLUMN_NAME = 'PK_PickListType')
BEGIN
	ALTER TABLE cq_SPtoParms ADD PK_PickListType INT
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'part')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details ADD 
BEGIN
	ALTER TABLE cq_SPtoParms ADD PK_PickListType INT
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'part')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details ADD 
			Part NVARCHAR(100),
			Vendor NVARCHAR(100),
			Product NVARCHAR(100),
			Version NVARCHAR(100) 
	END
			Product NVARCHAR(100),
			Version NVARCHAR(100) 
	END
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'IsScanVendor')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details ADD 
			IsScanVendor bit,
			IsValScanVendor bit,
			HasSubmission bit,
			HasValSubmission bit 
	END	
DELETE FROM cq_SPtoParms  WHERE PK_cq_ParmsMaster > 61	
DELETE FROM cq_ParmsMaster WHERE PK_cq_ParmsMaster > 61
DBCC CHECKIDENT (cq_ParmsMaster, reseed, 61)

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'df_DataFeedUpload' AND Column_Name = 'IsLast')
BEGIN
	ALTER TABLE df_DataFeedUpload
	ADD IsLast bit
END

DELETE FROM [cq_spTOParms] WHERE ParmName= 'CceDumpSort' OR ParmName= 'CvssDumpSort' 





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.5.sql




IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_SPtoParms' AND COLUMN_NAME = 'PK_PickListType')
BEGIN
	ALTER TABLE cq_SPtoParms ADD PK_PickListType INT
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'part')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details ADD 
BEGIN
	ALTER TABLE cq_SPtoParms ADD PK_PickListType INT
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'part')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details ADD 
			Part NVARCHAR(100),
			Vendor NVARCHAR(100),
			Product NVARCHAR(100),
			Version NVARCHAR(100) 
	END
			Product NVARCHAR(100),
			Version NVARCHAR(100) 
	END
	
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'IsScanVendor')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details ADD 
			IsScanVendor bit,
			IsValScanVendor bit,
			HasSubmission bit,
			HasValSubmission bit 
	END	
DELETE FROM cq_SPtoParms  WHERE PK_cq_ParmsMaster > 61	
DELETE FROM cq_ParmsMaster WHERE PK_cq_ParmsMaster > 61
DBCC CHECKIDENT (cq_ParmsMaster, reseed, 61)

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'df_DataFeedUpload' AND Column_Name = 'IsLast')
BEGIN
	ALTER TABLE df_DataFeedUpload
	ADD IsLast bit
END

DELETE FROM [cq_spTOParms] WHERE ParmName= 'CceDumpSort' OR ParmName= 'CvssDumpSort' 

  alter table cq_PersonalQueryParms add ParmValue5  [nvarchar](50) NULL 

if not exists (select column_name from INFORMATION_SCHEMA.columns where table_name = 'cq_PersonalQueryParms' and column_name = 'ParmValue6') 
  alter table cq_PersonalQueryParms add ParmValue6  [nvarchar](50) NULL 


ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)

if not exists (select column_name from INFORMATION_SCHEMA.columns where table_name = 'cq_PersonalQueryParms' and column_name = 'ParmValue6') 
  alter table cq_PersonalQueryParms add ParmValue6  [nvarchar](50) NULL 


ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue1 NVARCHAR(MAX)
if not exists (select column_name from INFORMATION_SCHEMA.columns where table_name = 'cq_PersonalQueryParms' and column_name = 'ParmValue6') 
  alter table cq_PersonalQueryParms add ParmValue6  [nvarchar](50) NULL 


ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue1 NVARCHAR(MAX)

  alter table cq_PersonalQueryParms add ParmValue6  [nvarchar](50) NULL 


ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue1 NVARCHAR(MAX)




ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue1 NVARCHAR(MAX)


DELETE FROM cq_PersonalQueryParms

ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue1 NVARCHAR(MAX)


DELETE FROM cq_PersonalQueryParms

ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmName NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue6 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue5 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue4 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue3 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue2 NVARCHAR(MAX)
ALTER TABLE cq_PersonalQueryParms ALTER COLUMN ParmValue1 NVARCHAR(MAX)


DELETE FROM cq_PersonalQueryParms

UPDATE fsma_Questions SET FK_QuestionType = 2 WHERE PK_QUestion IN (1455,1456)




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.6.sql
SET QuestionText='Instruction: Question 5.2 applies only to Federal civilian organizations. If the reporting organization is not a Federal civilian agency, answer N/A to these questions.'
WHERE PK_Question = 2059

/****** Object:  Default [DF_PickLists_isActive]    Script Date: 03/28/2013 13:03:51 ******/
IF  EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PickLists_isActive]') AND parent_object_id = OBJECT_ID(N'[dbo].[PickLists]'))
Begin
ALTER TABLE [dbo].[PickLists] DROP CONSTRAINT [DF_PickLists_isActive]

End
GO
/****** Object:  Table [dbo].[PickListTypes]    Script Date: 03/28/2013 13:03:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PickListTypes]') AND type in (N'U'))
INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (57, N'Sort CVSS by', NULL, N'CvssDumpSort', NULL)
INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (58, N'Return Top ', NULL, N'rowcount', NULL)
INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (59, N'Ranking Metric', NULL, N'RankDFmet', NULL)
/****** Object:  Default [DF_PickLists_isActive]    Script Date: 03/28/2013 13:03:51 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PickLists_isActive]') AND parent_object_id = OBJECT_ID(N'[dbo].[PickLists]'))
Begin
ALTER TABLE [dbo].[PickLists] ADD  CONSTRAINT [DF_PickLists_isActive]  DEFAULT ((1)) FOR [isActive]

End
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.6.9.sql




IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'isDataFeed')
BEGIN
	ALTER TABLE df_NIST_CPE_Details ADD IsDataFeed bit DEFAULT(0)
END








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.7.sql
    DROP PROCEDURE [cq_ScanAnalysis]


-- Adds the column IsActive to the cq_Query table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cq_Query' AND COLUMN_NAME = 'IsActive')
BEGIN
ALTER TABLE dbo.cq_Query ADD
	IsActive bit NOT NULL CONSTRAINT DF_cq_Query_IsActive DEFAULT 1
END
GO
UPDATE cq_Query SET isActive = 1




-- Adds the column IsActive to the cq_Query table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_DataFeedUpload' AND COLUMN_NAME = 'ScanEndOriginal')
BEGIN
ALTER TABLE df_DataFeedUpload ADD ScanEndOriginal datetime 
END
GO

UPDATE df_DataFeedUpload
SET ScanEndOriginal = ScanEnd
END
GO

UPDATE df_DataFeedUpload
SET ScanEndOriginal = ScanEnd

ALTER TABLE wf_Roles
ALTER COLUMN RoleCode nvarchar(10)

--Create new permission
IF NOT EXISTS (SELECT * FROM wf_Permissions WHERE Access_Code = 'DFSCAN')
BEGIN




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_2.8.sql


-- 2.8 

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dsh_Catalog' AND COLUMN_NAME = 'Stored_Procedure_Name')
BEGIN
	ALTER TABLE dsh_Catalog ADD Stored_Procedure_Name NVARCHAR(100)
END


--- 2013 Annual FORMS CIO - IG - SAOP - MICRO 

UPDATE fsma_Questions 
SET FK_QuestionType = @PKType
WHERE  PK_Question >= 3194 AND PK_Question <= 3468 AND FK_QuestionType = 7

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_OsSecureConfigManagement' AND COLUMN_NAME = 'Deviation')
BEGIN
	ALTER TABLE fsma_OsSecureConfigManagement
	ADD Deviation int DEFAULT 0
END

GO 





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.0.sql

UPDATE cq_ParmsMaster
SET SortOrder = 20
WHERE ParmName = 'rowcount'

-- add column
ALTER TABLE fsma_OsSecureConfigManagement
ADD Deviation2 decimal(18,3)
GO

-- copy into new column
UPDATE fsma_OsSecureConfigManagement
	and name = 'Deviation')

SET @sql = N'ALTER table fsma_OsSecureConfigManagement drop constraint ' + @default
EXEC sp_executesql @sql

-- remove old column 
ALTER TABLE fsma_OsSecureConfigManagement
DROP COLUMN Deviation

--rename column
EXEC sp_rename 
@objname = 'fsma_OsSecureConfigManagement.Deviation2', 
EXEC sp_rename 
@objname = 'fsma_OsSecureConfigManagement.Deviation2', 
@newname = 'Deviation', 
@objtype = 'COLUMN'

--add constraint
ALTER TABLE fsma_OsSecureConfigManagement
ADD CONSTRAINT deviation_default
DEFAULT 0 FOR Deviation

UPDATE fsma_QuestionTypes
SET FK_QuestionEntryType = 1 



-- TIC 3.0
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormTypes' AND COLUMN_NAME = 'PK_DataCall')
BEGIN
	ALTER TABLE [fsma_FormTypes]
	ADD PK_DataCall int NOT NULL 
	DEFAULT 0
END
GO

	DEFAULT 0
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_ReportingCycles' AND COLUMN_NAME = 'SplashHeader')
BEGIN
	ALTER TABLE [fsma_ReportingCycles]
	ADD SplashHeader nvarchar(MAX)  
END
GO

IF (NOT EXISTS (SELECT * FROM fsma_FormTypes WHERE Type = 'TICAP'))
	 CONSTRAINT [PK_People] PRIMARY KEY CLUSTERED 
	(
		[PK_People] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
	) ON [PRIMARY]

	ALTER TABLE [dbo].[People] ADD  CONSTRAINT [DF_People_isActive]  DEFAULT ((1)) FOR [isActive]
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Location'))
BEGIN
	CREATE TABLE [dbo].[Location](
	 CONSTRAINT [PK_Location] PRIMARY KEY CLUSTERED 
	(
		[PK_Location] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

	ALTER TABLE [dbo].[Location] ADD  CONSTRAINT [DF_Location_isActive]  DEFAULT ((1)) FOR [isActive]
END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'TIC_Location'))
BEGIN
	CREATE TABLE [dbo].[TIC_Location](
	INSERT INTO fsma_QuestionTypes
	SELECT 'MULTICHECKBOX', 'Multi Check Box',  1, 3, NULL, NULL, NULL, 'PK_OrgSubmission', NULL
END 



ALTER TABLE PickLists ALTER COLUMN CodeValue varchar(10)

--CS-2375
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_ReportingCycles' AND COLUMN_NAME = 'PK_DataCall')
BEGIN
	ALTER TABLE [fsma_ReportingCycles]

ALTER TABLE PickLists ALTER COLUMN CodeValue varchar(10)

--CS-2375
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_ReportingCycles' AND COLUMN_NAME = 'PK_DataCall')
BEGIN
	ALTER TABLE [fsma_ReportingCycles]
	ADD PK_DataCall int NOT NULL 
	DEFAULT 0
END
GO

END

-- CS-2378
-- create new columns in Component List for TICAP and SSA agencies
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'enableTICAP')
BEGIN
	ALTER TABLE [Component List]
	ADD enableTICAP int NOT NULL 
	DEFAULT 0
END
GO

	DEFAULT 0
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'enableSSA')
BEGIN
	ALTER TABLE [Component List]
	ADD enableSSA int NOT NULL 
	DEFAULT 0
END
GO
 
END
GO

-- just in case they've already run the code block above, just insert the column by itself
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_DataCall' AND COLUMN_NAME = 'OwnerDisplayID')
BEGIN
       ALTER TABLE [fsma_DataCall]
       ADD OwnerDisplayID nvarchar(35)  
END
GO
 

       ALTER TABLE [fsma_DataCall]
       ADD OwnerDisplayID nvarchar(35)  
END
GO
 

ALTER TABLE wf_Roles 
ALTER COLUMN RoleCode nvarchar(20) NULL

DECLARE @PermPK AS INT
DECLARE @PK AS INT

SET CrystalReportForm = 'Reports/CrystalReportsFiles/TICPOAM_SSA2013.rpt'
WHERE CrystalReportForm = 'Reports/CrystalReportsFiles/2013SSA.rpt'

--Add self-referencing foreign key column to PickLists
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PickLists' AND COLUMN_NAME = 'FK_PK_PickList')
BEGIN
	ALTER TABLE [PickLists]
	ADD FK_PK_PickList int NULL 
END
GO

--Create Picklists for TIC Capabilities (Critical and Recommended)
SET @SQL = 'ALTER DATABASE '+ @DBName +' SET COMPATIBILITY_LEVEL = 100  '
exec sp_executesql @SQL

if NOT exists(select * from sys.columns where Name = N'PK_OrgSubmission' and Object_ID = Object_ID(N'People'))
BEGIN
	-- add PK_ORG to People
	ALTER TABLE dbo.People ADD
		PK_OrgSubmission int NOT NULL CONSTRAINT DF_People_PK_OrgSubmission DEFAULT 0
END

if NOT exists(select * from sys.columns where Name = N'PK_Question' and Object_ID = Object_ID(N'People'))
BEGIN
		PK_OrgSubmission int NOT NULL CONSTRAINT DF_People_PK_OrgSubmission DEFAULT 0
END

if NOT exists(select * from sys.columns where Name = N'PK_Question' and Object_ID = Object_ID(N'People'))
BEGIN
	-- add PK_ORG to People
	ALTER TABLE dbo.People ADD
		PK_Question int NOT NULL CONSTRAINT DF_People_PK_Question DEFAULT 0
END


IF NOT EXISTS (SELECT * FROM cq_ParmsMaster WHERE cq_ParmsMaster.ParmName='TicPoamSsaForm')
	PK_CVEscanResults int NOT NULL IDENTITY (1, 1),
	PK_DataFeedUpload int NOT NULL,
	PK_SCAP_CVE nvarchar(450) NULL,
	number_of_affected_systems bigint NULL
	)  ON [PRIMARY]
GO
ALTER TABLE Tmp_df_CVEscanResults SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT Tmp_df_CVEscanResults ON
GO
IF EXISTS(SELECT * FROM df_CVEscanResults)
	 EXEC('INSERT INTO Tmp_df_CVEscanResults (PK_CVEscanResults, PK_DataFeedUpload, PK_SCAP_CVE, number_of_affected_systems)
SET IDENTITY_INSERT Tmp_df_CVEscanResults OFF
GO
DROP TABLE df_CVEscanResults
GO
EXECUTE sp_rename N'Tmp_df_CVEscanResults', N'df_CVEscanResults', 'OBJECT' 
GO
ALTER TABLE df_CVEscanResults ADD CONSTRAINT
	PK_df_CVEscanResults PRIMARY KEY CLUSTERED 
	(
	PK_CVEscanResults
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

CREATE TABLE Tmp_df_NIST_CVE_Software
	(
	PK_SCAP_CVE nvarchar(450) NOT NULL,
	Software_CPE nvarchar(255) NULL
	)  ON [PRIMARY]
GO
ALTER TABLE Tmp_df_NIST_CVE_Software SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM df_NIST_CVE_Software)
	 EXEC('INSERT INTO Tmp_df_NIST_CVE_Software (PK_SCAP_CVE, Software_CPE)
		SELECT PK_SCAP_CVE, Software_CPE FROM df_NIST_CVE_Software WITH (HOLDLOCK TABLOCKX)')
GO
	CVSS_ConfidentImpact nvarchar(40) NULL,
	CVSS_IntegrityImpact nvarchar(40) NULL,
	CVSS_AvailImpact nvarchar(40) NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE Tmp_df_NIST_CVE_Details SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM df_NIST_CVE_Details)
	 EXEC('INSERT INTO Tmp_df_NIST_CVE_Details (PK_SCAP_CVE, CVE_PublishedDate, CVE_Summary, CVSS_Score, CVSS_AccessVector, CVSS_Complexity, CVSS_ConfidentImpact, CVSS_IntegrityImpact, CVSS_AvailImpact)
		SELECT PK_SCAP_CVE, CVE_PublishedDate, CVE_Summary, CVSS_Score, CVSS_AccessVector, CVSS_Complexity, CVSS_ConfidentImpact, CVSS_IntegrityImpact, CVSS_AvailImpact FROM df_NIST_CVE_Details WITH (HOLDLOCK TABLOCKX)')
GO
		SELECT PK_SCAP_CVE, CVE_PublishedDate, CVE_Summary, CVSS_Score, CVSS_AccessVector, CVSS_Complexity, CVSS_ConfidentImpact, CVSS_IntegrityImpact, CVSS_AvailImpact FROM df_NIST_CVE_Details WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE df_NIST_CVE_Details
GO
EXECUTE sp_rename N'Tmp_df_NIST_CVE_Details', N'df_NIST_CVE_Details', 'OBJECT' 
GO
ALTER TABLE df_NIST_CVE_Details ADD CONSTRAINT
	PK_df_NIST_CVEDetails PRIMARY KEY CLUSTERED 
	(
	PK_SCAP_CVE
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.1.sql
	INSERT INTO wf_RolesToPermissions SELECT * FROM (SELECT PK_Roles FROM [wf_Roles] WHERE RoleCode  = 'DFADMIN')  sub ,  (SELECT PK_Permissions FROM wf_Permissions WHERE Access_Code = 'DFDOWNLOAD') Sub2



IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'Platform')
BEGIN
	ALTER TABLE df_NIST_CPE_Details
	ADD [Platform] [nvarchar](50) NULL 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'PlatformStatus')
	ADD [Platform] [nvarchar](50) NULL 
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'PlatformStatus')
BEGIN
	ALTER TABLE df_NIST_CPE_Details
	ADD [PlatformStatus] [nvarchar](50) NULL 
END
GO



GO

--cs--3347
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'df_NIST_CPE_Details' AND COLUMN_NAME = 'ProductNormalize')
BEGIN
      ALTER TABLE df_NIST_CPE_Details
      ADD [ProductNormalize] [nvarchar](100) NULL 
END
GO

DECLARE @VALUE NVARCHAR(100) = 'OTHER'
) ON [PRIMARY]


END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ns_RiskScoreAccums' AND COLUMN_NAME = 'DateUpdated')
BEGIN
	ALTER TABLE ns_RiskScoreAccums
	ADD [DateUpdated] datetime NULL 
END
GO




IF NOT EXISTS(SELECT * FROM sys.columns  WHERE [name] = N'DashletOnly' AND [object_id] = OBJECT_ID(N'cq_SPtoParms'))
BEGIN
	BEGIN TRANSACTION
	
	ALTER TABLE cq_SPtoParms ADD
		DashletOnly bit NULL
	
	ALTER TABLE dbo.cq_SPtoParms ADD CONSTRAINT
		DF_cq_SPtoParms_DashletOnly DEFAULT 0 FOR DashletOnly
	COMMIT
BEGIN
	BEGIN TRANSACTION
	
	ALTER TABLE cq_SPtoParms ADD
		DashletOnly bit NULL
	
	ALTER TABLE dbo.cq_SPtoParms ADD CONSTRAINT
		DF_cq_SPtoParms_DashletOnly DEFAULT 0 FOR DashletOnly
	COMMIT
END

--If the index does not exists on the column(PK_SCAP_CVE) for the table(df_CVEscanResults) then create the index. 




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.2.sql
GO

--CS-3454 add date column to TIC_Location table. Date shows up in section 3 of TICAP form 
IF NOT EXISTS(select column_name from INFORMATION_SCHEMA.columns where table_name = 'TIC_Location' and 
column_name = 'APDate')
BEGIN
	ALTER TABLE TIC_Location
	ADD APDate Datetime NULL 
END

--CS-3515
--Change form desc (for 2014 TICAP Semi-Annual Feb) in fsma_FormMaster, 
	AND FK_ReportingCycle = 16

	EXEC AgencyAddFormInstance @PK_ReportCycle_ComponentDNFSB, '2014-Q3-CIO', NULL
END

--cs-3522 allow null on isp column in tic_location table, now that ssa august form hides city,state and isp column
ALTER TABLE TIC_Location ALTER COLUMN ISP NVARCHAR(100) NULL









D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.3.sql
WHERE  ParmName = 'XDATA'  AND
		PK_cq_Query = (SELECT TOP 1 PK_cq_Query FROM cq_Query WHERE Stored_Procedure_Name = 'cq_ScanAnalysis')
		
		
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'isCFO')
BEGIN
	ALTER TABLE [Component List]
	ADD isCFO int NOT NULL 
	DEFAULT 0
END
GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.4.sql
	
	

	
IF NOT EXISTS(select column_name from INFORMATION_SCHEMA.columns where table_name = 'df_NIST_CPE_Details' and column_name = 'NS_Category')
BEGIN
	ALTER TABLE df_NIST_CPE_Details
	ADD  [NS_Category] [int] NULL
END
GO --Please do not remove this GO statement there is a check for this column's existance below.

--CS 3613 Checked couple of DB's, only Cyberscope 2 db has this record in component list table CSHIB/Chemical Safety and Hazard Investigation Board,




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.5.sql

END

--CS-3759 Include Artifacts for FISMA 2014 forms
IF NOT EXISTS(select column_name from INFORMATION_SCHEMA.columns where table_name = 'ArtifactsToReportCycles' and column_name = 'Required')
	BEGIN
		ALTER TABLE ArtifactsToReportCycles
		ADD  	[Required] BIT NOT NULL DEFAULT 0,
				[RequiredMIC] BIT NULL DEFAULT 0			
END
GO
--Update ArtifactsToReportCycles's old reporting cycles with required and requiredMIC data from ArtifactTypes	
----CS-3759 Changes ends



IF NOT EXISTS(select column_name from INFORMATION_SCHEMA.columns where table_name = 'df_NIST_CPE_Details' and column_name = 'deprecated_by')
	BEGIN
		ALTER TABLE df_NIST_CPE_Details
		ADD  	[deprecated_by] [nvarchar](200) NULL,
				[deprecation_date] [nvarchar](80) NULL
	END

IF NOT EXISTS(select column_name from INFORMATION_SCHEMA.columns where table_name = 'df_NIST_CPE_ImportTemp' and column_name = 'deprecated_by')
		ADD  	[deprecated_by] [nvarchar](200) NULL,
				[deprecation_date] [nvarchar](80) NULL
	END

IF NOT EXISTS(select column_name from INFORMATION_SCHEMA.columns where table_name = 'df_NIST_CPE_ImportTemp' and column_name = 'deprecated_by')
	BEGIN
		ALTER TABLE df_NIST_CPE_ImportTemp
		ADD  	[deprecated_by] [nvarchar](200) NULL,
				[deprecation_date] [nvarchar](80) NULL
	END

GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.6.sql
 END
 
 --CS-3518
 IF NOT EXISTS(SELECT * FROM sys.columns
WHERE Name = N'String_PrimeKey' AND OBJECT_ID = OBJECT_ID(N'dbo.AuditLog'))
BEGIN
	ALTER TABLE dbo.AuditLog ADD String_PrimeKey nvarchar(30)
END

--CS-3817 Creating another permission called OMB Datafeed admin
--Agency Data Feed Lock, Update CPE Platform/Status/ProductNormalize, Update Risk Score Table,Update XML Feeds sub-menu will have this new permission tied in the code base. 
--Tie the new permission to DFADMIN role
END


-- CS-3837 add ISCM flag, update enable CIO/IG/SAOP flag
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'enableISCM')
BEGIN
	ALTER TABLE [Component List]
	ADD enableISCM int NOT NULL 
	DEFAULT 0
END
GO



IF  EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF__df_CPE_Gr__isAct__2B60367F]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]'))
Begin
	IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__df_CPE_Gr__isAct__2B60367F]') AND type = 'D')
	BEGIN
	ALTER TABLE [dbo].[df_CPE_GroupValues] DROP CONSTRAINT [DF__df_CPE_Gr__isAct__2B60367F]
	END
End


IF  EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF__df_CPE_Gr__sortp__2C545AB8]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]'))


IF  EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF__df_CPE_Gr__sortp__2C545AB8]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]'))
Begin
	IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__df_CPE_Gr__sortp__2C545AB8]') AND type = 'D')
	BEGIN
	ALTER TABLE [dbo].[df_CPE_GroupValues] DROP CONSTRAINT [DF__df_CPE_Gr__sortp__2C545AB8]
	END
End


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]') AND type in (N'U'))


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF__df_CPE_Gr__isAct__2B60367F]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__df_CPE_Gr__isAct__2B60367F]') AND type = 'D')
	BEGIN
	ALTER TABLE [dbo].[df_CPE_GroupValues] ADD  CONSTRAINT [DF__df_CPE_Gr__isAct__2B60367F]  DEFAULT ((1)) FOR [isActive]
	END
End


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF__df_CPE_Gr__sortp__2C545AB8]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]'))


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF__df_CPE_Gr__sortp__2C545AB8]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_CPE_GroupValues]'))
	Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF__df_CPE_Gr__sortp__2C545AB8]') AND type = 'D')
	BEGIN
	ALTER TABLE [dbo].[df_CPE_GroupValues] ADD  CONSTRAINT [DF__df_CPE_Gr__sortp__2C545AB8]  DEFAULT ((0)) FOR [sortpos]
	END
End




	END
	
	--CS-3843 Create adminonly column in both wf_roles and wf_Permissions tables to be used in User/Roles/Permissions's Account Management tab ->  
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Roles' and name = 'AdminOnly')
BEGIN
	ALTER TABLE wf_Roles
	ADD AdminOnly BIT NULL
END
Go

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Permissions' and name = 'AdminOnly')
	ADD AdminOnly BIT NULL
END
Go

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Permissions' and name = 'AdminOnly')
BEGIN
	ALTER TABLE wf_Permissions
	ADD AdminOnly BIT NULL
END
Go

UPDATE wf_roles
	END		
END

IF NOT EXISTS(SELECT * FROM sys.columns
WHERE Name = N'TimeZone' AND OBJECT_ID = OBJECT_ID(N'Enclaves'))
BEGIN
ALTER TABLE dbo.Enclaves ADD
	TimeZone int NULL
END  

DECLARE @PK_Perm_DFSCAN INT
DECLARE @PK_Role_DFSUB INT

IF EXISTS(SELECT * FROM sys.columns
WHERE Name = N'String_PrimeKey' AND OBJECT_ID = OBJECT_ID(N'dbo.AuditLog'))
BEGIN
  if COL_LENGTH('dbo.AuditLog','String_PrimeKey') < 100
	BEGIN
		ALTER TABLE AuditLog DROP COLUMN String_PrimeKey
		ALTER TABLE AuditLog ADD  String_PrimeKey NVARCHAR(250)
	END
END

-- fix sorting params (must not all equal 1) so that saved values applies proprely
IF EXISTS(SELECT * FROM sys.columns
WHERE Name = N'String_PrimeKey' AND OBJECT_ID = OBJECT_ID(N'dbo.AuditLog'))
BEGIN
  if COL_LENGTH('dbo.AuditLog','String_PrimeKey') < 100
	BEGIN
		ALTER TABLE AuditLog DROP COLUMN String_PrimeKey
		ALTER TABLE AuditLog ADD  String_PrimeKey NVARCHAR(250)
	END
END

-- fix sorting params (must not all equal 1) so that saved values applies proprely
UPDATE cq_SPtoParms SET SortOrder = 2 WHERE PK_cq_ParmsMaster = (SELECT TOP 1 PK_cq_ParmsMaster FROM cq_ParmsMaster WHERE ParmName = 'DataFeed2') AND PK_cq_Query = (SELECT TOP 1 PK_cq_Query FROM cq_Query WHERE Stored_Procedure_Name = 'cq_ScanAnalysis')




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.7.sql
INSERT INTO fsma_Questions (PK_Question, FormName, QuestionNum, Section, FK_QuestionGroup, PK_Question_Prev, QuestionText, QuestionFormText, Table_Name, Column_Question, FK_Question_Picklist, FK_PickListType, FK_QuestionType, sortpos, reportable, FK_InputType, identifier_text, FK_QuestionTypeMaster, help_text, FK_PickList) VALUES
	(4457, N'SSA', NULL, NULL, 353, NULL, N'Glosssary for SSA section 3 goes here.', NULL, N'--ENTER TABLE--', N'--ENTER QUEST--', NULL, NULL, 18, 10, 1, 0, N'', NULL, NULL, NULL)
GO


-- fix enclave time zone table
ALTER TABLE Enclaves
ALTER COLUMN TimeZone decimal(4, 2)


--CS-3862 SECTION 2 TICAP critical capability grid reason not met picklist insert
DELETE FROM PickListTypes WHERE PK_PickListType > 74

	END
	
--CS_3862 SECTION 2 TICAP critical capability not met add relevant columns	
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'TIC_Critical_Capability' and name = 'ExpectedDate')
BEGIN
	ALTER TABLE TIC_Critical_Capability
	ADD Reason INT NULL,
	ExpectedDate Datetime NULL,
	Remediated BIT NOT NULL DEFAULT 0,
	Comments varchar(500) NULL
END
END
Go

--CS-3863 & CS-3882 SECTION 3 TICAP & SSA Technical Information: Access Points, add & drop relevant columns
IF EXISTS (select * from syscolumns where object_name(id) = 'TIC_Location' and name = 'Enterprise')
BEGIN
	-- ALTER TABLE TIC_Location DROP CONSTRAINT DF__TIC_Locat__Enter__41B98BF2
	ALTER TABLE TIC_Location DROP COLUMN Enterprise, [Description]
END
Go
	
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'TIC_Location' and name = 'Secondary')
Go

--CS-3863 & CS-3882 SECTION 3 TICAP & SSA Technical Information: Access Points, add & drop relevant columns
IF EXISTS (select * from syscolumns where object_name(id) = 'TIC_Location' and name = 'Enterprise')
BEGIN
	-- ALTER TABLE TIC_Location DROP CONSTRAINT DF__TIC_Locat__Enter__41B98BF2
	ALTER TABLE TIC_Location DROP COLUMN Enterprise, [Description]
END
Go
	
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'TIC_Location' and name = 'Secondary')
BEGIN
	ALTER TABLE TIC_Location DROP COLUMN Enterprise, [Description]
END
Go
	
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'TIC_Location' and name = 'Secondary')
BEGIN
	ALTER TABLE TIC_Location
	ADD [Secondary] BIT NOT NULL DEFAULT 0,
	[Description] varchar(500) NULL
END
Go

	[Description] varchar(500) NULL
END
Go

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'Location' and name = 'isMtips')
BEGIN
	ALTER TABLE Location
	ADD isMtips BIT NOT NULL DEFAULT 0
END
Go

IF NOT EXISTS (SELECT * FROM Location 




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.8.sql


DELETE FROM fsma_SCM
WHERE PK_OrgSubmission IN
(SELECT PK_OrgSubmission FROM fsma_OrgSubmissions WHERE PK_Form = '2015-Q2-CIO')

ALTER TABLE fsma_SCM ALTER COLUMN PK_OrgSubmission INT NOT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Assets INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Exceptions INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN AuditPercent INT NULL
	
-- These next two rows are specific to source table or query

DELETE FROM fsma_SCM
WHERE PK_OrgSubmission IN
(SELECT PK_OrgSubmission FROM fsma_OrgSubmissions WHERE PK_Form = '2015-Q2-CIO')

ALTER TABLE fsma_SCM ALTER COLUMN PK_OrgSubmission INT NOT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Assets INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Exceptions INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN AuditPercent INT NULL
	
-- These next two rows are specific to source table or query
DECLARE @orgsub table (rownum int IDENTITY (1, 1) Primary key NOT NULL , PK_OrgSubmission INT)
DELETE FROM fsma_SCM
WHERE PK_OrgSubmission IN
(SELECT PK_OrgSubmission FROM fsma_OrgSubmissions WHERE PK_Form = '2015-Q2-CIO')

ALTER TABLE fsma_SCM ALTER COLUMN PK_OrgSubmission INT NOT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Assets INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Exceptions INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN AuditPercent INT NULL
	
-- These next two rows are specific to source table or query
DECLARE @orgsub table (rownum int IDENTITY (1, 1) Primary key NOT NULL , PK_OrgSubmission INT)
DECLARE @groupsub table (rownum int IDENTITY (1, 1) Primary key NOT NULL , PK_CPE_GROUPVALUE INT)
WHERE PK_OrgSubmission IN
(SELECT PK_OrgSubmission FROM fsma_OrgSubmissions WHERE PK_Form = '2015-Q2-CIO')

ALTER TABLE fsma_SCM ALTER COLUMN PK_OrgSubmission INT NOT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Assets INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN Exceptions INT NULL
ALTER TABLE fsma_SCM ALTER COLUMN AuditPercent INT NULL
	
-- These next two rows are specific to source table or query
DECLARE @orgsub table (rownum int IDENTITY (1, 1) Primary key NOT NULL , PK_OrgSubmission INT)
DECLARE @groupsub table (rownum int IDENTITY (1, 1) Primary key NOT NULL , PK_CPE_GROUPVALUE INT)
DECLARE @RowOrgs INT 




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_3.9.sql
UPDATE fsma_Answers SET Answer = 2730 WHERE Answer = 2721 AND FK_Question = 4813
UPDATE fsma_Answers SET Answer = 2731 WHERE Answer = 2722 AND FK_Question = 4813


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Component List' AND COLUMN_NAME = 'enablePMC')
BEGIN
	ALTER TABLE [Component List]
	ADD enablePMC int NOT NULL 
	DEFAULT 0
END
GO



--*****CS-4127******
--Column indicating datacall admin permissions only.
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Permissions' and name = 'DataCallAdminOnly')
BEGIN
	ALTER TABLE wf_Permissions
	ADD [DataCallAdminOnly] BIT NULL
END
GO

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Roles' and name = 'DataCallAdminOnly')
	ADD [DataCallAdminOnly] BIT NULL
END
GO

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Roles' and name = 'DataCallAdminOnly')
BEGIN
	ALTER TABLE wf_Roles
	ADD [DataCallAdminOnly] BIT NULL
END
GO

UPDATE wf_Permissions SET DataCallAdminOnly = 1 WHERE Access_Code IN (N'TICADM',N'ISCMADM',N'FISMAADM', N'PMCADMIN', N'CAPGOALADMIN')
UPDATE wf_Permissions SET DataCallAdminOnly = 1 WHERE Access_Code IN (N'TICADM',N'ISCMADM',N'FISMAADM', N'PMCADMIN', N'CAPGOALADMIN')
UPDATE wf_Roles SET DataCallAdminOnly = 1 WHERE RoleCode IN (N'TICADM',N'ISCMADM',N'FSMADM', N'PMCADM', N'CAPGOALADM')

--fk_datacall Foreign key column in wf_permission and wf_roles
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Permissions' and name = 'FK_DataCall')
BEGIN
	ALTER TABLE wf_Permissions
	ADD [FK_DataCall] INT NULL FOREIGN KEY REFERENCES fsma_DataCall(PK_DataCall)
END
GO

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Roles' and name = 'FK_DataCall')
	ADD [FK_DataCall] INT NULL FOREIGN KEY REFERENCES fsma_DataCall(PK_DataCall)
END
GO

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'wf_Roles' and name = 'FK_DataCall')
BEGIN
	ALTER TABLE wf_Roles
	ADD [FK_DataCall] INT NULL FOREIGN KEY REFERENCES fsma_DataCall(PK_DataCall)
END
GO

--wf_permission 
(4643,4848,'Y')


--CS-4133 add warning column to indicate warning Questions in PMC form
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_Questions' and name = 'WarningQuestion')
BEGIN
	ALTER TABLE [fsma_Questions]
	ADD [WarningQuestion] INT NOT NULL DEFAULT 0
END
GO

UPDATE fsma_Questions




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_4.0.sql
	-- add a field to Artifacts for checksum
	IF NOT EXISTS(SELECT *
          FROM   INFORMATION_SCHEMA.COLUMNS
          WHERE  TABLE_NAME = 'Artifacts'
                 AND COLUMN_NAME = 'chksum') 
	BEGIN
		ALTER TABLE [Artifacts]
		ADD [chksum] INT NULL DEFAULT 0	
	END
	
	GO






	-- delete blob_file column from Artifacts
	--ALTER TABLE Artifacts
	--DROP COLUMN blob_file

	-- delete blob_file column from Artifacts
	--ALTER TABLE Artifacts
	--DROP COLUMN chksum

	-- delete blob_file column from Artifacts
	--ALTER TABLE Artifacts
	--DROP COLUMN blob_file

	-- delete blob_file column from Artifacts
	--ALTER TABLE Artifacts
	--DROP COLUMN chksum

	-- delete BACKUP table. don't uncomment until ready
	--DROP TABLE ArtifactsBACKUP




--- 2015 Annual FORMS CIO, IG, SAOP
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_FormMaster' and name = 'SprocFormValidation')
       BEGIN
             ALTER TABLE [dbo].[fsma_FormMaster]
                    ADD    [SprocFormValidation] [nvarchar](50) NULL,
                           [SprocFormUpdate] [nvarchar](50) NULL
       END

GO
DELETE FROM ArtifactsToReportCycles WHERE PK_ReportingCycle = 28
DELETE FROM ArtifactsToReportCycles WHERE PK_ReportingCycle = 29
DELETE FROM ArtifactsToReportCycles WHERE PK_ReportingCycle = 30

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'ArtifactsToReportCycles' and name = 'NoDuplicate')
BEGIN
	ALTER TABLE [ArtifactsToReportCycles]
	ADD [NoDuplicate] bit NOT NULL
	DEFAULT 0 
END
GO

END

--CS-4350 set up artifact slot for Agency ISCM Strategy to CIO, not "OTHER" slot.	
UPDATE ArtifactsToReportCycles SET PK_ArtifactType = 10 WHERE PK_ArtifactType = 3 AND PK_ReportingCycle=28

--CS-4344 workflow history Evendatetime column dataype changed to Datetime from smalldatetime. Since it did not store timestamp upto seconds the username and timestamp data was incorrect.
ALTER TABLE fsma_WorkFlowHist 
ALTER COLUMN EventDateTime DATETIME NOT NULL








D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_4.1.sql
	END 

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='cq_SPtoParms' AND COLUMN_NAME='RegularExpressionVal')
	BEGIN
		ALTER TABLE cq_SPtoParms
		ADD [RegularExpressionVal] [nvarchar](300) NULL,
			[CustomErrorMessage] [nvarchar](500) NULL
	END
	
GO
where p.PK_Permissions IN (SELECT PK_Permissions FROM wf_Permissions WHERE Access_Code = 'FULLADMIN'))


--CS-4387 Add new column in cq_SPtoParms table for use by SP's
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'cq_SPtoParms' and name = 'InstanceType')
	BEGIN
		ALTER TABLE cq_SPtoParms
		ADD [InstanceType] [varchar](500) NULL
	END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_5.0.sql
-- add a field to fsma_Questions for odd linking. In this case, we are going to link in the Capability explanations
IF NOT EXISTS(SELECT *
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = 'fsma_Questions'
             AND COLUMN_NAME = 'ExternalLinkType') 
BEGIN
	ALTER TABLE [fsma_Questions]
	ADD [ExternalLinkType] NVARCHAR(20) NULL
END
GO


-- add a field to fsma_Questions for odd linking. In this case, we are going to link in the Capability explanations
IF NOT EXISTS(SELECT *
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = 'fsma_Questions'
             AND COLUMN_NAME = 'PK_ExternalLink') 
BEGIN
	ALTER TABLE [fsma_Questions]
	ADD [PK_ExternalLink] INT NULL
END
GO


-- add a field to Artifacts for checksum
IF NOT EXISTS(SELECT *
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = 'fsma_InventoryCAtotals'
             AND COLUMN_NAME = 'SystemsOA') 
BEGIN
	ALTER TABLE [fsma_InventoryCAtotals]
	ADD [SystemsOA] INT NULL 
END
GO

-- add two additional new question types to fsma_InputTypes
	CrystalReportForm nvarchar(100) NULL,
	CrystalReportForm2 nvarchar(100) NULL,
	SprocFormValidation nvarchar(50) NULL,
	SprocFormUpdate nvarchar(50) NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_fsma_FormMaster SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.fsma_FormMaster)
	 EXEC('INSERT INTO dbo.Tmp_fsma_FormMaster (PK_Form, Report_Year, Form_Description, InternalForm, TypeCode, IntervalCode, Period, FK_ReportingCycle, FK_FormType, CrystalReportForm, SprocFormValidation, SprocFormUpdate)
		SELECT PK_Form, Report_Year, Form_Description, InternalForm, TypeCode, IntervalCode, Period, FK_ReportingCycle, FK_FormType, CrystalReportForm, SprocFormValidation, SprocFormUpdate FROM dbo.fsma_FormMaster WITH (HOLDLOCK TABLOCKX)')
GO
		SELECT PK_Form, Report_Year, Form_Description, InternalForm, TypeCode, IntervalCode, Period, FK_ReportingCycle, FK_FormType, CrystalReportForm, SprocFormValidation, SprocFormUpdate FROM dbo.fsma_FormMaster WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.fsma_FormMaster
GO
EXECUTE sp_rename N'dbo.Tmp_fsma_FormMaster', N'fsma_FormMaster', 'OBJECT' 
GO
ALTER TABLE dbo.fsma_FormMaster ADD CONSTRAINT
	PK_FormMaster_1 PRIMARY KEY CLUSTERED 
	(
	PK_Form
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_5.1.sql
       
IF NOT EXISTS(SELECT *
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = 'CompareMetrics'
             AND COLUMN_NAME = 'sortpos') 
BEGIN
	ALTER TABLE [CompareMetrics]
	ADD [sortpos] INT NULL
END
GO

--CS-4507 & CS-4461 new column to store current year/month value
END
GO

--CS-4507 & CS-4461 new column to store current year/month value
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'TICPOAMNetworkForecast' and name = 'Status')
BEGIN
	ALTER TABLE TICPOAMNetworkForecast
	ADD [Status] VARCHAR(500) NULL
END
GO

--CS-4569 - add column to denote whether TICAP (grid) or SSA (tree)
END
GO

--CS-4569 - add column to denote whether TICAP (grid) or SSA (tree)
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'TIC_Critical_Capability' and name = 'FormType')
BEGIN
	ALTER TABLE TIC_Critical_Capability
	ADD [FormType] VARCHAR(10) NULL
END
GO

--CS-4459 change legacy data for ISP to NA when pk_location is 0




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_5.2.4_PIV.sql
--CS-4695 Any reference to column currently storing the value of locked and unlocked will reference this new column created.
IF NOT EXISTS(SELECT *
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = 'fsma_ReportingCycle_Components'
             AND COLUMN_NAME = 'DatacallStatusCode')
BEGIN
	ALTER TABLE [fsma_ReportingCycle_Components]
	ADD [DatacallStatusCode] VARCHAR(100) NULL
END
GO


-- add new enablePIV column and set it to all the CFO agencies
IF NOT EXISTS(SELECT *
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = 'Component List'
             AND COLUMN_NAME = 'enablePIV')
BEGIN
	ALTER TABLE [Component List]
	ADD [enablePIV] bit NULL
END
GO

UPDATE [Component List]




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_5.2.7_FISMA_ANNUAL.sql

--Adds additional column for SAOP 2016 Section 1
IF NOT EXISTS(SELECT *
     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'fsma_SAOPpiaCounts'
       AND COLUMN_NAME = 'Q1_SaopApproved')
BEGIN
	ALTER TABLE fsma_SAOPpiaCounts
	ADD Q1_SaopApproved INT NULL
END
--Adds additional column in database for SAOP 2016 Section 8
IF NOT EXISTS(SELECT *
     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'fsma_SAOPbureauReviews'
END
--Adds additional column in database for SAOP 2016 Section 8
IF NOT EXISTS(SELECT *
     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'fsma_SAOPbureauReviews'
       AND COLUMN_NAME = 'Exemptions' OR COLUMN_NAME = 'MatchingPrograms' OR COLUMN_NAME = 'SystemOfRecords')
BEGIN
	ALTER TABLE fsma_SAOPbureauReviews
	ADD Exemptions NVARCHAR(5) NULL,
	MatchingPrograms NVARCHAR(5) NULL,
	SystemOfRecords NVARCHAR(5) NULL
END
GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_UPDATE_6.0.1.1_HOTFIX.sql
	SELECT PK_ArtifactType, 45,1,0,1 FROM ArtifactTypes WHERE PK_ArtifactType = 17
END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'RiskDecisionVulnerabilities' AND Column_Name = 'PK_Orgsubmission')
BEGIN
	ALTER TABLE RiskDecisionVulnerabilities
	ADD PK_Orgsubmission INT NOT NULL
END







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.1_CIO_Q2.sql

-------------Adds Additional Columns for CIO 2G-------------
--IF NOT EXISTS(SELECT *
--     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'TIC_CloudServices'
--       AND COLUMN_NAME = 'ServiceOffering' OR COLUMN_NAME = 'ATODate' OR COLUMN_NAME = 'SubAgency')
--BEGIN
--	ALTER TABLE TIC_CloudServices
--	ADD ServiceOffering NVARCHAR(200) NULL,
--	ATODate DATE NULL,
--	SubAgency NVARCHAR(MAX) NULL
--END
--GO
					
		SELECT @RowCnt = @RowCnt + 1 
	END		
END


ALTER TABLE PMC_Action
ALTER COLUMN PK_QuestionGroup INT NULL

DELETE FROM fsma_FormPages WHERE FK_Form IN ('2017-Q2-CIO', '2017-Q2-CIO', '2017-Q2-SSA')

DBCC CHECKIDENT('fsma_FormPages', RESEED, 490)




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.1_HOTFIX.sql

-------------Adds Additional Columns for CIO 2G-------------
IF NOT EXISTS(SELECT *
     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'CompareMetrics'
       AND COLUMN_NAME = 'ThresholdLow')
BEGIN
	ALTER TABLE CompareMetrics
	ADD ThresholdLow INT NULL
END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.2_CIO_Q3.sql
					
		SELECT @RowCnt = @RowCnt + 1 
	END		
END


ALTER TABLE PMC_Action
ALTER COLUMN PK_QuestionGroup INT NULL

DELETE FROM fsma_FormPages WHERE FK_Form IN ('2017-Q3-CIO', '2017-Q3-TICAP', '2017-Q3-SSA')
DELETE FROM fsma_QuestionGroups WHERE PK_Form IN ('2017-Q3-CIO', '2017-Q3-TICAP', '2017-Q3-SSA')
DELETE FROM fsma_Questions WHERE PK_Question > 8849 

SET @roleFKeyname = (SELECT name FROM sys.objects WHERE type_desc = 'FOREIGN_KEY_CONSTRAINT' AND OBJECT_NAME(parent_object_id)= 'wf_Roles')
SET @permissionFKeyname = (SELECT name FROM sys.objects WHERE type_desc = 'FOREIGN_KEY_CONSTRAINT' AND OBJECT_NAME(parent_object_id)= 'wf_Permissions')

IF @roleFKeyname IS NOT NULL
BEGIN
	EXEC('ALTER TABLE wf_Roles DROP CONSTRAINT [' + @roleFKeyname +']')
END

IF @permissionFKeyname IS NOT NULL
BEGIN	
	EXEC('ALTER TABLE wf_Permissions DROP CONSTRAINT ['+ @permissionFKeyname +']')
BEGIN
	EXEC('ALTER TABLE wf_Roles DROP CONSTRAINT [' + @roleFKeyname +']')
END

IF @permissionFKeyname IS NOT NULL
BEGIN	
	EXEC('ALTER TABLE wf_Permissions DROP CONSTRAINT ['+ @permissionFKeyname +']')
END

IF EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[fsma_DataCall]'))
DROP TABLE [fsma_DataCall]
GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.3_IG.sql
GO

--IF EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
--  WHERE TABLE_NAME='fsma_Questions'
--  AND COLUMN_NAME='FK_QuestionTypeMaster'
--)
--ALTER TABLE dbo.fsma_Questions
--DROP COLUMN FK_QuestionTypeMaster
--GO

/****** Object:  Table [dbo].[fsma_SAOPbureauReviewsMF]    Script Date: 04/27/2017 23:50:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fsma_SAOPbureauReviewsMF]') AND type in (N'U'))




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.4_CIO_Q4.sql


IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='ArtifactsToReportCycles'
  AND COLUMN_NAME='sortpos'
)
ALTER TABLE ArtifactsToReportCycles
ADD sortpos INT NULL DEFAULT(1)

GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.5_SAOP_A.sql

--add enclave2 to CCE at the checklist_name level
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_ScanTypeDetail'
  AND COLUMN_NAME='Enclave2'
)
ALTER TABLE df_ScanTypeDetail
ADD [Enclave2] [nvarchar](150) NULL

GO

--add enclave2 to CVE

--add enclave2 to CVE
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_CVEscanResults'
  AND COLUMN_NAME='Enclave2'
)
ALTER TABLE df_CVEscanResults
ADD [Enclave2] [nvarchar](150) NULL

GO
--add enclave2 to CPE
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
GO
--add enclave2 to CPE
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_CPEscanResults'
  AND COLUMN_NAME='Enclave2'
)
ALTER TABLE df_CPEscanResults
ADD [Enclave2] [nvarchar](150) NULL

GO

--add enclave2 to df_ANAPPscanResults

--add enclave2 to df_ANAPPscanResults
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_ANAPPscanResults'
  AND COLUMN_NAME='Enclave2'
)
ALTER TABLE df_ANAPPscanResults
ADD [Enclave2] [nvarchar](150) NULL

GO

IF NOT EXISTS(SELECT * FROM PickListTypes WHERE PK_PickListType = 90)
	VALUES ('BREACH', 'BreachResponse', 1, 3, 'frmVal_BreachResponse', 'BreachResponse', 3, 'PK_OrgSubmission', 'PK_Component')
END

--TICAP/SSA Cloud Services New Column
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
	WHERE TABLE_NAME='TIC_CloudServices'AND COLUMN_NAME='Comments')
 ALTER TABLE TIC_CloudServices
 ADD Comments NVARCHAR(MAX)

 --Updates Cloud Services Table to Match all the Provider Names offered in new Drop Down Control
 UPDATE TIC_CloudServices
SET ProviderName = 'Acquia'




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.6_PAC_Pub.sql
		 CONSTRAINT [PK_AlertsToUsers] PRIMARY KEY CLUSTERED 
		(
			[PK_AlertsToUsers] ASC
		)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
		) ON [PRIMARY]
	
		ALTER TABLE [dbo].[AlertsToUsers] ADD  CONSTRAINT [DF_Alerts_EmailSent]  DEFAULT ((0)) FOR [AlertStatus]
		
	END


IF NOT EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[NotificationsMaster]'))	
		SET IDENTITY_INSERT [dbo].[NotificationsMaster] ON 

		INSERT [dbo].[NotificationsMaster] ([PK_Notification], [NotificationCode], [TitleTemplate], [OUTPUT_TYPE], [OutputTemplate], [IsActive], [NotificationType], [OptOut], [OldNotificationCode], [FK_PK_Notification], [NotificationLevel], [Priority], [DoNotRepeat], [Nightly], [distList], [RepeatDays], [MaxRepeat], [CustomContent]) VALUES (1, N'DSHB01', N'CyberScope PAC View Invitation', N'H', N'DashboardInvite.htm', 1, N'E', 1, N'', 5, 3, 0, 0, NULL, 1, 1, 0, NULL)

		SET IDENTITY_INSERT [dbo].[NotificationsMaster] OFF

		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((1)) FOR [distList]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [RepeatDays]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [MaxRepeat]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ('') FOR [CustomContent]

	END

		INSERT [dbo].[NotificationsMaster] ([PK_Notification], [NotificationCode], [TitleTemplate], [OUTPUT_TYPE], [OutputTemplate], [IsActive], [NotificationType], [OptOut], [OldNotificationCode], [FK_PK_Notification], [NotificationLevel], [Priority], [DoNotRepeat], [Nightly], [distList], [RepeatDays], [MaxRepeat], [CustomContent]) VALUES (1, N'DSHB01', N'CyberScope PAC View Invitation', N'H', N'DashboardInvite.htm', 1, N'E', 1, N'', 5, 3, 0, 0, NULL, 1, 1, 0, NULL)

		SET IDENTITY_INSERT [dbo].[NotificationsMaster] OFF

		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((1)) FOR [distList]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [RepeatDays]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [MaxRepeat]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ('') FOR [CustomContent]

	END

		INSERT [dbo].[NotificationsMaster] ([PK_Notification], [NotificationCode], [TitleTemplate], [OUTPUT_TYPE], [OutputTemplate], [IsActive], [NotificationType], [OptOut], [OldNotificationCode], [FK_PK_Notification], [NotificationLevel], [Priority], [DoNotRepeat], [Nightly], [distList], [RepeatDays], [MaxRepeat], [CustomContent]) VALUES (1, N'DSHB01', N'CyberScope PAC View Invitation', N'H', N'DashboardInvite.htm', 1, N'E', 1, N'', 5, 3, 0, 0, NULL, 1, 1, 0, NULL)

		SET IDENTITY_INSERT [dbo].[NotificationsMaster] OFF

		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((1)) FOR [distList]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [RepeatDays]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [MaxRepeat]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ('') FOR [CustomContent]

	END

	

		SET IDENTITY_INSERT [dbo].[NotificationsMaster] OFF

		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((1)) FOR [distList]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [RepeatDays]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ((0)) FOR [MaxRepeat]
		ALTER TABLE [dbo].[NotificationsMaster] ADD  DEFAULT ('') FOR [CustomContent]

	END

	
IF NOT EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[Installation]'))	
		 CONSTRAINT [PK_dsh_PublicDashboards] PRIMARY KEY CLUSTERED 
		(
			[PK_PublicDashboard] ASC
		)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 80) ON [PRIMARY]
		) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

		ALTER TABLE [dbo].[dsh_PublicDashboards]  WITH CHECK ADD  CONSTRAINT [FK_dsh_PublicDashboards_dsh_DashletPages] FOREIGN KEY([PK_DashletPage])
		REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
		ON DELETE CASCADE

		ALTER TABLE [dbo].[dsh_PublicDashboards] CHECK CONSTRAINT [FK_dsh_PublicDashboards_dsh_DashletPages]
	END
		) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

		ALTER TABLE [dbo].[dsh_PublicDashboards]  WITH CHECK ADD  CONSTRAINT [FK_dsh_PublicDashboards_dsh_DashletPages] FOREIGN KEY([PK_DashletPage])
		REFERENCES [dbo].[dsh_DashletPages] ([PK_DashletPage])
		ON DELETE CASCADE

		ALTER TABLE [dbo].[dsh_PublicDashboards] CHECK CONSTRAINT [FK_dsh_PublicDashboards_dsh_DashletPages]
	END

IF NOT EXISTS (SELECT * FROM wf_Permissions WHERE PK_Permissions = 213)	
	BEGIN
		SET IDENTITY_INSERT [dbo].[wf_Permissions] ON 
GO


-- new ReadOnly column to show a Risk Management FINAL slot
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='ArtifactTypes'AND COLUMN_NAME='ViewOnly')
BEGIN
	ALTER TABLE ArtifactTypes
	ADD ViewOnly BIT NULL DEFAULT 0
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0.7_RMA_Response.sql
SET enableIG = 1, enableSSA = 1
WHERE Acronym = 'STB'
AND FK_PK_Component IS NULL

--IF (SELECT COUNT(*) FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME = '[PK_FormMaster_1]') <> 0
--BEGIN
--	ALTER TABLE fsma_FormMaster
--	DROP CONSTRAINT [PK_FormMaster_1]
--END

--GO

--	ALTER TABLE fsma_FormMaster
--	DROP CONSTRAINT [PK_FormMaster_1]
--END

--GO

--ALTER TABLE fsma_FormMaster ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_FormMaster
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_OrgSubmissions
--END

--GO

--ALTER TABLE fsma_FormMaster ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_FormMaster
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_OrgSubmissions
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL


--ALTER TABLE fsma_FormMaster ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_FormMaster
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_OrgSubmissions
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_FormMaster
--ADD CONSTRAINT [PK_FormMaster_1] PRIMARY KEY (PK_Form)

--ALTER TABLE fsma_FormMaster
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_OrgSubmissions
--ALTER COLUMN PK_Form NVARCHAR(40) NOT NULL

--ALTER TABLE fsma_FormMaster
--ADD CONSTRAINT [PK_FormMaster_1] PRIMARY KEY (PK_Form)

UPDATE fsma_FormMaster
SET PK_Form = '2017-Q3-RISKEVA'
WHERE PK_Form = '2017-Q-RISKEVAL'




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0_FISMA_Q1_CONSOLIDATED.sql

-------------Adds Additional Columns for CIO 2G-------------
IF NOT EXISTS(SELECT *
     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'TIC_CloudServices'
       AND COLUMN_NAME = 'ServiceOffering' OR COLUMN_NAME = 'ATODate' OR COLUMN_NAME = 'SubAgency')
BEGIN
	ALTER TABLE TIC_CloudServices
	ADD ServiceOffering NVARCHAR(200) NULL,
	ATODate DATE NULL,
	SubAgency NVARCHAR(MAX) NULL
END
GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.0_FISMA_Q1_SPLIT.sql

-------------Adds Additional Columns for CIO 2G-------------
IF NOT EXISTS(SELECT *
     FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'TIC_CloudServices'
       AND COLUMN_NAME = 'ServiceOffering' OR COLUMN_NAME = 'ATODate' OR COLUMN_NAME = 'SubAgency')
BEGIN
	ALTER TABLE TIC_CloudServices
	ADD ServiceOffering NVARCHAR(200) NULL,
	ATODate DATE NULL,
	SubAgency NVARCHAR(MAX) NULL
END
GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_6.2_CIO_Q1.sql


--IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
--  WHERE TABLE_NAME='ArtifactsToReportCycles'
--  AND COLUMN_NAME='sortpos'
--)
--ALTER TABLE ArtifactsToReportCycles
--ADD sortpos INT NULL DEFAULT(1)

--GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.0_CIO_Q1.sql

----- FISMA Quarterly CIO 2018 Annual DB_Update_6.0.4_CIO_Q1.sql begins here -----------------------------------------------------------

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'fsma_InventoryCAtotals'
       AND COLUMN_NAME = 'SharedService')
BEGIN
	ALTER TABLE fsma_InventoryCAtotals ADD SharedService INT NULL
END
GO

UPDATE fsma_Questions
SET FK_QuestionType = 44




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.10_CIO_Q2.sql
GO

----***  RMA Metrics Comparison ***

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CompareMetrics' and COLUMN_NAME='StrFormula')
BEGIN
	ALTER TABLE CompareMetrics
	ADD  StrFormula NVARCHAR(100) NULL
END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.11_RMA_Q2.sql




IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'CompareMetrics' AND column_name=N'GovernmentWide')
	BEGIN
		ALTER TABLE [CompareMetrics] DROP COLUMN GovernmentWide
	END
GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[RMAGovtWide]'))
BEGIN
WHERE FunctionName = 'Respond'

GO
--CS-6356 create a column in fsma_formmaster table to get the name of appendix-a sproc. 
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_FormMaster' and name = 'SprocAppendix')
BEGIN
	ALTER TABLE fsma_FormMaster
	ADD [SprocAppendix] NVARCHAR(25) NULL
END
GO
--CS-6356 The CapGoalsNotMetQ3 ascx page that will call a function(fn_GetCapAppendixASproc) to pull the name of the sproc, dates back to Q3 2018 appendix A page. There is no ref of appendix-a page prior to that qtr.
UPDATE fsma_FormMaster SET SprocAppendix = 'cap_AppendixA_CIOQ12019' WHERE FK_ReportingCycle IN (62,63) -- 2019-Q1-CIO, 2019-Q2-CIO
GO

----***  RMA Metrics Comparison ***

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CompareMetrics' and COLUMN_NAME='StrFormula')
BEGIN
	ALTER TABLE CompareMetrics
	ADD  StrFormula NVARCHAR(100) NULL
END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.12_SOCC_Q1.sql
		[PK_SOCMulti] ASC
	) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO

ALTER TABLE Auditlog ALTER COLUMN FieldName NVARCHAR(MAX) NULL

ALTER TABLE Artifacts ALTER COLUMN Artifact_Description NVARCHAR(MAX) NULL

-- Fixes for RMA Q2 2019
update CompareMetrics
	) ON [PRIMARY]
END
GO

ALTER TABLE Auditlog ALTER COLUMN FieldName NVARCHAR(MAX) NULL

ALTER TABLE Artifacts ALTER COLUMN Artifact_Description NVARCHAR(MAX) NULL

-- Fixes for RMA Q2 2019
update CompareMetrics
set [PK_Question_Cur1]=14210
,StrFormula='[3.8]'
SET SprocValidation = 'frmVal_SOCMultiselectWithText'
WHERE code='SOCMultiselectWithPct'

-- this is strictly cleanup
IF EXISTS (select * from syscolumns where object_name(id) = 'Artifacts' and name = 'FK_PK_Component')
BEGIN
	ALTER TABLE Artifacts
	DROP COLUMN FK_PK_Component 
END

--For reporting purposes, it will help to reference the group by name
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_QuestionGroups' and name = 'GroupName')
	DROP COLUMN FK_PK_Component 
END

--For reporting purposes, it will help to reference the group by name
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_QuestionGroups' and name = 'GroupName')
BEGIN
	ALTER TABLE fsma_QuestionGroups
	ADD [GroupName] VARCHAR(30) NULL
END

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME='CompareMetrics' AND COLUMN_NAME='PK_Question_Prev1' ) 
BEGIN
	ADD [GroupName] VARCHAR(30) NULL
END

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME='CompareMetrics' AND COLUMN_NAME='PK_Question_Prev1' ) 
BEGIN

	ALTER TABLE dbo.CompareMetrics
	ALTER COLUMN PK_Question_Prev1 INT NULL
END
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME='CompareMetrics' AND COLUMN_NAME='PK_Question_Cur1' ) 
BEGIN

	ALTER TABLE dbo.CompareMetrics
	ALTER COLUMN PK_Question_Prev1 INT NULL
END
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME='CompareMetrics' AND COLUMN_NAME='PK_Question_Cur1' ) 
BEGIN

	ALTER TABLE dbo.CompareMetrics
	ALTER COLUMN PK_Question_Cur1 INT NULL
END
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME='CompareMetrics' AND COLUMN_NAME='StrFormula' ) 
BEGIN

	ALTER TABLE dbo.CompareMetrics
	ALTER COLUMN PK_Question_Cur1 INT NULL
END
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME='CompareMetrics' AND COLUMN_NAME='StrFormula' ) 
BEGIN

	ALTER TABLE dbo.CompareMetrics
	ALTER COLUMN StrFormula NVarchar(500) NULL
END


GO




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.13_BOD_CIO.sql
VALUES('RemIssued', 'Bod Admin Issued Rem Plan', 'E', 'H', 'CSemailRemIssued.htm',1)
END


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CompareMetrics' and COLUMN_NAME='PK_Capability')
BEGIN
	ALTER TABLE CompareMetrics
	ADD  PK_Capability INT DEFAULT NULL
END

ALTER TABLE [CompareMetrics] ALTER COLUMN CompCalcCode NVARCHAR(50) NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CompareMetrics' and COLUMN_NAME='PK_Capability')
BEGIN
	ALTER TABLE CompareMetrics
	ADD  PK_Capability INT DEFAULT NULL
END

ALTER TABLE [CompareMetrics] ALTER COLUMN CompCalcCode NVARCHAR(50) NULL


GO

IF NOT EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[HVA]'))




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.13_CIO_RMA_Q3.sql
GO

----***  RMA Metrics Comparison ***

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CompareMetrics' and COLUMN_NAME='StrFormula')
BEGIN
	ALTER TABLE CompareMetrics
	ADD  StrFormula NVARCHAR(100) NULL
END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.16_HVA_BOD_SAOP.sql



--*****BOD 19-02****----
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'BOD' AND column_name=N'FalsePositive')
BEGIN
	ALTER TABLE BOD
	ADD FalsePositive  BIT NULL 
END
GO
DELETE FROM ArtifactTypes WHERE PK_ArtifactType IN (35)
IF NOT EXISTS(SELECT * FROM ArtifactTypes WHERE PK_ArtifactType = 35)
UPDATE ArtifactTypes
SET ArtifactTypeDescription = 'BOD False-Positive'
WHERE PK_ArtifactType = 35

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' AND column_name=N'FK_PK_Component')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	ADD FK_PK_Component  INT NULL 
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' AND column_name=N'FK_PK_Component')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	ADD FK_PK_Component  INT NULL 
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' AND column_name=N'FK_PK_Component')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	DROP COLUMN FK_PK_Component 
END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' AND column_name=N'PK_BOD')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	DROP COLUMN FK_PK_Component 
END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactsToReportCycles' AND column_name=N'PK_BOD')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	ADD PK_BOD  INT NULL 
END

----------------------------------*** BOD 18-02 HVA START ***----------------------------------------------------------


----------------------------------*** BOD 18-02 HVA START ***----------------------------------------------------------


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_OrgSubmissions' and COLUMN_NAME='FK_PK_Component')
BEGIN
	ALTER TABLE fsma_OrgSubmissions
	ADD FK_PK_Component INT DEFAULT NULL
END







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.17.sql
UPDATE fsma_FormMaster 
SET SprocAppendix = 'cap_AppendixA_CIOQ32019'
WHERE FK_ReportingCycle = 72

-- Insert Email Codes for BOD notifications, when remediation is 1 day & 3 days overdue respectively

ALTER TABLE EMAIL_MASTER ALTER COLUMN EMAIL_DESCRIPTION NVARCHAR(200)
ALTER TABLE EMAIL_MASTER ALTER COLUMN EMAIL_CODE NVARCHAR(40)
ALTER TABLE AuditLog_EmailsSent ALTER COLUMN EMAIL_CODE NVARCHAR(40)
GO

IF NOT EXISTS (SELECT * FROM EMAIL_MASTER WHERE EMAIL_CODE = 'RemOverdueOneDay')
SET SprocAppendix = 'cap_AppendixA_CIOQ32019'
WHERE FK_ReportingCycle = 72

-- Insert Email Codes for BOD notifications, when remediation is 1 day & 3 days overdue respectively

ALTER TABLE EMAIL_MASTER ALTER COLUMN EMAIL_DESCRIPTION NVARCHAR(200)
ALTER TABLE EMAIL_MASTER ALTER COLUMN EMAIL_CODE NVARCHAR(40)
ALTER TABLE AuditLog_EmailsSent ALTER COLUMN EMAIL_CODE NVARCHAR(40)
GO

IF NOT EXISTS (SELECT * FROM EMAIL_MASTER WHERE EMAIL_CODE = 'RemOverdueOneDay')
BEGIN
WHERE FK_ReportingCycle = 72

-- Insert Email Codes for BOD notifications, when remediation is 1 day & 3 days overdue respectively

ALTER TABLE EMAIL_MASTER ALTER COLUMN EMAIL_DESCRIPTION NVARCHAR(200)
ALTER TABLE EMAIL_MASTER ALTER COLUMN EMAIL_CODE NVARCHAR(40)
ALTER TABLE AuditLog_EmailsSent ALTER COLUMN EMAIL_CODE NVARCHAR(40)
GO

IF NOT EXISTS (SELECT * FROM EMAIL_MASTER WHERE EMAIL_CODE = 'RemOverdueOneDay')
BEGIN
	INSERT INTO EMAIL_MASTER(EMAIL_CODE, EMAIL_DESCRIPTION ,TRIGGERED_BY , OUTPUT_TYPE, Output_Template, IsActive)




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.18_AAPS.sql
	  FROM information_schema.columns 
	WHERE table_name = 'RMAIncidents'
	AND column_name = 'PK_OrgSubmission' ), '') 
	 
IF @RMAOrgSubCOL =  '' 	 
BEGIN
  ALTER TABLE RMAIncidents ADD PK_OrgSubmission INT NULL
END
GO

IF NOT EXISTS (SELECT * FROM RMAIncidents WHERE FiscalYear = 2019)
BEGIN

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='Component List'
  AND COLUMN_NAME='logo_pathfile'
  )
BEGIN
	ALTER TABLE [Component List]
	ADD logo_pathfile VARCHAR(200)
END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.1_Q218.sql
	END
GO


IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_SharedService' and name = 'MOUDateNew')
BEGIN
	ALTER TABLE [fsma_SharedService]
	ADD [MOUDateNew] DATE
END
Go

UPDATE fsma_SharedService SET MOUDateNew = [MOUDate]
END
Go

UPDATE fsma_SharedService SET MOUDateNew = [MOUDate]
 

ALTER TABLE fsma_SharedService
ALTER COLUMN [MOUDate] DATE



UPDATE [df_CPE_GroupValues]
-- wrong question type
UPDATE fsma_Questions
SET FK_QuestionType = 35
WHERE PK_Question = 10805


ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceProvider] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceOffering] NVARCHAR(1000)

WHERE PK_Question = 10805


ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceProvider] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceOffering] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SubAgency] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceProvider] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceOffering] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SubAgency] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [Service] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SharedServiceOffering] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SubAgency] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [Service] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [ServiceType] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [SubAgency] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [Service] NVARCHAR(1000)

ALTER TABLE fsma_SharedService
ALTER COLUMN [ServiceType] NVARCHAR(1000)


-- BEGIN DF 1.2 tables

-- BEGIN DF 1.2 tables

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_CVEscanResults'
  AND COLUMN_NAME='PK_ScanTypeDetail'
)
ALTER TABLE df_CVEscanResults
ADD PK_ScanTypeDetail INT NULL 
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_CPEscanResults'
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_CPEscanResults'
  AND COLUMN_NAME='PK_ScanTypeDetail'
)
ALTER TABLE df_CPEscanResults
ADD PK_ScanTypeDetail INT NULL 
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_ScanTypeDetail'
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='df_ScanTypeDetail'
  AND COLUMN_NAME='SystemCount2'
)
ALTER TABLE df_ScanTypeDetail
ADD SystemCount2 BIGINT NULL 
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_df_SoftwarePatches_df_ScanTypeDetail]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_SoftwarePatches]'))
ALTER TABLE [dbo].[df_SoftwarePatches] DROP CONSTRAINT [FK_df_SoftwarePatches_df_ScanTypeDetail]
)
ALTER TABLE df_ScanTypeDetail
ADD SystemCount2 BIGINT NULL 
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_df_SoftwarePatches_df_ScanTypeDetail]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_SoftwarePatches]'))
ALTER TABLE [dbo].[df_SoftwarePatches] DROP CONSTRAINT [FK_df_SoftwarePatches_df_ScanTypeDetail]
GO

/****** Object:  Table [dbo].[df_SoftwarePatches]    Script Date: 10/13/2017 00:34:27 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[df_SoftwarePatches]') AND type in (N'U'))
DROP TABLE [dbo].[df_SoftwarePatches]
	[PK_SoftwarePatches] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[df_SoftwarePatches]  WITH CHECK ADD  CONSTRAINT [FK_df_SoftwarePatches_df_ScanTypeDetail] FOREIGN KEY([PK_ScanTypeDetail])
REFERENCES [dbo].[df_ScanTypeDetail] ([PK_ScanTypeDetail])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[df_SoftwarePatches]  WITH CHECK ADD  CONSTRAINT [FK_df_SoftwarePatches_df_ScanTypeDetail] FOREIGN KEY([PK_ScanTypeDetail])
REFERENCES [dbo].[df_ScanTypeDetail] ([PK_ScanTypeDetail])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[df_SoftwarePatches] CHECK CONSTRAINT [FK_df_SoftwarePatches_df_ScanTypeDetail]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_df_SoftwarePatchesCVEs_df_SoftwarePatches]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_SoftwarePatchesCVEs]'))
ALTER TABLE [dbo].[df_SoftwarePatchesCVEs] DROP CONSTRAINT [FK_df_SoftwarePatchesCVEs_df_SoftwarePatches]

ALTER TABLE [dbo].[df_SoftwarePatches] CHECK CONSTRAINT [FK_df_SoftwarePatches_df_ScanTypeDetail]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_df_SoftwarePatchesCVEs_df_SoftwarePatches]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_SoftwarePatchesCVEs]'))
ALTER TABLE [dbo].[df_SoftwarePatchesCVEs] DROP CONSTRAINT [FK_df_SoftwarePatchesCVEs_df_SoftwarePatches]
GO


/****** Object:  Table [dbo].[df_SoftwarePatchesCVEs]    Script Date: 10/13/2017 00:35:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[df_SoftwarePatchesCVEs]') AND type in (N'U'))
	[PK_SoftwarePatchesCVEs] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[df_SoftwarePatchesCVEs]  WITH CHECK ADD  CONSTRAINT [FK_df_SoftwarePatchesCVEs_df_SoftwarePatches] FOREIGN KEY([PK_SoftwarePatches])
REFERENCES [dbo].[df_ScanTypeDetail] ([PK_ScanTypeDetail])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[df_SoftwarePatchesCVEs]  WITH CHECK ADD  CONSTRAINT [FK_df_SoftwarePatchesCVEs_df_SoftwarePatches] FOREIGN KEY([PK_SoftwarePatches])
REFERENCES [dbo].[df_ScanTypeDetail] ([PK_ScanTypeDetail])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[df_SoftwarePatchesCVEs] CHECK CONSTRAINT [FK_df_SoftwarePatchesCVEs_df_SoftwarePatches]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_df_UnsupportedSoftware_df_ScanTypeDetail]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_UnsupportedSoftware]'))
ALTER TABLE [dbo].[df_UnsupportedSoftware] DROP CONSTRAINT [FK_df_UnsupportedSoftware_df_ScanTypeDetail]

ALTER TABLE [dbo].[df_SoftwarePatchesCVEs] CHECK CONSTRAINT [FK_df_SoftwarePatchesCVEs_df_SoftwarePatches]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_df_UnsupportedSoftware_df_ScanTypeDetail]') AND parent_object_id = OBJECT_ID(N'[dbo].[df_UnsupportedSoftware]'))
ALTER TABLE [dbo].[df_UnsupportedSoftware] DROP CONSTRAINT [FK_df_UnsupportedSoftware_df_ScanTypeDetail]
GO

/****** Object:  Table [dbo].[df_UnsupportedSoftware]    Script Date: 10/13/2017 00:35:36 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[df_UnsupportedSoftware]') AND type in (N'U'))
DROP TABLE [dbo].[df_UnsupportedSoftware]
	[PK_UnsupportedSoftware] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[df_UnsupportedSoftware]  WITH CHECK ADD  CONSTRAINT [FK_df_UnsupportedSoftware_df_ScanTypeDetail] FOREIGN KEY([PK_ScanTypeDetail])
REFERENCES [dbo].[df_ScanTypeDetail] ([PK_ScanTypeDetail])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[df_UnsupportedSoftware]  WITH CHECK ADD  CONSTRAINT [FK_df_UnsupportedSoftware_df_ScanTypeDetail] FOREIGN KEY([PK_ScanTypeDetail])
REFERENCES [dbo].[df_ScanTypeDetail] ([PK_ScanTypeDetail])
ON UPDATE CASCADE
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[df_UnsupportedSoftware] CHECK CONSTRAINT [FK_df_UnsupportedSoftware_df_ScanTypeDetail]
GO

-- END DF 1.2 tables






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.20_RMA.sql

GO

-- BEGIN UPDATE CPE fields to larger

-- update CPE import temp table
ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN title NVARCHAR(250) NULL

-- BEGIN UPDATE CPE fields to larger

-- update CPE import temp table
ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN title NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN Part NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN title NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN Part NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN vendor NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN title NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN Part NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN vendor NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN product NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN Part NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN vendor NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN product NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN [version] NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN vendor NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN product NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN [version] NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN deprecated_by NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN product NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN [version] NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN deprecated_by NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN deprecation_date NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN [version] NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN deprecated_by NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN deprecation_date NVARCHAR(250) NULL

--update CPE child tables
ALTER TABLE [df_AntivirusScanResults]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  ALTER COLUMN deprecated_by NVARCHAR(250) NULL

ALTER TABLE [df_NIST_CPE_ImportTemp]
  ALTER COLUMN deprecation_date NVARCHAR(250) NULL

--update CPE child tables
ALTER TABLE [df_AntivirusScanResults]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

  ALTER COLUMN deprecation_date NVARCHAR(250) NULL

--update CPE child tables
ALTER TABLE [df_AntivirusScanResults]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_AntivirusScanResults]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_CPEscanResults
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_CPEscanResults
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_UnsupportedSoftware
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE [df_CPE_GroupLinks]
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_CPEscanResults
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_UnsupportedSoftware
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE fsma_OperatingSystemsDefined
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE df_CPEscanResults
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_UnsupportedSoftware
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE fsma_OperatingSystemsDefined
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE fsma_OperatingSystemsPercentage
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE df_UnsupportedSoftware
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE fsma_OperatingSystemsDefined
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE fsma_OperatingSystemsPercentage
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE fsma_OsSecureConfigManagement
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL  

ALTER TABLE fsma_OperatingSystemsDefined
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL
  
ALTER TABLE fsma_OperatingSystemsPercentage
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE fsma_OsSecureConfigManagement
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL  

ALTER TABLE cpetext
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL  

ALTER TABLE fsma_OperatingSystemsPercentage
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL

ALTER TABLE fsma_OsSecureConfigManagement
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL  

ALTER TABLE cpetext
  ALTER COLUMN PK_SCAP_CPE NVARCHAR(250) NULL  

--drop table for new nist_cpe_details

DROP TABLE [dbo].[df_NIST_CPE_Details]
	[ProductNormalize] [nvarchar](250) NULL,
	[NS_Category] [int] NULL,
	[deprecated_by] [nvarchar](250) NULL,
	[deprecation_date] [nvarchar](250) NULL
) ON [PRIMARY]

ALTER TABLE [df_NIST_CPE_Details]
ADD CONSTRAINT [PK_df_NIST_CPE_Details] PRIMARY KEY ([PK_SCAP_CPE]);

-- END UPDATE CPE fields to larger






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.21_POAM.sql
END	 
GO 

-- NEED TO ASSOCIATE EXISTING 2019-A-HVA Datacall submissions to new HVA LIST
--IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_OrgSubmissions' and COLUMN_NAME='FK_PK_HVA')
--BEGIN
--	ALTER TABLE fsma_OrgSubmissions
--	ADD FK_PK_HVA INT NULL
--END



	VALUES ('Bod1802Submitted','[BOD 18-02] Agency Submission','E','H','Bod1802EmailTemplate.htm',1)
END	
GO

IF  EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_OrgSubmissions' and COLUMN_NAME='FK_PK_HVA')
BEGIN
	ALTER TABLE fsma_OrgSubmissions
	DROP COLUMN FK_PK_HVA 
END
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_OrgSubmissions' and COLUMN_NAME='FK_LINK')
BEGIN
	ALTER TABLE fsma_OrgSubmissions
BEGIN
	ALTER TABLE fsma_OrgSubmissions
	DROP COLUMN FK_PK_HVA 
END
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_OrgSubmissions' and COLUMN_NAME='FK_LINK')
BEGIN
	ALTER TABLE fsma_OrgSubmissions
	ADD FK_LINK INT
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_HVAs' and COLUMN_NAME='FK_LINK')
BEGIN
	ALTER TABLE fsma_OrgSubmissions
	ADD FK_LINK INT
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_HVAs' and COLUMN_NAME='FK_LINK')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD FK_LINK INT NULL
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_Milestones' and COLUMN_NAME='IsActive')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD FK_LINK INT NULL
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_Milestones' and COLUMN_NAME='IsActive')
BEGIN
	ALTER TABLE fsma_Milestones
	ADD IsActive BIT DEFAULT(1)
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_Activities' and COLUMN_NAME='IsActive')
BEGIN
	ALTER TABLE fsma_Milestones
	ADD IsActive BIT DEFAULT(1)
END
GO
IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_Activities' and COLUMN_NAME='IsActive')
BEGIN
	ALTER TABLE fsma_Activities
	ADD IsActive BIT DEFAULT(1)
END
GO

/* ==========  END POAM SCHEMA */
GO  



IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='BOD'  AND COLUMN_NAME='Comments')
BEGIN
	ALTER TABLE BOD ADD [Comments] VARCHAR(1000)
END 
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='BOD'  AND COLUMN_NAME='AddedBy')
BEGIN
	ALTER TABLE BOD ADD [Comments] VARCHAR(1000)
END 
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='BOD'  AND COLUMN_NAME='AddedBy')
BEGIN
	ALTER TABLE BOD ADD [AddedBy] VARCHAR(50)
END 
GO

UPDATE BOD
SET AddedBy = 'ADMIN'
SET AddedBy = 'ADMIN'
WHERE AddedBY IS NULL
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='Artifacts'  AND COLUMN_NAME='PK_OrgSubmission')
BEGIN
	--ALTER TABLE Artifacts DROP COLUMN [PK_OrgSubmission]
	ALTER TABLE Artifacts ADD [PK_OrgSubmission] INT NULL
END 
GO


WHERE AddedBY IS NULL
GO

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='Artifacts'  AND COLUMN_NAME='PK_OrgSubmission')
BEGIN
	--ALTER TABLE Artifacts DROP COLUMN [PK_OrgSubmission]
	ALTER TABLE Artifacts ADD [PK_OrgSubmission] INT NULL
END 
GO


IF EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='Artifacts'  AND COLUMN_NAME='FK_LINK2')
END 
GO


IF EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='Artifacts'  AND COLUMN_NAME='FK_LINK2')
BEGIN
	--ALTER TABLE Artifacts ADD [FK_LINK2] INT NULL
	ALTER TABLE Artifacts DROP COLUMN [FK_LINK2] 
END 
GO

 IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='isActive'  )
GO


IF EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='Artifacts'  AND COLUMN_NAME='FK_LINK2')
BEGIN
	--ALTER TABLE Artifacts ADD [FK_LINK2] INT NULL
	ALTER TABLE Artifacts DROP COLUMN [FK_LINK2] 
END 
GO

 IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='isActive'  )
BEGIN
	ALTER TABLE Artifacts DROP COLUMN [FK_LINK2] 
END 
GO

 IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='isActive'  )
BEGIN
	ALTER TABLE fsma_POAMS ADD  isActive   BIT DEFAULT(1)
END 
 
IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='AgStatusReport'  )
BEGIN
	ALTER TABLE fsma_POAMS ADD [AgStatusReport] NVARCHAR(4000)
BEGIN
	ALTER TABLE fsma_POAMS ADD  isActive   BIT DEFAULT(1)
END 
 
IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='AgStatusReport'  )
BEGIN
	ALTER TABLE fsma_POAMS ADD [AgStatusReport] NVARCHAR(4000)
END 
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='AdminComments'  )
BEGIN
	ALTER TABLE fsma_POAMS ADD [AdminComments] NVARCHAR(4000)
END
IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='AgStatusReport'  )
BEGIN
	ALTER TABLE fsma_POAMS ADD [AgStatusReport] NVARCHAR(4000)
END 
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='fsma_POAMS'  AND COLUMN_NAME='AdminComments'  )
BEGIN
	ALTER TABLE fsma_POAMS ADD [AdminComments] NVARCHAR(4000)
END
GO   
--CSHELP-2544 not showing up on questions query
UPDATE fsma_Questions
SET FK_QuestionType = 2 
WHERE PK_Question in (17070, 17048)
GO


IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='BOD'  AND COLUMN_NAME='AdminComments')
BEGIN
	ALTER TABLE BOD ADD [AdminComments] NVARCHAR(4000)
END
GO 


IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='BOD_Snapshot'  AND COLUMN_NAME='AdminComments'  )
END
GO 


IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]  WHERE TABLE_NAME='BOD_Snapshot'  AND COLUMN_NAME='AdminComments'  )
BEGIN
	ALTER TABLE BOD_Snapshot ADD [AdminComments] NVARCHAR(4000)
END
GO   







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.27_2020_A_EINSTEIN_SAOP.sql


--------------------------------------------------
--	DB_Update_7.27_2020_A_EINSTEIN_SAOP.sql	 	 												 
--------------------------------------------------

ALTER TABLE cq_Query 
ALTER COLUMN [Query_Description] NVARCHAR(300)

-- update HVA POC capitalization
UPDATE fsma_ContactTitles
SET Description = 'HVA POC'

IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_ContactTitles'
  AND COLUMN_NAME='isNC'
  )
BEGIN
	ALTER TABLE fsma_ContactTitles
	ADD isNC BIT NULL
END

GO

-- add PK_NCSite to link a contact to a site
IF EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_Contacts'
  AND COLUMN_NAME='PK_NCSite'
  )
BEGIN
	ALTER TABLE fsma_Contacts
	DROP COLUMN PK_NCSite
END

GO

-- add PK_NCSite to link a contact to a site
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_Contacts'
  AND COLUMN_NAME='PK_OrgSubmission'
  )
BEGIN
	ALTER TABLE fsma_Contacts
	ADD PK_OrgSubmission INT NULL
END

GO

-- add Title for NC contacts
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='fsma_Contacts'
  AND COLUMN_NAME='Title'
  )
BEGIN
	ALTER TABLE fsma_Contacts
	ADD Title NVARCHAR(100) NULL
END

GO

	) ON [PRIMARY]  
END
ELSE --CS-7660 changes
BEGIN
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='Address1')
		BEGIN
			ALTER TABLE NCSite
			ADD [Address1] NVARCHAR(500)
		END	 

	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='Address2')
		BEGIN
			ALTER TABLE NCSite
			ADD [Address1] NVARCHAR(500)
		END	 

	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='Address2')
		BEGIN
			ALTER TABLE NCSite
			ADD [Address2] NVARCHAR(200)
		END	 
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='IsArchived')
		BEGIN
			ALTER TABLE NCSite
		BEGIN
			ALTER TABLE NCSite
			ADD [Address2] NVARCHAR(200)
		END	 
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='IsArchived')
		BEGIN
			ALTER TABLE NCSite
			ADD [IsArchived] BIT DEFAULT 0
		END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='DateArchived')
		BEGIN
			ALTER TABLE NCSite
		BEGIN
			ALTER TABLE NCSite
			ADD [IsArchived] BIT DEFAULT 0
		END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='DateArchived')
		BEGIN
			ALTER TABLE NCSite
			ADD [DateArchived] DATETIME NULL
		END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='DateFirstCreated')
		BEGIN
			ALTER TABLE NCSite
		BEGIN
			ALTER TABLE NCSite
			ADD [DateArchived] DATETIME NULL
		END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='DateFirstCreated')
		BEGIN
			ALTER TABLE NCSite
			ADD [DateFirstCreated] DATETIME NULL
		END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCSite
		BEGIN
			ALTER TABLE NCSite
			ADD [DateFirstCreated] DATETIME NULL
		END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCSite
		ADD UserId INT NULL
	END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='IsActive')
		BEGIN
			ALTER TABLE NCSite
	BEGIN
		ALTER TABLE NCSite
		ADD UserId INT NULL
	END
	IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='IsActive')
		BEGIN
			ALTER TABLE NCSite
			ADD IsActive INT NULL
		END

	END
GO
		[PK_NCPublicIP] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCPublicIP' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCPublicIP
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCPublicIP' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCPublicIP
	BEGIN
		ALTER TABLE NCPublicIP
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCPublicIP' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCPublicIP
		ADD IsActive INT NULL
	END

-- DROP TABLE NCDarkIP
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NCDarkIP'))  
		[PK_NCDarkIP] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCDarkIP' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCDarkIP
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCDarkIP' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCDarkIP
	BEGIN
		ALTER TABLE NCDarkIP
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCDarkIP' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCDarkIP
		ADD IsActive INT NULL
	END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NCBGP'))  
BEGIN 
		[PK_NCBGP] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCBGP' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCBGP
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCBGP' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCBGP
	BEGIN
		ALTER TABLE NCBGP
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCBGP' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCBGP
		ADD IsActive INT NULL
	END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NCSpecialMonitoring'))  
BEGIN 
		[PK_NCSpecialMonitoring] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSpecialMonitoring' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCSpecialMonitoring
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSpecialMonitoring' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCSpecialMonitoring
	BEGIN
		ALTER TABLE NCSpecialMonitoring
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSpecialMonitoring' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCSpecialMonitoring
		ADD IsActive INT NULL
	END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NCUnmonitoredTraffic'))  
BEGIN 
	CREATE TABLE [dbo].[NCUnmonitoredTraffic](
		[PK_NCUnmonitoredTraffic] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCUnmonitoredTraffic' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCUnmonitoredTraffic
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCUnmonitoredTraffic' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCUnmonitoredTraffic
	BEGIN
		ALTER TABLE NCUnmonitoredTraffic
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCUnmonitoredTraffic' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCUnmonitoredTraffic
		ADD IsActive INT NULL
	END

DELETE FROM fsma_QuestionTypes WHERE PK_QuestionTypeId in (73, 74, 75, 76, 77)
IF (NOT EXISTS (SELECT * FROM fsma_QuestionTypes WHERE PK_QuestionTypeId in (73, 74, 75, 76, 77)))
		[PK_NCTaps] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCTaps' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCTaps
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCTaps' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCTaps
	BEGIN
		ALTER TABLE NCTaps
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCTaps' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCTaps
		ADD IsActive INT NULL
	END

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NCVLAN'))  
BEGIN 
		[PK_NCVLAN] ASC
	)  
	) ON [PRIMARY]  
END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCVLAN' AND COLUMN_NAME='UserId')
	BEGIN
		ALTER TABLE NCVLAN
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCVLAN' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCVLAN
	BEGIN
		ALTER TABLE NCVLAN
		ADD UserId INT NULL
	END
IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCVLAN' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCVLAN
		ADD IsActive INT NULL
	END
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'NCVNATInfo'))  
BEGIN 
	CREATE TABLE [dbo].NCVNATInfo(
	 CONSTRAINT [PK_NCVNATInfo] PRIMARY KEY CLUSTERED 
	(
		[PK_NCVNATInfo] ASC
	)  
	) ON [PRIMARY]  
END
ALTER TABLE NCVNATInfo ALTER COLUMN IPAddress NVARCHAR(500) -- for cidrs

DELETE FROM fsma_QuestionTypes WHERE PK_QuestionTypeId in (78, 79, 80)
IF (NOT EXISTS (SELECT * FROM fsma_QuestionTypes WHERE PK_QuestionTypeId in (78, 79, 80)))
BEGIN  
	SET IDENTITY_INSERT fsma_QuestionTypes ON
GO

UPDATE fsma_QuestionDependencies
SET Question_Master_CodeValue_ToMakeRequired = 'N'
WHERE FK_Question = 20992

ALTER TABLE NCSITE
ALTER COLUMN State INT


DECLARE @PickListType_PK INT = 178
 
--CSHELP-2637 deactivate this contact on fsma_ContactTitles - 9/17/2020
UPDATE fsma_ContactTitles SET [Required] = 0 WHERE [Description] = 'CyberHygiene POC (Per BOD 19-02)'


IF EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS] WHERE TABLE_NAME='NCSite' AND COLUMN_NAME='IsActive')
	BEGIN
		ALTER TABLE NCSite
		 DROP COLUMN [IsActive]
	END







D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.28_BODPOAM.sql



/* -------------------------------------------------------------------------------------------------------------------------
	DB_Update_7.28_BODPOAM.sql	 	 												 
------------------------------------------------------------------------------------------------------------------------- */
ALTER TABLE [BOD]
ALTER COLUMN [OtherConstraint] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD]
ALTER COLUMN [Comments] NVARCHAR(2000) NULL
	DB_Update_7.28_BODPOAM.sql	 	 												 
------------------------------------------------------------------------------------------------------------------------- */
ALTER TABLE [BOD]
ALTER COLUMN [OtherConstraint] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD]
ALTER COLUMN [Comments] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD_Snapshot]
ALTER COLUMN [OtherConstraint] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD]
ALTER COLUMN [Comments] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD_Snapshot]
ALTER COLUMN [OtherConstraint] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD_Snapshot]
ALTER COLUMN [Comments] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD_Snapshot]
ALTER COLUMN [OtherConstraint] NVARCHAR(2000) NULL
GO

ALTER TABLE [BOD_Snapshot]
ALTER COLUMN [Comments] NVARCHAR(2000) NULL
GO

UPDATE fsma_DataCall
SET Description = 'BOD 19-02'
SET Description = 'BOD 18-02'
WHERE PK_DataCall = 12


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='EscalationLevel')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD EscalationLevel INT
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='CloseOutSignature')
	ADD EscalationLevel INT
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='CloseOutSignature')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD CloseOutSignature BIT NULL
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='RemPlanSignature')
	ADD CloseOutSignature BIT NULL
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='RemPlanSignature')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD RemPlanSignature BIT NULL 
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='Designation')
	ADD RemPlanSignature BIT NULL 
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='Designation')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD Designation INT
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='RemSchedule')
	ADD Designation INT
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='RemSchedule')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD RemSchedule INT
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='OffScheduleReason')
	ADD RemSchedule INT
END
GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_POAMS' and COLUMN_NAME='OffScheduleReason')
BEGIN
	ALTER TABLE fsma_POAMS
	ADD OffScheduleReason INT
END
GO



IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='AuditLog_EmailsSent'
  AND COLUMN_NAME='EmailSubject'
  )
BEGIN
	ALTER TABLE AuditLog_EmailsSent
	ADD [EmailSubject] NVARCHAR(400) NULL
END

GO


IF NOT EXISTS(SELECT *  FROM [INFORMATION_SCHEMA].[COLUMNS]
  WHERE TABLE_NAME='AuditLog_EmailsSent'
  AND COLUMN_NAME='EmailBody'
  )
BEGIN
	ALTER TABLE AuditLog_EmailsSent
	ADD [EmailBody] NVARCHAR(MAX) NULL
END

GO

BEGIN
	DROP TABLE wf_UsersToAccessCodesRequests
END

GO

ALTER TABLE NCUnmonitoredTraffic ALTER COLUMN IPAddress NVARCHAR(500) -- FOR CIDR IPv6

ALTER TABLE cq_Query ALTER COLUMN Query_Comments NVARCHAR(MAX) 


--- POAM Assessment Findings Picklist --- 
END

GO

ALTER TABLE NCUnmonitoredTraffic ALTER COLUMN IPAddress NVARCHAR(500) -- FOR CIDR IPv6

ALTER TABLE cq_Query ALTER COLUMN Query_Comments NVARCHAR(MAX) 


--- POAM Assessment Findings Picklist --- 
DECLARE @PickListType_PK INT = 179
DECLARE @PK_PickList INT = 3628 



IF NOT EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]
	WHERE TABLE_NAME='fsma_POAMS' AND COLUMN_NAME='AssmtFinding')
BEGIN
	ALTER TABLE fsma_POAMS ADD [AssmtFinding] INT NULL
END 
GO

IF EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]
	WHERE TABLE_NAME='fsma_POAMS' AND COLUMN_NAME='AssmtTitle')
END 
GO

IF EXISTS(SELECT * FROM [INFORMATION_SCHEMA].[COLUMNS]
	WHERE TABLE_NAME='fsma_POAMS' AND COLUMN_NAME='AssmtTitle')
BEGIN
	ALTER TABLE fsma_POAMS DROP COLUMN AssmtTitle; 
END 
GO
 
 -- create 5 days prior
IF NOT EXISTS (SELECT * FROM EMAIL_MASTER WHERE EMAIL_CODE = 'Bod1802FiveDaysPrior')




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.3_RMA.sql
	FROM fsma_OrgSubmissions o
	WHERE PK_Form = '2018-Q2-CIO'
END

IF NOT EXISTS (select * from syscolumns where object_name(id) = 'CompareMetrics' and name = 'CompOperator')
BEGIN
	ALTER TABLE CompareMetrics
	ADD CompOperator NVARCHAR(500)
END
Go


END
Go


IF NOT EXISTS (select * from syscolumns where object_name(id) = 'CompareMetrics' and name = 'FK_RiskDomain')
BEGIN
	ALTER TABLE CompareMetrics
	ADD FK_RiskDomain INT
END
Go


--10	Evaluation and Improvement
--11	Planning and Testing
--15	System-level Response
--13	Back-Up Capacity


ALTER TABLE CompareMetrics
ALTER COLUMN ThresholdValue NVARCHAR(50)

DELETE FROM CompareMetrics WHERE PK_CompareMetrics > 310

INSERT INTO [dbo].[CompareMetrics] (PK_CompareMetrics, Comp_ID, PK_Question_Prev1, PK_Question_Prev2, PK_Question_Prev3, PK_Question_Cur1, PK_Question_Cur2, PK_Question_Cur3, CompCalcCode, ThresholdValue, ThresholdLow, sortpos, ComparisonDescription,CompOperator,FK_RiskDomain) VALUES 

/* temporary field, should be removed  for next version */

IF Not EXISTS(SELECT 1 FROM sys.columns 
          WHERE Name = N'PK_CloudService'
          AND Object_ID = Object_ID(N'dbo.fsma_SharedService'))
ALTER TABLE fsma_SharedService
ADD  PK_CloudService int

GO

UPDATE fsma_SharedService




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.4_BOD_CIO.sql



--CS-5736 appendix A tables to address new capabilities
IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('cap_Capability') AND name = 'PK_Strategy' )  
BEGIN
ALTER TABLE cap_Capability
	ADD PK_Strategy INT NULL
END
GO

UPDATE cap_Capability 
END
GO


IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_OrgSubmissions' and name = 'RMAOverrideStatus')
BEGIN
ALTER TABLE fsma_OrgSubmissions
ADD RMAOverrideStatus [nvarchar](10) NULL
END

GO

  UPDATE fsma_Contacts
  SET FirstName = NULL
  WHERE FirstName =  '** Required **'

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_Contacts' AND Column_Name = 'MiddleName')
BEGIN
	ALTER TABLE [fsma_Contacts]
	DROP COLUMN MiddleName
END


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'Component List' AND Column_Name = 'enableBOD')
	DROP COLUMN MiddleName
END


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'Component List' AND Column_Name = 'enableBOD')
BEGIN
	ALTER TABLE [Component List]
	ADD enableBOD INT NULL
END

GO


/* temporary field, should be removed  for next version */

--IF Not EXISTS(SELECT 1 FROM sys.columns 
--          WHERE Name = N'PK_CloudService'
--          AND Object_ID = Object_ID(N'dbo.fsma_SharedService'))
--ALTER TABLE fsma_SharedService
--ADD  PK_CloudService int

--GO

--UPDATE fsma_SharedService
--UPDATE fsma_SharedService
--SET PK_CloudService = PK_SharedService
/**/


-- error log userid is too small, set it equal to the CSAMusers UserID value
ALTER TABLE ErrorLog ALTER COLUMN UserID nvarchar(256);

--CS-5818 
DECLARE @PermPK AS INT
DECLARE @RolePK AS INT

IF NOT EXISTS (
  SELECT * 
  FROM   sys.columns 
  WHERE  object_id = OBJECT_ID(N'[dbo].[CompareMetrics]') 
         AND name IN ('PK_Question_Prev4','PK_Question_Cur4'))
	BEGIN
ALTER TABLE [dbo].[CompareMetrics] ADD PK_Question_Prev4 INT, PK_Question_Cur4 INT
END

IF NOT EXISTS (SELECT * FROM PickListTypes WHERE UsageField = 'CapabilityStatus')
BEGIN
INSERT INTO PickListTypes




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.6.1.sql
SELECT PK_ArtifactType, 1 FROM ArtifactTypes WHERE PK_ArtifactType IN (9,1,2,6,8,3,4,5)


--DELETE FROM fsma_Contacts
--WHERE PK_ContactTitles IN (15,16)

ALTER TABLE fsma_ContactTitles
ALTER COLUMN [Description] NVARCHAR(300) NULL

GO

IF NOT EXISTS(SELECT * FROM fsma_contactTitles WHERE PK_ContactTitles = 15)




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.6.2.sql

--CS-6158 this nvarchar column need to dropped before a bit column is created. 
DECLARE @nacolType NVARCHAR(10)
SET @nacolType = (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_Contacts' AND COLUMN_NAME = 'NA')
IF @nacolType = 'nvarchar' 
BEGIN
	ALTER TABLE fsma_contacts
	DROP COLUMN NA;
END
GO


GO


/*CS-6157*/
IF NOT EXISTS(SELECT * FROM   INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'cq_Query' AND COLUMN_NAME = 'Query_comments') 
BEGIN
	ALTER TABLE cq_Query
	ADD Query_comments NVARCHAR(800)
END
-- standardizes the 2009 forms so we can use the same link
UPDATE fsma_FormMaster
SET InternalForm = 'FismaForms/CIOannual09_A.aspx', CrystalReportForm = 'Reports/CrystalReportsFiles/FISMASystemCountsReportbyOrg2009.rpt'
SET InternalForm = 'FismaForms/SAOPOannual09_A.aspx', CrystalReportForm = 'Reports/CrystalReportsFiles/AgencyPrivacyRpt.rpt'
WHERE PK_Form = '2009-A-SAO'

--CS-6156 a field to hold date in case a particular agency contact might need a change in verification period of less than a year (normal). 
IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('fsma_ContactTitles') AND name = 'ReqVerificationDate' )  
BEGIN
	ALTER TABLE [fsma_ContactTitles]
	ADD [ReqVerificationDate] datetime NULL 
END

IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('fsma_ContactTitles') AND name = 'NAfield' )  
BEGIN
	ALTER TABLE [fsma_ContactTitles]
	ADD [ReqVerificationDate] datetime NULL 
END

IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('fsma_ContactTitles') AND name = 'NAfield' )  
BEGIN
	ALTER TABLE [fsma_ContactTitles]
	ADD [NAfield] bit NOT NULL DEFAULT 0
END
GO

IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('fsma_Contacts') AND name = 'NA' )  
	ADD [NAfield] bit NOT NULL DEFAULT 0
END
GO

IF NOT EXISTS ( SELECT  *  FROM  syscolumns WHERE id = OBJECT_ID('fsma_Contacts') AND name = 'NA' )  
BEGIN
	ALTER TABLE [fsma_Contacts]
	ADD [NA] bit NOT NULL DEFAULT 0
END
GO

-- move status code for 2009 from [Component List] to fsma_OrgSubmissions




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.6_Dashboard.sql
IF EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashBoardToSubject]'))
	DROP TABLE [dsh_DashBoardToSubject]
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = 'Tile_Icon' AND OBJECT_ID = OBJECT_ID('dbo.dsh_PublicDashboards'))
	BEGIN
		ALTER TABLE dbo.dsh_PublicDashboards ADD
		Tile_Icon nvarchar(255) NULL
	END
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = 'chart_properties' AND OBJECT_ID = OBJECT_ID('dbo.dsh_Dashlets'))
		Tile_Icon nvarchar(255) NULL
	END
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = 'chart_properties' AND OBJECT_ID = OBJECT_ID('dbo.dsh_Dashlets'))
	BEGIN
		ALTER TABLE dbo.dsh_Dashlets ADD
		chart_properties nvarchar(MAX) NULL
	END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.6_SAOP.sql

-->> Grid fields in fsma_SAOPpiaCounts

IF NOT EXISTS(SELECT * FROM sys.columns WHERE [Name] = (N'SystemIdentify') AND Object_ID = Object_ID(N'dbo.fsma_SAOPpiaCounts'))
BEGIN

	ALTER TABLE fsma_SAOPpiaCounts
	ADD SystemIdentify INT --2b
	,SystemsAuthorized INT --2b
	,SystemsFIPS199 INT --2d
	,SystemsPlan INT --2e
	,SystemsAssess INT --2f
END

--CS-6094 
IF NOT EXISTS (select * from syscolumns where object_name(id) = 'fsma_SAOPpiaCounts' and name = 'StatusCode2')
BEGIN

	ALTER TABLE fsma_SAOPpiaCounts
	ADD StatusCode2 NVARCHAR(5) NULL 

END
GO

IF EXISTS (SELECT * FROM sys.tables WHERE object_id = OBJECT_ID(N'[dbo].[dsh_DashBoardToSubject]'))
	DROP TABLE [dsh_DashBoardToSubject]
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = 'Tile_Icon' AND OBJECT_ID = OBJECT_ID('dbo.dsh_PublicDashboards'))
	BEGIN
		ALTER TABLE dbo.dsh_PublicDashboards ADD
		Tile_Icon nvarchar(255) NULL
	END
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = 'chart_properties' AND OBJECT_ID = OBJECT_ID('dbo.dsh_Dashlets'))
		Tile_Icon nvarchar(255) NULL
	END
GO

IF NOT EXISTS(SELECT 1 FROM sys.columns WHERE Name = 'chart_properties' AND OBJECT_ID = OBJECT_ID('dbo.dsh_Dashlets'))
	BEGIN
		ALTER TABLE dbo.dsh_Dashlets ADD
		chart_properties nvarchar(MAX) NULL
	END
GO






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.7.sql


--//CS-6171
IF NOT EXISTS (select * from sys.objects where object_id=OBJECT_ID(N'[dbo].[CK_Artifacts_lastpdated]') and type in('D')  )
BEGIN
select 1
	ALTER TABLE Artifacts
	ADD CONSTRAINT CK_Artifacts_lastpdated DEFAULT getdate() FOR Last_Update
END

--//CSHELP-2158
UPDATE CompareMetrics




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.8_CIO_RMA.sql
END
Update cap_Capability SET  CapGoalTarget=4 where PK_Capability=20

--// CS-6280, Government-Wide
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CompareMetrics' and COLUMN_NAME='GovernmentWide')
BEGIN
	ALTER TABLE CompareMetrics
	ADD  GovernmentWide REAL DEFAULT NULL
END

----------------------------------CIO 2019 Q1/Annual BEGINS----------------------------------------------------------





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_7.9_RMA_Q1.sql



 --// CS-6280, Government-Wide
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RMAOverride' and COLUMN_NAME='RatingInitial')
BEGIN
	ALTER TABLE RMAOverride
	ADD  RatingInitial INT NULL
END

 --// CS-6280, Government-Wide
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormMaster' and COLUMN_NAME='CrystalReportForm3')
	ADD  RatingInitial INT NULL
END

 --// CS-6280, Government-Wide
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fsma_FormMaster' and COLUMN_NAME='CrystalReportForm3')
BEGIN
	ALTER TABLE fsma_FormMaster
	ADD  CrystalReportForm3 NVARCHAR(100) NULL
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_BODVDP_7.33.sql

UPDATE wf_Permissions
SET Access_Descript = 'BOD 18-02 POA&M View'
WHERE Access_Code = 'BOD1802POAMVIEW'

-- expand column for long descriptions
ALTER TABLE wf_Roles 
ALTER COLUMN RoleName NVARCHAR(100)


-- reorder admin access codes





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_CapGoal16_5.2.sql
		VALUES ('EM006','Submission with Exception', 'E','H','CSemailCapGoalException.htm',1)
	END
	
--CS-4560 Add a unique primary key/column to critical capability database table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TIC_Critical_Capability' AND COLUMN_NAME = 'PK_TICCriticalCapability')
	BEGIN
		ALTER TABLE [TIC_Critical_Capability]
		ADD PK_TICCriticalCapability int identity(1,1) not null	
	END
	GO
--CS-4560 Add a unique primary key/column to critical capability database table

	END
	GO
--CS-4560 Add a unique primary key/column to critical capability database table

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'Ct_PK_TICCriticalCapability') AND parent_object_id = OBJECT_ID(N'TIC_Critical_Capability'))
	BEGIN
		ALTER TABLE [TIC_Critical_Capability]
		ADD CONSTRAINT Ct_PK_TICCriticalCapability PRIMARY KEY (PK_TICCriticalCapability)
	END
	

--CS-4587 auditlog's FieldName column size was nvarchar(max). 
	END
	

--CS-4587 auditlog's FieldName column size was nvarchar(max). 
--select max(len(FieldName)) as lenname,FieldName from AuditLog group by FieldName order by max(len(FieldName)) desc 
--based the size on length value from query above
ALTER TABLE [AuditLog] 
ALTER COLUMN FieldName nvarchar(200) NULL

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AuditLog]') AND name = N'IX_TableName')
	BEGIN
		CREATE NONCLUSTERED INDEX [IX_TableName] ON [dbo].[AuditLog] 




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\DB_Update_CSIC_1.0.sql




IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_fsma_Questions_PK_QuestionTypeId]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[fsma_Questions] DROP CONSTRAINT [DF_fsma_Questions_PK_QuestionTypeId]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[FK_fsma_Questions_fsma_QuestionTypes_PickListTypes]') AND type = 'F')
BEGIN
ALTER TABLE [dbo].[fsma_Questions] DROP CONSTRAINT [DF_fsma_Questions_PK_QuestionTypeId]
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[FK_fsma_Questions_fsma_QuestionTypes_PickListTypes]') AND type = 'F')
BEGIN
ALTER TABLE dbo.fsma_Questions
	DROP CONSTRAINT FK_fsma_Questions_fsma_QuestionTypes_PickListTypes
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'FK_fsma_QuestionTypes_PickListTypes_PickListTypes') AND type = 'F')
	DROP CONSTRAINT FK_fsma_Questions_fsma_QuestionTypes_PickListTypes
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'FK_fsma_QuestionTypes_PickListTypes_PickListTypes') AND type = 'F')
BEGIN
ALTER TABLE dbo.fsma_QuestionTypes_PickListTypes
	DROP CONSTRAINT FK_fsma_QuestionTypes_PickListTypes_PickListTypes
END
GO

IF NOT EXISTS(SELECT * FROM fsma_QuestionGroups qg WHERE qg.PK_Form = '2011-A-IG')
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (35, N'Technology', NULL, N'INTERVALS', NULL)
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (36, N'Time Invervals', NULL, N'INTERVALS', NULL)
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (37, N'Time Intervals wQ', NULL, N'INTERVALS1', NULL)
    INSERT [dbo].[PickListTypes] ([PK_PickListType], [Description], [UsageTable], [UsageField], [UsageType]) VALUES (38, N'IT Security', NULL, N'ITSEC', NULL)
END

ALTER TABLE fsma_Questions ALTER COLUMN identifier_text NVARCHAR(50) NULL

IF NOT Exists(select * from sys.columns where Name = N'SystemsSSAU' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsSSAU  INT NULL
END

ALTER TABLE fsma_Questions ALTER COLUMN identifier_text NVARCHAR(50) NULL

IF NOT Exists(select * from sys.columns where Name = N'SystemsSSAU' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsSSAU  INT NULL
END

IF NOT Exists(select * from sys.columns where Name = N'SystemsCloudPub' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsSSAU  INT NULL
END

IF NOT Exists(select * from sys.columns where Name = N'SystemsCloudPub' and Object_ID = Object_ID(N'fsma_InventoryCAtotals'))  
BEGIN
    ALTER TABLE fsma_InventoryCAtotals
    ADD SystemsCloudPub  INT NULL
END

IF NOT Exists(select * from sys.columns where Name = N'FK_PickListType' and Object_ID = Object_ID(N'fsma_Questions'))  
BEGIN
    @newname = 'FK_PickListType',
    @objtype = 'COLUMN' 
    
END
GO

ALTER TABLE PickLists ALTER COLUMN DisplayValue NVARCHAR(MAX)

IF NOT Exists(select * from sys.columns where Name = N'FK_PickList' and Object_ID = Object_ID(N'fsma_Questions'))  
BEGIN
    ALTER TABLE fsma_Questions
    ADD FK_PickList  INT NULL
GO

ALTER TABLE PickLists ALTER COLUMN DisplayValue NVARCHAR(MAX)

IF NOT Exists(select * from sys.columns where Name = N'FK_PickList' and Object_ID = Object_ID(N'fsma_Questions'))  
BEGIN
    ALTER TABLE fsma_Questions
    ADD FK_PickList  INT NULL
  
END
GO

    INNER JOIN fsma_QuestionGroups QG ON Q.FK_QuestionGroup = QG.PK_QuestionGroup
    INNER JOIN fsma_FormPages P ON QG.FK_FormPage = P.PK_FormPage
    WHERE (FK_Form = '2011-A-SAOP' OR FK_Form = '2011-A-IG' OR FK_Form = '2011-A-CIO' OR FK_Form = '2011-A-MICRO') AND FK_QuestionType = 3) subToChange
ON Q.PK_Question = subToChange.PK_Question    


ALTER TABLE AuditLog ALTER COLUMN FieldName NVARCHAR(MAX)

ALTER TABLE AuditLog ALTER COLUMN [Change_Date] DATETIME


---Insert New Question Type for the Q3 Reporting CIO Cycle
    WHERE (FK_Form = '2011-A-SAOP' OR FK_Form = '2011-A-IG' OR FK_Form = '2011-A-CIO' OR FK_Form = '2011-A-MICRO') AND FK_QuestionType = 3) subToChange
ON Q.PK_Question = subToChange.PK_Question    


ALTER TABLE AuditLog ALTER COLUMN FieldName NVARCHAR(MAX)

ALTER TABLE AuditLog ALTER COLUMN [Change_Date] DATETIME


---Insert New Question Type for the Q3 Reporting CIO Cycle
---Insert new question type for the investment grid 
IF NOT EXISTS(SELECT * FROM fsma_QuestionTypes WHERE description='Cybersecurity training by bureau grid')
END


if NOT Exists(select * from sys.columns where Name = N'SprocValidation' and Object_ID = Object_ID(N'fsma_QuestionTypes')) 
BEGIN

	ALTER TABLE fsma_QuestionTypes
	ADD SprocValidation NVARCHAR(MAX)

END






D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\Scorecard Master Update-Rev2.sql

/*****************************************************************************/
/*** Update Table: [fsma_CIOannual09] ***/
/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_CIOannual09' AND column_name=N'q10_CA_Cost_1')
	BEGIN
		ALTER TABLE [fsma_CIOannual09] 
			ADD [q10_CA_Cost_1] int NULL,
		                    [q10_SysCAd_2] int NULL,
                                            [q10_CostSecure_3] int NULL,
                                            [q10_GovFTE_4] int NULL,
                                            [q10_ContFTE_5] int NULL
                                            [q10_GovFTE_4] int NULL,
                                            [q10_ContFTE_5] int NULL
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_CIOannual09' AND column_name=N'7b-3-ComputsComplyPrcntA')
	BEGIN
		ALTER TABLE [fsma_CIOannual09] 
			ADD [7b-3-ComputsComplyPrcntA] int NULL,
                [7b-3-ComputsComplyPrcntB] int NULL

		ALTER TABLE [fsma_CIOannual09] 
					ALTER COLUMN [5A-B6-TrainingCost] bigint
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_CIOannual09' AND column_name=N'7b-3-ComputsComplyPrcntA')
	BEGIN
		ALTER TABLE [fsma_CIOannual09] 
			ADD [7b-3-ComputsComplyPrcntA] int NULL,
                [7b-3-ComputsComplyPrcntB] int NULL

		ALTER TABLE [fsma_CIOannual09] 
					ALTER COLUMN [5A-B6-TrainingCost] bigint

		ALTER TABLE [fsma_CIOannual09] 
							ALTER COLUMN [q10_CA_Cost_1] bigint

			ADD [7b-3-ComputsComplyPrcntA] int NULL,
                [7b-3-ComputsComplyPrcntB] int NULL

		ALTER TABLE [fsma_CIOannual09] 
					ALTER COLUMN [5A-B6-TrainingCost] bigint

		ALTER TABLE [fsma_CIOannual09] 
							ALTER COLUMN [q10_CA_Cost_1] bigint

		ALTER TABLE [fsma_CIOannual09] 
							ALTER COLUMN [q10_CostSecure_3] bigint
	END
		ALTER TABLE [fsma_CIOannual09] 
					ALTER COLUMN [5A-B6-TrainingCost] bigint

		ALTER TABLE [fsma_CIOannual09] 
							ALTER COLUMN [q10_CA_Cost_1] bigint

		ALTER TABLE [fsma_CIOannual09] 
							ALTER COLUMN [q10_CostSecure_3] bigint
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_CIOannual09' AND column_name=N'q10_HSPD12')
							ALTER COLUMN [q10_CostSecure_3] bigint
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_CIOannual09' AND column_name=N'q10_HSPD12')
	BEGIN
		ALTER TABLE [fsma_CIOannual09] 
			ADD [q10_HSPD12] bigint NULL
	END
GO

/*****************************************************************************/

/*****************************************************************************/
/*** Update Table: [fsma_SAOPannual09] ***/
/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SAOPannual09' AND column_name=N'Q9_YesNo')
	BEGIN
		ALTER TABLE [fsma_SAOPannual09] 
			ADD [Q9_YesNo] [nvarchar](1) NULL
	END
GO



/*****************************************************************************/
/*** Update Table: [fsma_SAOPcontacts] ***/
/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SAOPcontacts' AND column_name=N'Q11_NA')
	BEGIN
		ALTER TABLE [fsma_SAOPcontacts] 
			ADD [Q11_NA] [nvarchar](1) NULL
	END
GO

/*****************************************************************************/

/*****************************************************************************/
/*** Update Table: [fsma_SystemsNoCA] ***/
/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SystemsNoCA' AND column_name=N'PK_OrgSubmission')
	BEGIN
		ALTER TABLE [fsma_SystemsNoCA] 
			ADD [PK_OrgSubmission] [int] NULL
	END
GO

/*****************************************************************************/

/*****************************************************************************/
/*** Update Table: [fsma_SystemsNoCA] ***/
/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SystemsNoCA' AND column_name=N'Agency_Contractor')
	BEGIN
		ALTER TABLE [fsma_SystemsNoCA] 
			ADD [Agency_Contractor] [nvarchar](1) NULL
	END
GO

/*****************************************************************************/

/*****************************************************************************/
/*** Update Table: [fsma_SystemsNoCA] ***/
/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SystemsNoCA' AND column_name=N'PK_Component')
	BEGIN
		ALTER TABLE [fsma_SystemsNoCA] 
			ADD PK_Component [int] NULL
	END
GO
/*****************************************************************************/
/*** Update Table: [Component List]  ***/




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\Scorecard Master Update-Rev3.sql
IF NOT EXISTS (SELECT * FROM frmVal_Errors WHERE PK_Id_Error = 159)
	INSERT INTO frmVal_Errors(Description) Values('Question 7b(3) You must List the percentage of workstations and laptops that are in compliance. ')

/* Update UserID field length to match CSAMusers to prevent SQL truncation error message */
IF EXISTS (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'diag_AccessLog' AND COLUMN_NAME = 'UserID' AND CHARACTER_MAXIMUM_LENGTH < 256)
BEGIN
	ALTER TABLE diag_AccessLog ALTER COLUMN UserID nvarchar(256)
END

/* Correct name of OPIC per Mary HorseChief, OPIC ISSO, to remove 's' from Investments */
UPDATE [Component List] SET Component = 'Overseas Private Investment Corporation' WHERE Component = 'Overseas Private Investments Corporation'


/* Correct name of OPIC per Mary HorseChief, OPIC ISSO, to remove 's' from Investments */
UPDATE [Component List] SET Component = 'Overseas Private Investment Corporation' WHERE Component = 'Overseas Private Investments Corporation'

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE (TABLE_NAME = N'fsma_PerformanceMetrics') AND (COLUMN_NAME = N'MetricDescription') AND (CHARACTER_MAXIMUM_LENGTH = 200))
	BEGIN
		ALTER TABLE [fsma_PerformanceMetrics] ALTER COLUMN [MetricDescription] NVARCHAR(500)
	END



IF NOT EXISTS (SELECT * from EMAIL_MASTER WHERE EMAIL_CODE = 'EM002')
		
		INSERT INTO EMAIL_MASTER (EMAIL_CODE, EMAIL_DESCRIPTION, TRIGGERED_BY, OUTPUT_TYPE, Output_Template, IsActive ) values( 'EM002', 'OMB Approved Agency Submission', 'E', 'H', 'CSemailtemplate.htm', 1)
	END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'AuditLog' and Column_name=N'PK_Agency')
	BEGIN
		ALTER TABLE [AuditLog] Add [PK_Agency] [int] NULL
		ALTER TABLE [AuditLog] Add [PK_Bureau] [int] NULL
	END
	
IF NOT EXISTS (SELECT * from wf_Permissions WHERE Access_Code = 'INSTALLER')
	BEGIN
		INSERT INTO EMAIL_MASTER (EMAIL_CODE, EMAIL_DESCRIPTION, TRIGGERED_BY, OUTPUT_TYPE, Output_Template, IsActive ) values( 'EM002', 'OMB Approved Agency Submission', 'E', 'H', 'CSemailtemplate.htm', 1)
	END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'AuditLog' and Column_name=N'PK_Agency')
	BEGIN
		ALTER TABLE [AuditLog] Add [PK_Agency] [int] NULL
		ALTER TABLE [AuditLog] Add [PK_Bureau] [int] NULL
	END
	
IF NOT EXISTS (SELECT * from wf_Permissions WHERE Access_Code = 'INSTALLER')
	BEGIN
		INSERT INTO wf_Permissions (Access_Code, Access_Descript ) values( 'INSTALLER', 'Installer Test Permission')

UPDATE EMAIL_MASTER SET IsActive=0 where EMAIL_CODE = 'EM002'


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'ArtifactTypes' and Column_name=N'RequiredMIC')
	BEGIN
		ALTER TABLE ArtifactTypes Add [RequiredMIC] [bit] NULL
	END

UPDATE ArtifactTypes SET RequiredMIC = 1 WHERE ArtifactTypeDescription = 'Agency Signed Letter' AND RequiredMIC IS NULL
UPDATE ArtifactTypes SET RequiredMIC = 0 WHERE RequiredMIC IS NULL

UPDATE ArtifactTypes SET RequiredMIC = 1 WHERE ArtifactTypeDescription = 'Agency Signed Letter' AND RequiredMIC IS NULL
UPDATE ArtifactTypes SET RequiredMIC = 0 WHERE RequiredMIC IS NULL


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'cq_Query' and Column_name=N'DynamicColumns')
	BEGIN
		ALTER TABLE cq_Query Add [DynamicColumns] [bit] NULL
	END


UPDATE cq_Query SET DynamicColumns = 0 WHERE DynamicColumns IS NULL


UPDATE cq_Query SET DynamicColumns = 0 WHERE DynamicColumns IS NULL


IF EXISTS (SELECT * FROM sysobjects WHERE name = 'FK_fsma_QuestionAttribute_fsma_Questions' )
BEGIN
	ALTER TABLE fsma_QuestionAttribute
	DROP FK_fsma_QuestionAttribute_fsma_Questions
END

IF EXISTS (SELECT * FROM sysobjects WHERE name = 'fsma_Questions' AND type = 'U')
	DROP TABLE fsma_Questions
(
	[PK_Question_PickList] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes] FOREIGN KEY([PK_QuestionType])
REFERENCES [dbo].[fsma_QuestionTypes] ([PK_QuestionTypeId])
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes]
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes] FOREIGN KEY([PK_PickListTypes])
) ON [PRIMARY]


ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes] FOREIGN KEY([PK_QuestionType])
REFERENCES [dbo].[fsma_QuestionTypes] ([PK_QuestionTypeId])
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes]
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes] FOREIGN KEY([PK_PickListTypes])
REFERENCES [dbo].[PickListTypes] ([PK_PickListType])
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes]

ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes] FOREIGN KEY([PK_QuestionType])
REFERENCES [dbo].[fsma_QuestionTypes] ([PK_QuestionTypeId])
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes]
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes] FOREIGN KEY([PK_PickListTypes])
REFERENCES [dbo].[PickListTypes] ([PK_PickListType])
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes]

CREATE TABLE [dbo].[fsma_Questions](
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_fsma_QuestionTypes]
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes]  WITH CHECK ADD  CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes] FOREIGN KEY([PK_PickListTypes])
REFERENCES [dbo].[PickListTypes] ([PK_PickListType])
GO
ALTER TABLE [dbo].[fsma_QuestionTypes_PickListTypes] CHECK CONSTRAINT [FK_fsma_QuestionTypes_PickListTypes_PickListTypes]

CREATE TABLE [dbo].[fsma_Questions](
	[PK_Question] [int] IDENTITY(1,1) NOT NULL,
	[FormName] [nvarchar](10) NULL,
	[QuestionNum] [int] NULL,
(
	[PK_Question] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
ALTER TABLE [dbo].[fsma_Questions]  WITH CHECK ADD  CONSTRAINT [FK_fsma_Questions_fsma_QuestionTypes_PickListTypes] FOREIGN KEY([FK_Question_Picklist])
REFERENCES [dbo].[fsma_QuestionTypes_PickListTypes] ([PK_Question_PickList])
GO
ALTER TABLE [dbo].[fsma_Questions] CHECK CONSTRAINT [FK_fsma_Questions_fsma_QuestionTypes_PickListTypes]

INSERT INTO fsma_QuestionTypes
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
ALTER TABLE [dbo].[fsma_Questions]  WITH CHECK ADD  CONSTRAINT [FK_fsma_Questions_fsma_QuestionTypes_PickListTypes] FOREIGN KEY([FK_Question_Picklist])
REFERENCES [dbo].[fsma_QuestionTypes_PickListTypes] ([PK_Question_PickList])
GO
ALTER TABLE [dbo].[fsma_Questions] CHECK CONSTRAINT [FK_fsma_Questions_fsma_QuestionTypes_PickListTypes]

INSERT INTO fsma_QuestionTypes
SELECT 'YN', 'Yes / No'

INSERT INTO fsma_QuestionTypes
	[PK_ReportingCycle_Component] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_ReportingCycleId')
	ALTER TABLE [fsma_FormMaster] DROP COLUMN [FK_ReportingCycleId] 		

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_ReportingCycle')
	ALTER TABLE [fsma_FormMaster] ADD  [FK_ReportingCycle] INT NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_FormType')
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_ReportingCycleId')
	ALTER TABLE [fsma_FormMaster] DROP COLUMN [FK_ReportingCycleId] 		

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_ReportingCycle')
	ALTER TABLE [fsma_FormMaster] ADD  [FK_ReportingCycle] INT NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_FormType')
	ALTER TABLE [fsma_FormMaster] ADD  [FK_FormType] INT NULL


	ALTER TABLE [fsma_FormMaster] DROP COLUMN [FK_ReportingCycleId] 		

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_ReportingCycle')
	ALTER TABLE [fsma_FormMaster] ADD  [FK_ReportingCycle] INT NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormMaster' AND COLUMN_NAME='FK_FormType')
	ALTER TABLE [fsma_FormMaster] ADD  [FK_FormType] INT NULL


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_FormTypes')
BEGIN
	CREATE TABLE [dbo].[fsma_FormTypes](
	[PK_Answer] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_OrgSubmissions' AND COLUMN_NAME='FK_ReportingCycle_Component')
BEGIN	
	ALTER TABLE fsma_OrgSubmissions ADD
		FK_ReportingCycle_Component int NULL
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_Questions' AND COLUMN_NAME='FK_PickList')
BEGIN
	ALTER TABLE fsma_OrgSubmissions ADD
		FK_ReportingCycle_Component int NULL
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_Questions' AND COLUMN_NAME='FK_PickList')
BEGIN
ALTER TABLE dbo.fsma_Questions ADD
	FK_PickList int NULL
END	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_Questions' AND COLUMN_NAME='FK_QuestionType')
BEGIN
ALTER TABLE dbo.fsma_Questions ADD
	FK_PickList int NULL
END	

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_Questions' AND COLUMN_NAME='FK_QuestionType')
BEGIN
ALTER TABLE dbo.fsma_Questions ADD
	FK_QuestionType int NULL
END	

ALTER TABLE fsma_QuestionGroups
ALTER COLUMN PK_Form [nvarchar](25) NULL
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_Questions' AND COLUMN_NAME='FK_QuestionType')
BEGIN
ALTER TABLE dbo.fsma_Questions ADD
	FK_QuestionType int NULL
END	

ALTER TABLE fsma_QuestionGroups
ALTER COLUMN PK_Form [nvarchar](25) NULL
GO		
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_QuestionGroups' AND COLUMN_NAME='FK_FormPage')
BEGIN	
	ALTER TABLE [fsma_QuestionGroups]

ALTER TABLE fsma_QuestionGroups
ALTER COLUMN PK_Form [nvarchar](25) NULL
GO		
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='fsma_QuestionGroups' AND COLUMN_NAME='FK_FormPage')
BEGIN	
	ALTER TABLE [fsma_QuestionGroups]
	ADD [FK_FormPage] [int] NULL	
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Artifacts' AND COLUMN_NAME='FK_ReportingCycle_Component')
	ADD [FK_FormPage] [int] NULL	
END	
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Artifacts' AND COLUMN_NAME='FK_ReportingCycle_Component')
BEGIN	
	ALTER TABLE Artifacts ADD
		FK_ReportingCycle_Component int NULL
END
GO 
	
ALTER TABLE [fsma_Questions]
BEGIN	
	ALTER TABLE Artifacts ADD
		FK_ReportingCycle_Component int NULL
END
GO 
	
ALTER TABLE [fsma_Questions]
ALTER COLUMN QuestionText nvarchar(MAX) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Table_Name nvarchar(250) NULL
GO
END
GO 
	
ALTER TABLE [fsma_Questions]
ALTER COLUMN QuestionText nvarchar(MAX) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Table_Name nvarchar(250) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Column_Question nvarchar(250) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN QuestionText nvarchar(MAX) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Table_Name nvarchar(250) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Column_Question nvarchar(250) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN FK_Question_Picklist INT NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Table_Name nvarchar(250) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN Column_Question nvarchar(250) NULL
GO
ALTER TABLE [fsma_Questions]
ALTER COLUMN FK_Question_Picklist INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_NAME = 'fsma_FormMaster' )
BEGIN
ALTER TABLE [fsma_Questions]
ALTER COLUMN FK_Question_Picklist INT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' AND TABLE_NAME = 'fsma_FormMaster' )
BEGIN
	ALTER TABLE dbo.fsma_FormMaster ADD CONSTRAINT
		PK_fsma_FormMaster_1 PRIMARY KEY CLUSTERED 
		(
		PK_Form
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
END
		PK_Form
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
END


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS WHERE  CONSTRAINT_NAME = 'FK_fsma_FormMaster_fsma_FormMaster' )
	ALTER TABLE fsma_FormMaster DROP CONSTRAINT FK_fsma_FormMaster_fsma_FormMaster
	
DELETE FROM fsma_ReportingCycles
INSERT INTO [fsma_ReportingCycles] ([IntervalCode],[Period],[Year],[Description],[DateModified], IsActive, [ScheduledActivation], [ActualActivation], [ScheduledClosed], [ActualClosed], [Status] )VALUES('A','2009','2009','FISMA Annual 2009','Feb 26 2010  1:28:48:717PM', 1,'Oct 19 2009  9:00:00:000AM','Oct 19 2009  9:00:00:000AM','Nov 19 2009  11:59:00:000PM','Nov 19 2009  11:59:00:000PM', 'C')
INSERT INTO [fsma_ReportingCycles] ([IntervalCode],[Period],[Year],[Description],[DateModified], IsActive, [ScheduledActivation], [ActualActivation], [ScheduledClosed], [ActualClosed], [Status] )VALUES('Q','Q3','2010','FISMA Quarterly 2010',NULL, 0,'Jun 14 2010  9:00:00:000AM',NULL,'Jul 9 2010  11:59:00:000PM',NULL, 'P')
GO
IF NOT EXISTS (SELECT * FROM fsma_InputType WHERE Description = 'Data Feed')
	INSERT INTO fsma_InputType(PK_InputType, Description) Values(1, 'Data Feed')

	/* add sortpos to questiongroup */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_QuestionGroups' and Column_name=N'sortpos')
		ALTER TABLE [fsma_QuestionGroups] Add [sortpos] [int] NULL

	/* add sortpos to formpages */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_FormPages' and Column_name=N'sortpos')
	BEGIN
		ALTER TABLE [fsma_QuestionGroups] Add [sortpos] [int] NULL

	/* add sortpos to formpages */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_FormPages' and Column_name=N'sortpos')
	BEGIN
		ALTER TABLE [fsma_FormPages] Add [sortpos] [int] NULL
	END

	/* add sortpos, reportable, inputType to questions */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Questions' and Column_name=N'sortpos')
	END

	/* add sortpos, reportable, inputType to questions */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Questions' and Column_name=N'sortpos')
	BEGIN
		ALTER TABLE [fsma_Questions] Add [sortpos] [int] NULL
		ALTER TABLE [fsma_Questions] Add [reportable] [bit]  NULL
		ALTER TABLE [fsma_Questions] Add [FK_InputType] [int] NULL
	END

IF NOT EXISTS (SELECT * from fsma_ReportingCycles where [Year] = '2010' and IntervalCode = 'A')

	/* add sortpos, reportable, inputType to questions */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Questions' and Column_name=N'sortpos')
	BEGIN
		ALTER TABLE [fsma_Questions] Add [sortpos] [int] NULL
		ALTER TABLE [fsma_Questions] Add [reportable] [bit]  NULL
		ALTER TABLE [fsma_Questions] Add [FK_InputType] [int] NULL
	END

IF NOT EXISTS (SELECT * from fsma_ReportingCycles where [Year] = '2010' and IntervalCode = 'A')
BEGIN
	/* add sortpos, reportable, inputType to questions */

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Questions' and Column_name=N'sortpos')
	BEGIN
		ALTER TABLE [fsma_Questions] Add [sortpos] [int] NULL
		ALTER TABLE [fsma_Questions] Add [reportable] [bit]  NULL
		ALTER TABLE [fsma_Questions] Add [FK_InputType] [int] NULL
	END

IF NOT EXISTS (SELECT * from fsma_ReportingCycles where [Year] = '2010' and IntervalCode = 'A')
BEGIN
	UPDATE fsma_ReportingCycles SET IsActive = 0
SET IDENTITY_INSERT dbo.Tmp_ErrorLog OFF
GO
DROP TABLE dbo.ErrorLog
GO
EXECUTE sp_rename N'dbo.Tmp_ErrorLog', N'ErrorLog', 'OBJECT' 
GO
ALTER TABLE dbo.ErrorLog ADD CONSTRAINT
	PK_ErrorLog PRIMARY KEY CLUSTERED 
	(
	PK_ErrorLog
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\Scorecard Master Update-Rev5.sql
EXEC AddFormToCycle '2010-Q3-CIO', 3


/* Update Table: fmsa_AuthorizedSoftware */
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_AuthorizedSoftware' and Column_name=N'FDCC')
	BEGIN
		ALTER TABLE [fsma_AuthorizedSoftware] Add [FDCC] [int] NULL
	END

/* ~~~~~~~~~~~~~~~~~~~~~  MICRO ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* Populate form, orgsubmission, and inventory tables with 2010 Micro record place holders.  */




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\Scorecard Master Update-Rev6.sql

/*--------------------------------
add answer2 column to fsma_Answers
--------------------------------*/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_Answers' and Column_name=N'Answer2')
	BEGIN
		ALTER TABLE [fsma_Answers] Add [Answer2] nvarchar(MAX) NULL
	END


DECLARE @RevSeed  INT





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\Scorecard Master Update.sql
			[PK_ConfigMgmt] ASC
		)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
		) ON [PRIMARY]
	END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_ConfigMgmt' AND column_name=N'Platform_PK')
	BEGIN
		ALTER TABLE [fsma_ConfigMgmt] ADD Platform_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD PlatformStatus_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD Last_Update [smalldatetime] NULL
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  Platform_Code
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  PlatformStatus_Code
	END
		)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
		) ON [PRIMARY]
	END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_ConfigMgmt' AND column_name=N'Platform_PK')
	BEGIN
		ALTER TABLE [fsma_ConfigMgmt] ADD Platform_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD PlatformStatus_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD Last_Update [smalldatetime] NULL
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  Platform_Code
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  PlatformStatus_Code
	END
GO
		) ON [PRIMARY]
	END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_ConfigMgmt' AND column_name=N'Platform_PK')
	BEGIN
		ALTER TABLE [fsma_ConfigMgmt] ADD Platform_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD PlatformStatus_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD Last_Update [smalldatetime] NULL
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  Platform_Code
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  PlatformStatus_Code
	END
GO

	END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_ConfigMgmt' AND column_name=N'Platform_PK')
	BEGIN
		ALTER TABLE [fsma_ConfigMgmt] ADD Platform_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD PlatformStatus_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD Last_Update [smalldatetime] NULL
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  Platform_Code
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  PlatformStatus_Code
	END
GO

/*****************************************************************************/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_ConfigMgmt' AND column_name=N'Platform_PK')
	BEGIN
		ALTER TABLE [fsma_ConfigMgmt] ADD Platform_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD PlatformStatus_PK int NULL
		ALTER TABLE [fsma_ConfigMgmt] ADD Last_Update [smalldatetime] NULL
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  Platform_Code
		ALTER TABLE [fsma_ConfigMgmt] DROP COLUMN  PlatformStatus_Code
	END
GO

/*****************************************************************************/
/*** Alter Table: PickLists ***/
/*** Alter Table: PickLists ***/
/***  Expand column width  ***/
/*****************************************************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'Picklists' AND column_name=N'DisplayValue' and CHARACTER_MAXIMUM_LENGTH =150)
	BEGIN
		ALTER TABLE [Picklists] ALTER COLUMN [DisplayValue] [nvarchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
	END
GO

/*****************************************************************************/
/*** Alter Table: PickListTypes ***/
/*** Alter Table: fsma_InventoryCAtotals ***/
/***  Expand column width  ***/
/*****************************************************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'OneA_AgencySystemsReviewed')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD OneA_AgencySystemsReviewed int NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'OneB_ContSystemsReviewed')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD OneA_AgencySystemsReviewed int NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'OneB_ContSystemsReviewed')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD OneB_ContSystemsReviewed int NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'NotCat_Explain')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD OneB_ContSystemsReviewed int NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'NotCat_Explain')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD NotCat_Explain NVARCHAR(MAX) NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'TwoA_Discrepancy_Explain')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD NotCat_Explain NVARCHAR(MAX) NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'TwoA_Discrepancy_Explain')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD TwoA_Discrepancy_Explain NVARCHAR(MAX) NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'IsIgSelected')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD TwoA_Discrepancy_Explain NVARCHAR(MAX) NULL
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_InventoryCAtotals' AND column_name=N'IsIgSelected')
	BEGIN
		ALTER TABLE [fsma_InventoryCAtotals] ADD IsIgSelected NVARCHAR(1) NULL
	END
GO




/*****************************************************************************/
/*** Alter Table: aspnet_membership ***/
/***  foreign key = set update and delete to cascade  ***/
/*****************************************************************************/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_aspnet_Membership_aspnet_Applications]') AND parent_object_id = OBJECT_ID(N'[dbo].[aspnet_Membership]'))
	ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_aspnet_Membership_aspnet_Applications]
GO
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Applications] FOREIGN KEY([ApplicationId])
	REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
/*** Alter Table: aspnet_membership ***/
/***  foreign key = set update and delete to cascade  ***/
/*****************************************************************************/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_aspnet_Membership_aspnet_Applications]') AND parent_object_id = OBJECT_ID(N'[dbo].[aspnet_Membership]'))
	ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_aspnet_Membership_aspnet_Applications]
GO
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Applications] FOREIGN KEY([ApplicationId])
	REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[aspnet_Membership] CHECK CONSTRAINT [FK_aspnet_Membership_aspnet_Applications]
GO
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Applications] FOREIGN KEY([ApplicationId])
	REFERENCES [dbo].[aspnet_Applications] ([ApplicationId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[aspnet_Membership] CHECK CONSTRAINT [FK_aspnet_Membership_aspnet_Applications]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_aspnet_Membership_aspnet_Users]') AND parent_object_id = OBJECT_ID(N'[dbo].[aspnet_Membership]'))
	ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_aspnet_Membership_aspnet_Users]
GO	
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Users] FOREIGN KEY([UserId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[aspnet_Membership] CHECK CONSTRAINT [FK_aspnet_Membership_aspnet_Applications]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_aspnet_Membership_aspnet_Users]') AND parent_object_id = OBJECT_ID(N'[dbo].[aspnet_Membership]'))
	ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_aspnet_Membership_aspnet_Users]
GO	
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Users] FOREIGN KEY([UserId])
	REFERENCES [dbo].[aspnet_Users] ([UserId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[aspnet_Membership] CHECK CONSTRAINT [FK_aspnet_Membership_aspnet_Applications]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_aspnet_Membership_aspnet_Users]') AND parent_object_id = OBJECT_ID(N'[dbo].[aspnet_Membership]'))
	ALTER TABLE [dbo].[aspnet_Membership] DROP CONSTRAINT [FK_aspnet_Membership_aspnet_Users]
GO	
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Users] FOREIGN KEY([UserId])
	REFERENCES [dbo].[aspnet_Users] ([UserId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[aspnet_Membership] CHECK CONSTRAINT [FK_aspnet_Membership_aspnet_Users]
GO	
	ALTER TABLE [dbo].[aspnet_Membership]  WITH CHECK ADD  CONSTRAINT [FK_aspnet_Membership_aspnet_Users] FOREIGN KEY([UserId])
	REFERENCES [dbo].[aspnet_Users] ([UserId])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[aspnet_Membership] CHECK CONSTRAINT [FK_aspnet_Membership_aspnet_Users]
GO


/*****************************************************************************/
/*** Alter Table: CSAMUsers ***/

/*****************************************************************************/
/*** Alter Table: CSAMUsers ***/
/***  foreign key = set update and delete to cascade  ***/
/*****************************************************************************/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CSAMusers_aspnet_Users]') AND parent_object_id = OBJECT_ID(N'[dbo].[CSAMusers]'))
	ALTER TABLE [dbo].[CSAMusers] DROP CONSTRAINT [FK_CSAMusers_aspnet_Users]
GO	
	ALTER TABLE [dbo].[CSAMusers]  WITH CHECK ADD  CONSTRAINT [FK_CSAMusers_aspnet_Users] FOREIGN KEY([UserID])
	REFERENCES [dbo].[aspnet_Users] ([UserName])
	ON UPDATE CASCADE
	ON DELETE CASCADE
/*** Alter Table: CSAMUsers ***/
/***  foreign key = set update and delete to cascade  ***/
/*****************************************************************************/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_CSAMusers_aspnet_Users]') AND parent_object_id = OBJECT_ID(N'[dbo].[CSAMusers]'))
	ALTER TABLE [dbo].[CSAMusers] DROP CONSTRAINT [FK_CSAMusers_aspnet_Users]
GO	
	ALTER TABLE [dbo].[CSAMusers]  WITH CHECK ADD  CONSTRAINT [FK_CSAMusers_aspnet_Users] FOREIGN KEY([UserID])
	REFERENCES [dbo].[aspnet_Users] ([UserName])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[CSAMusers] CHECK CONSTRAINT [FK_CSAMusers_aspnet_Users]
GO	
	ALTER TABLE [dbo].[CSAMusers]  WITH CHECK ADD  CONSTRAINT [FK_CSAMusers_aspnet_Users] FOREIGN KEY([UserID])
	REFERENCES [dbo].[aspnet_Users] ([UserName])
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO
	ALTER TABLE [dbo].[CSAMusers] CHECK CONSTRAINT [FK_CSAMusers_aspnet_Users]
GO

/*****************************************************************************/
/*** Create Tables for SAOP    ***/
/*****************************************************************************/
/*** ALter Table fsma_SAOPbureauReviews   ***/
/*** 	Change column to remove spaces   ***/
/*****************************************************************************/
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SAOPbureauReviews' AND column_name=N'Q6_PrivacyImpactAssessments and Updates')
	BEGIN
		ALTER TABLE [fsma_SAOPbureauReviews] DROP Column [Q6_PrivacyImpactAssessments and Updates]
		ALTER TABLE [fsma_SAOPbureauReviews] ADD Q6_PrivacyImpactAssessments int NULL
	END


/*** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ***/
/*** 	Change column to remove spaces   ***/
/*****************************************************************************/
	
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_SAOPbureauReviews' AND column_name=N'Q6_PrivacyImpactAssessments and Updates')
	BEGIN
		ALTER TABLE [fsma_SAOPbureauReviews] DROP Column [Q6_PrivacyImpactAssessments and Updates]
		ALTER TABLE [fsma_SAOPbureauReviews] ADD Q6_PrivacyImpactAssessments int NULL
	END


/*** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ***/
/***                                                                         ***/




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\_0 BOD1802-Settings for pdf.sql




IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'ArtifactsToReportCycles' AND Column_Name = 'WaiveArtifact')
BEGIN
	ALTER TABLE ArtifactsToReportCycles
	ADD WaiveArtifact BIT DEFAULT NULL
END
GO

UPDATE ArtifactsToReportCycles SET WaiveArtifact = 1 WHERE NoDuplicate = 0 --if waive artifact is 1 show waive artifact control

-- drop table AAPS_CioRating
IF (SELECT COUNT(*) FROM  INFORMATION_SCHEMA.TABLES where TABLE_NAME='AAPS_CioRating')=0
	CREATE TABLE AAPS_CioRating(PK_CioRating INT IDENTITY(1,1),PK_ReportingCycle INT,PK_Component INT,rIdentify REAL,rProtect REAL,rDetect REAL,rRespond REAL,rRecover REAL)

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS where TABLE_NAME='AAPS_CioRating' and CONSTRAINT_NAME='UC_AAPS_CioRating')
	ALTER TABLE AAPS_CioRating 
	ADD CONSTRAINT  UC_AAPS_CioRating  UNIQUE (PK_ReportingCycle,PK_Component)


ALTER TABLE fsma_FormMaster
ALTER COLUMN [PK_Form] NVARCHAR(25) NOT NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS where TABLE_NAME='AAPS_CioRating' and CONSTRAINT_NAME='UC_AAPS_CioRating')
	ALTER TABLE AAPS_CioRating 
	ADD CONSTRAINT  UC_AAPS_CioRating  UNIQUE (PK_ReportingCycle,PK_Component)


ALTER TABLE fsma_FormMaster
ALTER COLUMN [PK_Form] NVARCHAR(25) NOT NULL

IF EXISTS (SELECT * FROM sys.stats WHERE name = '_dta_stat_2066106401_1_3')
BEGIN
	DROP STATISTICS fsma_OrgSubmissions._dta_stat_2066106401_1_3
BEGIN
	DROP STATISTICS fsma_OrgSubmissions._dta_stat_2066106401_1_6_3
END

GO

ALTER TABLE fsma_OrgSubmissions
ALTER COLUMN [PK_Form] NVARCHAR(25) NULL

IF NOT EXISTS (SELECT * FROM sys.stats WHERE name = '_dta_stat_2066106401_1_3')
BEGIN
	CREATE STATISTICS [_dta_stat_2066106401_1_3] ON [dbo].[fsma_OrgSubmissions]([PK_OrgSubmission], [PK_Form])
set PK_DataCall=0
where PK_DataCall=5



-- update auditlog column length for distro CS-9386 Investigate Notify Users button for email notifications
  ALTER TABLE [AuditLog_EmailsSent] ALTER COLUMN [Distribution] NVARCHAR(MAX)

  -- old name for frmVal
IF EXISTS (SELECT * FROM sysobjects WHERE name = 'frmVal_2023HVA' AND type = 'P')
    DROP PROCEDURE [frmVal_2023HVA]
GO   




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\_0_DBUpdate_7.52_fixes.sql
		SELECT PK_ReportingCycle_Component FROM fsma_ReportingCycle_Components
	)
)



ALTER TABLE fsma_OrgSubmissions
ALTER COLUMN [PK_Form] NVARCHAR (25);
GO 


UPDATE fsma_OrgSubmissions
WHERE PK_Form = '2023-A-HVAENDPR'

UPDATE fsma_ReportingCycles
SET PK_DataCall = 27--, FK_DataCall = 27
WHERE PK_ReportingCycle = 126

ALTER TABLE fsma_FormPages
ALTER COLUMN [FK_Form] NVARCHAR(25) NULL


IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Permissions' and COLUMN_NAME='FK_DataCall')
BEGIN
ALTER TABLE fsma_FormPages
ALTER COLUMN [FK_Form] NVARCHAR(25) NULL


IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Permissions' and COLUMN_NAME='FK_DataCall')
BEGIN
	ALTER TABLE wf_Permissions DROP COLUMN FK_DataCall
END
GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Roles' and COLUMN_NAME='FK_DataCall')
BEGIN
	ALTER TABLE wf_Permissions DROP COLUMN FK_DataCall
END
GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Roles' and COLUMN_NAME='FK_DataCall')
BEGIN
	ALTER TABLE wf_Roles DROP COLUMN FK_DataCall
END
GO


IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Access' and COLUMN_NAME='FK_PK_DataCall')
END
GO


IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='wf_Access' and COLUMN_NAME='FK_PK_DataCall')
BEGIN
	ALTER TABLE wf_Access DROP COLUMN FK_PK_DataCall
END
GO
 
IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_DataCall' and COLUMN_NAME='FK_PK_DataCall')
BEGIN
	ALTER TABLE wf_Access DROP COLUMN FK_PK_DataCall
END
GO
 
IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_DataCall' and COLUMN_NAME='FK_PK_DataCall')
BEGIN
	ALTER TABLE fsma_DataCall DROP COLUMN FK_PK_DataCall
END
GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_FormTypes' and COLUMN_NAME='PermissionCode_View')
END
GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_FormTypes' and COLUMN_NAME='PermissionCode_View')
BEGIN
	ALTER TABLE fsma_FormTypes ADD PermissionCode_View NVARCHAR(50) NULL
END

GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_FormTypes' and COLUMN_NAME='PermissionCode_Admin')
END

GO

IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_FormTypes' and COLUMN_NAME='PermissionCode_Admin')
BEGIN
	ALTER TABLE fsma_FormTypes ADD PermissionCode_Admin NVARCHAR(50) NULL
END

GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_ReportingCycles' and COLUMN_NAME='FK_DataCall')
END

GO

IF EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_ReportingCycles' and COLUMN_NAME='FK_DataCall')
BEGIN
	ALTER TABLE fsma_ReportingCycles DROP COLUMN FK_DataCall
END
GO



SET FK_FormType = 21
WHERE PK_Form = '2023-A-PQC'


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE table_name=N'fsma_ReportingCycle_Components' and Column_name=N'AgencyHasActiveForm')
BEGIN
	ALTER TABLE [fsma_ReportingCycle_Components] ADD [AgencyHasActiveForm] Bit DEFAULT 1
END
GO

UPDATE fsma_ReportingCycle_Components 
SET AgencyHasActiveForm = 1 
*/
 

 --2201 SCHEMA UPDATE
	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated'  AND Column_Name = 'CDMCountImported')
	BEGIN
		ALTER TABLE CVEUnremediated ADD CDMCountImported INT NULL
	END
GO
	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'CDMDateImported')
	BEGIN
		ALTER TABLE CVEUnremediated ADD CDMDateImported DATETIME NULL
	BEGIN
		ALTER TABLE CVEUnremediated ADD CDMCountImported INT NULL
	END
GO
	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'CDMDateImported')
	BEGIN
		ALTER TABLE CVEUnremediated ADD CDMDateImported DATETIME NULL
	END  
GO
 
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		UPDATE CVEUnremediated SET CDMCountImported=CDMCountSubmitted, CDMDateImported=CDMDateSubmitted;
	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'CVEUnremediated' AND Column_Name = 'CDMDateImported')
	BEGIN
		ALTER TABLE CVEUnremediated ADD CDMDateImported DATETIME NULL
	END  
GO
 
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		UPDATE CVEUnremediated SET CDMCountImported=CDMCountSubmitted, CDMDateImported=CDMDateSubmitted;
	ALTER TABLE CVEUnremediated ENABLE TRIGGER tgrCVEUnremediated_audits;

GO
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		ALTER TABLE CVEUnremediated ADD CDMDateImported DATETIME NULL
	END  
GO
 
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		UPDATE CVEUnremediated SET CDMCountImported=CDMCountSubmitted, CDMDateImported=CDMDateSubmitted;
	ALTER TABLE CVEUnremediated ENABLE TRIGGER tgrCVEUnremediated_audits;

GO
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		UPDATE CVE SET CDMCountImported=CDM.Count, CDMDateImported=ImportDate
		FROM CVEUnremediated CVE
 
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		UPDATE CVEUnremediated SET CDMCountImported=CDMCountSubmitted, CDMDateImported=CDMDateSubmitted;
	ALTER TABLE CVEUnremediated ENABLE TRIGGER tgrCVEUnremediated_audits;

GO
	ALTER TABLE CVEUnremediated DISABLE TRIGGER tgrCVEUnremediated_audits; 
		UPDATE CVE SET CDMCountImported=CDM.Count, CDMDateImported=ImportDate
		FROM CVEUnremediated CVE
		INNER JOIN
		(
			SELECT MAX(ImportDate) ImportDate, CDM.Count, CDM.PK_Component, CVE_ID, ORG.PK_OrgSubmission 
			INNER JOIN vwOrgSubToComponent ORG ON CDM.PK_Component=ORG.PK_Component
			WHERE PK_ReportingCycle=108 AND OrgSub_Description='ACTIVE' AND ORG.OrgSub_Status IN ('IP','NS')
			AND CDM.Count IS NOT NULL
			GROUP BY CDM.Count, CDM.PK_Component, CVE_ID, ORG.PK_OrgSubmission 
		) 
		CDM ON CDM.CVE_ID=CVE.PK_CISA_CVE AND CDM.PK_OrgSubmission=CVE.PK_OrgSubmission
	ALTER TABLE CVEUnremediated ENABLE TRIGGER tgrCVEUnremediated_audits;
GO		 
	


--CIOPIVPOC




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\_0_DB_Update7.52_Updates.sql
where QuestionNumber IN ('NA1.b','NA4','NA4.a','NA6','NA13','NA13.a','NA13.b','NA14','NA23','NA24.a','NA26','NA28.a','NA29.b','NA30.a','NA31','NA32','NA32.b','NA33.c','NA34.a','NA35')


--// for PDF and future
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_Questions' AND Column_Name = 'indent')
BEGIN
	ALTER TABLE [fsma_Questions]
	ADD indent INT NULL
END

GO





D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\_0_DB_Update7.53_Updates.sql


/*
DBUPDATE 7.53
*/

ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);

/*
DBUPDATE 7.53
*/

ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
/*
DBUPDATE 7.53
*/

ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
DBUPDATE 7.53
*/

ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
*/

ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);

ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ATTRID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN PQCAgencyName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SystemName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN FISMASystemID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN HighValueAssetID NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN CryptoModuleName NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN NameofVendorDev NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);

ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageNames NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);


ALTER TABLE PQCInventory ALTER COLUMN SoftwarePackageVersions NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AssessmentDate')
ALTER TABLE PQCInventory ALTER COLUMN OperatingSystem NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AssessmentDate')
BEGIN
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstFY2025BudgetReqsforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforFed NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforCon NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AssessmentDate')
BEGIN
	ALTER TABLE fsma_HVAs
ALTER TABLE PQCInventory ALTER COLUMN EstTotalBudgetReqFY2025ReqforSytemsInv NVARCHAR (4000);
ALTER TABLE PQCInventory ALTER COLUMN ProjectedSystemRefreshYear NVARCHAR (4000);


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AssessmentDate')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD AssessmentDate DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'AssessmentDate')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
BEGIN
	ALTER TABLE fsma_HVAs
	ADD AssessmentDate DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'AssessmentDate')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
	ADD AssessmentDate DATETIME NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DateAdded')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
	ADD AssessmentDate DATETIME NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'DateAdded')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD DateAdded DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateAdded')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
BEGIN
	ALTER TABLE fsma_HVAs
	ADD DateAdded DATETIME NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'DateAdded')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
	ADD DateAdded DATETIME NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AdminComments')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
	ADD DateAdded DATETIME NULL
END

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAs' AND Column_Name = 'AdminComments')
BEGIN
	ALTER TABLE fsma_HVAs
	ADD AdminComments NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'AdminComments')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
BEGIN
	ALTER TABLE fsma_HVAs
	ADD AdminComments NVARCHAR(4000) NULL
END
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'fsma_HVAsSNAPSHOT' AND Column_Name = 'AdminComments')
BEGIN
	ALTER TABLE fsma_HVAsSNAPSHOT
	ADD AdminComments NVARCHAR(4000) NULL
END

GO 


GO


IF NOT EXISTS(SELECT * FROM  INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='fsma_FormTypes' and COLUMN_NAME='ReportTooltip')
BEGIN
	ALTER TABLE fsma_FormTypes ADD ReportTooltip NVARCHAR(500) NULL
END

GO

UPDATE fsma_FormTypes




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\_14_DB_Update7.52_PQC_2023.sql

*/


IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'Component List' AND Column_Name = 'enablePQC')
BEGIN
	ALTER TABLE [Component List]
	ADD enablePQC INT NULL
END

GO   
/*
CONSTRAINT [PK_PQCInventory] PRIMARY KEY CLUSTERED ( [PK_PQCInventory] ASC ) 
)   
END
GO
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'PQCInventory' AND Column_Name = 'PQCAgencyName')
BEGIN
	ALTER TABLE PQCInventory
	ADD PQCAgencyName INT NULL
END
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'PQCInventory' AND Column_Name = 'CryptoAlgorithmUsed' AND DATA_TYPE NOT LIKE '%VARCHAR%')
BEGIN
	ALTER TABLE PQCInventory
	ADD PQCAgencyName INT NULL
END
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = 'PQCInventory' AND Column_Name = 'CryptoAlgorithmUsed' AND DATA_TYPE NOT LIKE '%VARCHAR%')
BEGIN
		ALTER TABLE PQCInventory ALTER COLUMN [CryptoAlgorithmUsed] [NVARCHAR](4000)
END 
GO
---PQC DATACALL BOOTSTRAPPER 

-- RETURN; TO PREVENT FROM RUNNING 




D:\dev\CyberScope\CyberScopeBranch\CSwebdev\database\Archive\Old DBUpdates\_1_DBUpdate_7.56_BOD2302_A_2023.sql
	,IsArchived BIT NULL  
	)   
END

GO

ALTER TABLE [dbo].[BOD2302SNAPSHOT] ADD  DEFAULT (GETDATE()) FOR [SnapshotDate]
GO

IF OBJECT_ID ('TRG_BOD2302_After_Insert_Update', 'TR') IS NOT NULL  
   DROP TRIGGER TRG_BOD2302_After_Insert_Update;




